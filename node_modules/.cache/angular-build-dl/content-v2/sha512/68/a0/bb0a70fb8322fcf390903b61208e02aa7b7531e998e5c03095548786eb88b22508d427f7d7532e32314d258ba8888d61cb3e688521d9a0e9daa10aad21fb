{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/attempt-history/attempt-history.component.ts","webpack:///src/app/attempt-history/attempt-history.component.html","webpack:///src/app/auth/auth.guard.ts","webpack:///src/app/auth/auth.interceptor.ts","webpack:///src/app/footer/footer.component.ts","webpack:///src/app/footer/footer.component.html","webpack:///src/app/forgot-password/forgot-password.component.ts","webpack:///src/app/forgot-password/forgot-password.component.html","webpack:///src/app/gre-predictor/gre-predictor.component.ts","webpack:///src/app/gre-predictor/gre-predictor.component.html","webpack:///src/app/gre/gre.component.ts","webpack:///src/app/gre/gre.component.html","webpack:///src/app/header/header.component.ts","webpack:///src/app/header/header.component.html","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/list-of-schools/list-of-schools.component.ts","webpack:///src/app/list-of-schools/list-of-schools.component.html","webpack:///src/app/login-and-signup-dialog/login-and-signup-dialog.component.ts","webpack:///src/app/login-and-signup-dialog/login-and-signup-dialog.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/masters-home/masters-home.component.ts","webpack:///src/app/masters-home/masters-home.component.html","webpack:///src/app/mock-test/mock-test.component.ts","webpack:///src/app/mock-test/mock-test.component.html","webpack:///src/app/models/answers.ts","webpack:///src/app/models/attempt.ts","webpack:///src/app/models/school-type.model.ts","webpack:///src/app/models/user-answers.ts","webpack:///src/app/models/user-schools.model.ts","webpack:///src/app/my-schools/my-schools.component.ts","webpack:///src/app/my-schools/my-schools.component.html","webpack:///src/app/profile-settings/profile-settings.component.ts","webpack:///src/app/profile-settings/profile-settings.component.html","webpack:///src/app/quantitative-practice/quantitative-practice.component.ts","webpack:///src/app/quantitative-practice/quantitative-practice.component.html","webpack:///src/app/quiz/quiz.component.ts","webpack:///src/app/quiz/quiz.component.html","webpack:///src/app/registration/registration.component.ts","webpack:///src/app/registration/registration.component.html","webpack:///src/app/school-ranking/school-ranking.component.ts","webpack:///src/app/school-ranking/school-ranking.component.html","webpack:///src/app/services/prediction-service.service.ts","webpack:///src/app/services/question-manager.service.ts","webpack:///src/app/services/school.service.ts","webpack:///src/app/services/user.service.ts","webpack:///src/app/static-pages/about-us/about-us.component.ts","webpack:///src/app/static-pages/about-us/about-us.component.html","webpack:///src/app/static-pages/contact-us/contact-us.component.ts","webpack:///src/app/static-pages/contact-us/contact-us.component.html","webpack:///src/app/static-pages/faqs/faqs.component.ts","webpack:///src/app/static-pages/faqs/faqs.component.html","webpack:///src/app/static-pages/privacy-policies/privacy-policies.component.ts","webpack:///src/app/static-pages/privacy-policies/privacy-policies.component.html","webpack:///src/app/static-pages/terms-and-conditions/terms-and-conditions.component.ts","webpack:///src/app/static-pages/terms-and-conditions/terms-and-conditions.component.html","webpack:///src/app/success-stories/success-stories.component.ts","webpack:///src/app/success-stories/success-stories.component.html","webpack:///src/app/take-mock-test/take-mock-test.component.ts","webpack:///src/app/take-mock-test/take-mock-test.component.html","webpack:///src/app/take-quant-test/take-quant-test.component.ts","webpack:///src/app/take-quant-test/take-quant-test.component.html","webpack:///src/app/take-quiz/take-quiz.component.ts","webpack:///src/app/take-quiz/take-quiz.component.html","webpack:///src/app/take-verbal-test/take-verbal-test.component.ts","webpack:///src/app/take-verbal-test/take-verbal-test.component.html","webpack:///src/app/verbal-practice/verbal-practice.component.ts","webpack:///src/app/verbal-practice/verbal-practice.component.html","webpack:///src/app/view-answers/view-answers.component.ts","webpack:///src/app/view-answers/view-answers.component.html","webpack:///src/app/why-masters/why-masters.component.ts","webpack:///src/app/why-masters/why-masters.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","canActivate","redirectTo","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","provide","useClass","multi","declarations","providers","bootstrap","AttemptHistoryComponent","questionService","userService","route","router","displayedColumns","loading","dataSource","paginator","sort","loadAttemptHistory","getAttemptHistory","getUserEmail","subscribe","data","fillAttempts","event","filterValue","target","value","filter","trim","toLowerCase","attemptList","i","mockTests","length","attempt","score","testId","mockTestId","dateTaken","createdDate","test","push","verbalTests","verbalTestId","quantTests","quantTestId","quizTests","quizTestId","setDataSourceAttributes","answerId","navigate","relativeTo","ms","mp","encapsulation","Emulated","AuthGuard","next","state","isLoggedIn","navigateByUrl","deleteToken","deleteUserEmail","providedIn","AuthInterceptor","headers","get","handle","clone","clonedreq","set","getToken","pipe","err","error","auth","FooterComponent","mediaObserver","mediaSubscribe","unsubscribe","media$","result","deviceXs","mqAlias","MyErrorStateMatcher","control","form","invalidCtrl","invalid","parent","dirty","invalidParent","ForgotPasswordComponent","location","dialog","formBuilder","_snackBar","userDetails","email","password","matcher","emailRegex","hide","hasError","controlName","errorName","forgotPasswordForm","controls","group","required","pattern","minLength","confirmPassword","validator","checkPasswords","updateUserPassword","res","serverErrorMessages","logout","alert","open","duration","back","pass","confirmPass","notSame","resetPassword","GrePredictorComponent","predictionService","collegeList","getCollegeData","getColleges","dreamCollege","map","x","school","possibility","reachCollege","safeCollege","totalScore","GreComponent","HeaderComponent","HomeComponent","ListOfSchoolsComponent","schoolService","schoolList","Array","tempUserSchools","isLoading","myControl","schoolChoosen","refreshSchoolList","setValue","name","indexOf","getSchoolList","schools","filteringSchools","getUserSchools","filteredSchools","valueChanges","_filter","slice","schooType","emailId","userSchools","getFavouriteSchool","userId","favouriteSchools","favouriteSchool","schoolId","schoolName","schoolType","postFavouriteSchool","some","s","LoginAndSignupDialogComponent","dialogRef","close","onNoClick","LoginComponent","loginForm","login","setToken","setUserEmail","message","forgotPassword","MastersHomeComponent","MockTestComponent","Answers","Attempt","SchoolType","UserAnswers","UserSchools","MySchoolsComponent","dreamSchools","reachSchools","safeSchools","dream_dataSource","paginatorDream","reach_dataSource","paginatorReach","safe_dataSource","paginatorSafe","removeFavouriteSchool","ProfileSettingsComponent","firstName","mobileNumber","contactNum","submitted","makeFirstNameEditable","makeContactNumberEditable","signupForm","hasErrorInContactNum","contactNumberForm","hasErrorInChangePassword","passwordChangeForm","mobileNum","maxLength","getUserProfile","updateUserDetails","confirm","deleteUserAccount","accordion","submitUserName","submitContactNumber","submitPassword","QuantitativePracticeComponent","questionCount","questionType","setQuestionType","setNumberOfQuestions","QuizComponent","RegistrationComponent","lastName","postUser","width","afterClosed","status","join","signup","SchoolRankingComponent","rankings","viewValue","rankingControl","refreshEmployeeList","selectedRanking","a","b","csRank","eceRank","mechRank","globalRank","PredictionServiceService","http","user","requestBody","userEmailID","post","QuestionManagerService","httpClient","baseUrl","userAnswers","body","mockTest","quiz","url","requestParams","toString","params","SchoolService","schoolRankingURL","addSchoolURL","removeSchoolURL","getFavouriteSchoolURL","userSchool","put","UserService","selectedUser","noAuthHeader","NoAuth","authCredentials","token","localStorage","setItem","getItem","removeItem","userPayload","atob","split","JSON","parse","getUserPayload","exp","Date","now","AboutUSComponent","ContactUsComponent","FAQsComponent","PrivacyPoliciesComponent","TermsAndConditionsComponent","SuccessStoriesComponent","TakeMockTestComponent","mode","greScore","config","allowBack","autoMove","pageSize","showClock","showPager","theme","pager","index","size","count","timer","ellapsedTime","loadQuestions","getQuestions","questions","startTime","setInterval","tick","parseTime","diff","getTime","onSubmit","totalSeconds","mins","Math","floor","secs","round","question","goTo","flag","confirmation","questionAnswers","questionId","answers","fillUnansweredQuestions","saveUserAnswers","calculateGreScore","saveUserGreScore","unitQuestionScore","actualAnswers","j","parseInt","testType","questionTitle","answer","options","checked","splice","TakeQuantTestComponent","quantPracticeScore","getQuestionsForVerbalAndQuantPractice","calculateQuantPracticeScore","saveUserQuantPracticeScore","TakeQuizComponent","quizScore","getQuestionsForQuiz","calculateQuizScore","saveUserQuizScore","TakeVerbalTestComponent","verbalPracticeScore","calculateVerbalPracticeScore","saveUserVerbalPracticeScore","VerbalPracticeComponent","ViewAnswersComponent","getAnswers","userAnswer","correctAnswer","window","scrollTo","document","scrollHeight","WhyMastersComponent","environment","production","apiBaseUrl","bootstrapModule","console"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","// Authors - Padmesh Donthu, Pratibha Basapure, Abhinav Ramesh\r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { RegistrationComponent } from './registration/registration.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { AttemptHistoryComponent } from './attempt-history/attempt-history.component';\r\nimport { GrePredictorComponent } from './gre-predictor/gre-predictor.component';\r\nimport { GreComponent } from './gre/gre.component';\r\nimport { MastersHomeComponent } from './masters-home/masters-home.component';\r\nimport { SchoolRankingComponent } from './school-ranking/school-ranking.component';\r\nimport { MySchoolsComponent } from './my-schools/my-schools.component';\r\nimport { VerbalPracticeComponent } from './verbal-practice/verbal-practice.component';\r\nimport { QuantitativePracticeComponent } from './quantitative-practice/quantitative-practice.component';\r\nimport { WhyMastersComponent } from './why-masters/why-masters.component';\r\nimport { AboutUSComponent } from '../app/static-pages/about-us/about-us.component';\r\nimport { TermsAndConditionsComponent } from '../app/static-pages/terms-and-conditions/terms-and-conditions.component';\r\nimport { SuccessStoriesComponent } from './success-stories/success-stories.component';\r\nimport { QuizComponent } from './quiz/quiz.component';\r\nimport { TakeQuizComponent } from './take-quiz/take-quiz.component';\r\nimport { MockTestComponent } from './mock-test/mock-test.component';\r\nimport { TakeMockTestComponent } from './take-mock-test/take-mock-test.component';\r\nimport { ListOfSchoolsComponent } from './list-of-schools/list-of-schools.component';\r\nimport { ProfileSettingsComponent } from './profile-settings/profile-settings.component';\r\nimport { AuthGuard } from './auth/auth.guard';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { TakeVerbalTestComponent } from './take-verbal-test/take-verbal-test.component';\r\nimport { TakeQuantTestComponent } from './take-quant-test/take-quant-test.component';\r\nimport { ViewAnswersComponent } from './view-answers/view-answers.component';\r\nimport { ContactUsComponent } from './static-pages/contact-us/contact-us.component';\r\nimport { PrivacyPoliciesComponent } from './static-pages/privacy-policies/privacy-policies.component';\r\nimport { FAQsComponent } from './static-pages/faqs/faqs.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: HomeComponent,\r\n  },\r\n  {\r\n    path: 'login',\r\n    component: LoginComponent,\r\n  },\r\n  { path: 'registration', component: RegistrationComponent },\r\n  {\r\n    path: 'forgotPassward',\r\n    component: ForgotPasswordComponent,\r\n  },\r\n  { path: 'masters', component: MastersHomeComponent },\r\n  { path: 'masters/ranking', component: SchoolRankingComponent },\r\n  {\r\n    path: 'profile/mySchools',\r\n    component: MySchoolsComponent,\r\n    canActivate: [AuthGuard],\r\n  },\r\n  {\r\n    path: 'gre/verbal',\r\n    component: VerbalPracticeComponent,\r\n    canActivate: [AuthGuard],\r\n  },\r\n  {\r\n    path: 'gre/verbal/takeVerbalPracticeTest',\r\n    component: TakeVerbalTestComponent,\r\n    canActivate: [AuthGuard],\r\n  },\r\n  {\r\n    path: 'gre/quant',\r\n    component: QuantitativePracticeComponent,\r\n    canActivate: [AuthGuard],\r\n  },\r\n  {\r\n    path: 'gre/quant/takeQuantPracticeTest',\r\n    component: TakeQuantTestComponent,\r\n    canActivate: [AuthGuard],\r\n  },\r\n  { path: 'masters/whyMasters', component: WhyMastersComponent },  \r\n  { path: 'terms', component: TermsAndConditionsComponent },\r\n  { path: 'masters/stories', component: SuccessStoriesComponent },\r\n  {\r\n    path: 'attemptHistory',\r\n    component: AttemptHistoryComponent,\r\n    canActivate: [AuthGuard],\r\n  },\r\n  {\r\n    path: 'attemptHistory/viewAnswers',\r\n    component: ViewAnswersComponent,\r\n    canActivate: [AuthGuard],\r\n  },\r\n  { path: '***', redirectTo: '' },\r\n  {\r\n    path: 'gre-predictor',\r\n    component: GrePredictorComponent,\r\n    canActivate: [AuthGuard],\r\n  },\r\n  { path: 'gre', component: GreComponent, canActivate: [AuthGuard] },\r\n  { path: 'gre/quiz', component: QuizComponent, canActivate: [AuthGuard] },\r\n  {\r\n    path: 'gre/quiz/takeQuiz',\r\n    component: TakeQuizComponent,\r\n    canActivate: [AuthGuard],\r\n  },\r\n  {\r\n    path: 'gre/mocktest',\r\n    component: MockTestComponent,\r\n    canActivate: [AuthGuard],\r\n  },\r\n  {\r\n    path: 'gre/mocktest/takeMockTest',\r\n    component: TakeMockTestComponent,\r\n    canActivate: [AuthGuard],\r\n  },\r\n  {\r\n    path: 'masters/listOfSchools',\r\n    component: ListOfSchoolsComponent,\r\n    canActivate: [AuthGuard],\r\n  },\r\n  {\r\n    path: 'profile/profileSettings',\r\n    component: ProfileSettingsComponent,\r\n    canActivate: [AuthGuard],\r\n  },\r\n  { path: 'termsAndConditions', component: TermsAndConditionsComponent },\r\n  { path: 'contactUs', component: ContactUsComponent },\r\n  { path: 'aboutUs', component: AboutUSComponent },\r\n  { path: 'privacyPolicies', component: PrivacyPoliciesComponent },\r\n  { path: 'faqs', component: FAQsComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n","// Author - Padmesh Donthu\r\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css'],\r\n})\r\nexport class AppComponent {\r\n  title = 'GrePrep';\r\n}\r\n","<!--Author - Padmesh Donthu-->\r\n<router-outlet></router-outlet>","// Authors - Padmesh Donthu, Pratibha Basapure, Abhinav Ramesh\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegistrationComponent } from './registration/registration.component';\r\nimport { HeaderComponent } from './header/header.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { LoginAndSignupDialogComponent } from './login-and-signup-dialog/login-and-signup-dialog.component';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { AttemptHistoryComponent } from './attempt-history/attempt-history.component';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { FooterComponent } from './footer/footer.component';\r\nimport { GrePredictorComponent } from './gre-predictor/gre-predictor.component';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { RouterModule } from '@angular/router';\r\nimport { GreComponent } from './gre/gre.component';\r\nimport { MastersHomeComponent } from './masters-home/masters-home.component';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { SchoolRankingComponent } from './school-ranking/school-ranking.component';\r\nimport { MySchoolsComponent } from './my-schools/my-schools.component';\r\nimport { VerbalPracticeComponent } from './verbal-practice/verbal-practice.component';\r\nimport { QuantitativePracticeComponent } from './quantitative-practice/quantitative-practice.component';\r\nimport { WhyMastersComponent } from './why-masters/why-masters.component';\r\nimport { TermsAndConditionsComponent } from './static-pages/terms-and-conditions/terms-and-conditions.component';\r\nimport { SuccessStoriesComponent } from './success-stories/success-stories.component';\r\nimport { QuizComponent } from './quiz/quiz.component';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { TakeQuizComponent } from './take-quiz/take-quiz.component';\r\nimport { MockTestComponent } from './mock-test/mock-test.component';\r\nimport { TakeMockTestComponent } from './take-mock-test/take-mock-test.component';\r\nimport { ListOfSchoolsComponent } from './list-of-schools/list-of-schools.component';\r\nimport { ProfileSettingsComponent } from './profile-settings/profile-settings.component';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport { QuestionManagerService } from './services/question-manager.service';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { UserService } from './services/user.service';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { AuthGuard } from './auth/auth.guard';\r\nimport { AuthInterceptor } from './auth/auth.interceptor';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { SchoolService } from './services/school.service';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { TakeVerbalTestComponent } from './take-verbal-test/take-verbal-test.component';\r\nimport { TakeQuantTestComponent } from './take-quant-test/take-quant-test.component';\r\nimport { ViewAnswersComponent } from './view-answers/view-answers.component';\r\nimport { ContactUsComponent } from './static-pages/contact-us/contact-us.component';\r\nimport { FAQsComponent } from './static-pages/faqs/faqs.component';\r\nimport { PrivacyPoliciesComponent } from './static-pages/privacy-policies/privacy-policies.component';\r\nimport { AboutUSComponent } from './static-pages/about-us/about-us.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginComponent,\r\n    RegistrationComponent,\r\n    HeaderComponent,\r\n    HomeComponent,\r\n    LoginAndSignupDialogComponent,\r\n    AttemptHistoryComponent,\r\n    FooterComponent,\r\n    GrePredictorComponent,\r\n    GreComponent,\r\n    MastersHomeComponent,\r\n    SchoolRankingComponent,\r\n    MySchoolsComponent,\r\n    VerbalPracticeComponent,\r\n    QuantitativePracticeComponent,\r\n    WhyMastersComponent,    \r\n    SuccessStoriesComponent,\r\n    QuizComponent,\r\n    TakeQuizComponent,\r\n    MockTestComponent,\r\n    TakeMockTestComponent,\r\n    ListOfSchoolsComponent,\r\n    ProfileSettingsComponent,\r\n    ForgotPasswordComponent,\r\n    TakeVerbalTestComponent,\r\n    TakeQuantTestComponent,\r\n    ViewAnswersComponent,\r\n    TermsAndConditionsComponent,\r\n    ContactUsComponent,\r\n    FAQsComponent,\r\n    PrivacyPoliciesComponent,\r\n    AboutUSComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    MatCardModule,\r\n    BrowserAnimationsModule,\r\n    MatAutocompleteModule,\r\n    MatFormFieldModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatInputModule,\r\n    MatGridListModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatToolbarModule,\r\n    MatSidenavModule,\r\n    MatListModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatExpansionModule,\r\n    FlexLayoutModule,\r\n    MatDialogModule,\r\n    MatSelectModule,\r\n    MatTooltipModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    NgbModule,\r\n    RouterModule,\r\n    MatMenuModule,\r\n    MatRadioModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    HttpClientModule,\r\n    MatProgressSpinnerModule,\r\n    MatCheckboxModule,\r\n    MatSnackBarModule,\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: AuthInterceptor,\r\n      multi: true,\r\n    },\r\n    UserService,\r\n    AuthGuard,\r\n    QuestionManagerService,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    HttpClientModule,\r\n    SchoolService,\r\n  ],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n","// Author - Padmesh Donthu\r\nimport { Component, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { QuestionManagerService } from '../services/question-manager.service';\r\nimport { UserService } from '../services/user.service';\r\nimport { Test } from '../models/test';\r\nimport { Attempt } from '../models/attempt';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-attempt-history',\r\n  templateUrl: './attempt-history.component.html',\r\n  styleUrls: ['./attempt-history.component.css'],\r\n  encapsulation: ViewEncapsulation.Emulated,\r\n})\r\nexport class AttemptHistoryComponent implements OnInit {\r\n  constructor(\r\n    private questionService: QuestionManagerService,\r\n    private userService: UserService,\r\n    private route: ActivatedRoute,\r\n    private router: Router\r\n  ) {}\r\n\r\n  // Variable to set the list of columns to be displayed in the table\r\n  displayedColumns: string[] = ['test', 'score', 'dateTaken', 'action'];\r\n\r\n  // Variable that stores the data to be shown in the table\r\n  dataSource: MatTableDataSource<Attempt>;\r\n  attemptList: Attempt[];\r\n  loading: boolean = true;\r\n\r\n  // Variables to set the paginator and sorting for the table\r\n  private paginator: MatPaginator;\r\n  private sort: MatSort;\r\n\r\n  @ViewChild(MatSort) set matSort(ms: MatSort) {\r\n    this.sort = ms;\r\n    this.setDataSourceAttributes();\r\n  }\r\n\r\n  @ViewChild(MatPaginator) set matPaginator(mp: MatPaginator) {\r\n    this.paginator = mp;\r\n    this.setDataSourceAttributes();\r\n  }\r\n\r\n  // Method to set the attributes like paging, sorting for the table\r\n  setDataSourceAttributes() {\r\n    if (!this.loading) {\r\n      this.dataSource.paginator = this.paginator;\r\n      this.dataSource.sort = this.sort;\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadAttemptHistory();\r\n  }\r\n\r\n  // Method to load the attempt histories for the user\r\n  loadAttemptHistory() {\r\n    this.questionService\r\n      .getAttemptHistory(this.userService.getUserEmail())\r\n      .subscribe((data: Test) => {\r\n        this.fillAttempts(data);\r\n      });\r\n  }\r\n\r\n  // Method to apply filter on the datasource when user types something in the search box\r\n  applyFilter(event: Event) {\r\n    const filterValue = (event.target as HTMLInputElement).value;\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n  // Method to store all the attempts to the datasource which requires a Attempt Array\r\n  fillAttempts(data: Test) {\r\n    this.attemptList = [];\r\n    if (data != null) {\r\n      for (var i = 0; i < data.mockTests.length; i++) {\r\n        var attempt = new Attempt();\r\n        attempt.score = data.mockTests[i].score;\r\n        attempt.testId = data.mockTests[i].mockTestId;\r\n        attempt.dateTaken = data.mockTests[i].createdDate;\r\n        attempt.test = 'Mock Test';\r\n        this.attemptList.push(attempt);\r\n      }\r\n      for (var i = 0; i < data.verbalTests.length; i++) {\r\n        var attempt = new Attempt();\r\n        attempt.score = data.verbalTests[i].score;\r\n        attempt.testId = data.verbalTests[i].verbalTestId;\r\n        attempt.dateTaken = data.verbalTests[i].createdDate;\r\n        attempt.test = 'Verbal Test';\r\n        this.attemptList.push(attempt);\r\n      }\r\n      for (var i = 0; i < data.quantTests.length; i++) {\r\n        var attempt = new Attempt();\r\n        attempt.score = data.quantTests[i].score;\r\n        attempt.testId = data.quantTests[i].quantTestId;\r\n        attempt.dateTaken = data.quantTests[i].createdDate;\r\n        attempt.test = 'Quantitative Test';\r\n        this.attemptList.push(attempt);\r\n      }\r\n      for (var i = 0; i < data.quizTests.length; i++) {\r\n        var attempt = new Attempt();\r\n        attempt.score = data.quizTests[i].score;\r\n        attempt.testId = data.quizTests[i].quizTestId;\r\n        attempt.dateTaken = data.quizTests[i].createdDate;\r\n        attempt.test = 'Quiz';\r\n        this.attemptList.push(attempt);\r\n      }\r\n    }\r\n    this.loading = false;\r\n    this.dataSource = new MatTableDataSource(this.attemptList);\r\n    this.setDataSourceAttributes();\r\n  }\r\n\r\n  // Method to navigate the user to to a new page which displays the list of questions and answers\r\n  // attempted by the user\r\n  viewAnswers(testId: string) {\r\n    this.questionService.answerId = testId;\r\n    this.router.navigate(['viewAnswers'], { relativeTo: this.route });\r\n  }\r\n}\r\n","<!--Author - Padmesh -->\r\n<div style=\"overflow: auto; min-height: 100%; background-color: #e7ebee;\">\r\n  <app-header></app-header>\r\n  <div class=\"attemptHistory\">\r\n    <h1 style=\"text-align: center;\">Attempt History</h1>\r\n    <div *ngIf=\"!loading\">\r\n      <mat-form-field appearance=\"outline\">\r\n        <mat-label>Search attempts...</mat-label>\r\n        <input matInput (keyup)=\"applyFilter($event)\" placeholder=\"Ex. qui\" />\r\n        <mat-icon matPrefix>search</mat-icon>\r\n      </mat-form-field>\r\n      <div\r\n        class=\"attemptTable mat-elevation-z12\"\r\n        [hidden]=\"dataSource.filteredData.length === 0\"\r\n      >\r\n        <table mat-table matSort [dataSource]=\"dataSource\">\r\n          <ng-container matColumnDef=\"test\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Test</th>\r\n            <td mat-cell *matCellDef=\"let element\">{{ element.test }}</td>\r\n          </ng-container>\r\n          <ng-container matColumnDef=\"score\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Score</th>\r\n            <td mat-cell *matCellDef=\"let element\">{{ element.score }}</td>\r\n          </ng-container>\r\n          <ng-container matColumnDef=\"dateTaken\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n              Date Taken\r\n            </th>\r\n            <td mat-cell *matCellDef=\"let element\">{{ element.dateTaken }}</td>\r\n          </ng-container>\r\n          <ng-container matColumnDef=\"action\">\r\n            <th mat-header-cell *matHeaderCellDef>Answers</th>\r\n            <td mat-cell *matCellDef=\"let element\">\r\n              <button\r\n                mat-button\r\n                color=\"primary\"\r\n                style=\"text-decoration: underline;\"\r\n                (click)=\"viewAnswers(element.testId)\"\r\n              >\r\n                View Answers\r\n              </button>\r\n            </td>\r\n          </ng-container>\r\n          <tr\r\n            mat-header-row\r\n            *matHeaderRowDef=\"displayedColumns; sticky: true\"\r\n          ></tr>\r\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\r\n        </table>\r\n        <mat-paginator\r\n          [pageSizeOptions]=\"[5, 10, 20, 50, 100]\"\r\n          showFirstLastButtons\r\n          class=\"mat-paginator-sticky\"\r\n        ></mat-paginator>\r\n      </div>\r\n      <div\r\n        *ngIf=\"dataSource.filteredData.length === 0\"\r\n        fxLayoutAlign=\"center center\"\r\n      >\r\n        <img\r\n          src=\"../../assets/img/noresultsfound.PNG\"\r\n          width=\"180vw\"\r\n          height=\"180vh\"\r\n          style=\"margin-top: 8vw;\"\r\n        />\r\n      </div>\r\n    </div>\r\n    <div class=\"loading-indicator\" *ngIf=\"loading\">\r\n      <mat-spinner></mat-spinner>\r\n    </div>\r\n  </div>\r\n</div>\r\n","//  Author: Pratibha B(B00847415)\r\nimport { Injectable } from '@angular/core';\r\nimport {\r\n  CanActivate,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot,\r\n} from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n//  Author: Pratibha B(B00847415)\r\nimport { Router } from '@angular/router';\r\nimport { UserService } from '../services/user.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private userService: UserService, private router: Router) {}\r\n\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): boolean {\r\n    if (!this.userService.isLoggedIn()) {\r\n      this.router.navigateByUrl('/login');\r\n      this.userService.deleteToken();\r\n      this.userService.deleteUserEmail();\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","//  Author: Pratibha B(B00847415)\r\nimport {\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Router } from '@angular/router';\r\nimport { UserService } from '../services/user.service';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  constructor(private userService: UserService, private router: Router) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n    //for login and sign up ui..where no need to check token\r\n    if (req.headers.get('noauth')) return next.handle(req.clone());\r\n    else {\r\n      const clonedreq = req.clone({\r\n        headers: req.headers.set(\r\n          'Authorization',\r\n          'Bearer ' + this.userService.getToken()\r\n        ),\r\n      });\r\n      return next.handle(clonedreq).pipe(\r\n        tap(\r\n          (event) => {},\r\n          (err) => {\r\n            if (err.error.auth == false) {\r\n              this.router.navigateByUrl('/login');\r\n            }\r\n          }\r\n        )\r\n      );\r\n    }\r\n  }\r\n}\r\n","// Author - Padmesh Donthu\r\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\nimport { MediaObserver, MediaChange } from '@angular/flex-layout';\r\n\r\n@Component({\r\n  selector: 'app-footer',\r\n  templateUrl: './footer.component.html',\r\n  styleUrls: ['./footer.component.css'],\r\n  encapsulation: ViewEncapsulation.Emulated\r\n})\r\nexport class FooterComponent implements OnInit {\r\n  mediaSubscribe: Subscription;\r\n  deviceXs: boolean;\r\n  constructor(private router: Router, private mediaObserver: MediaObserver) {}\r\n  ngOnDestroy(): void {\r\n    this.mediaSubscribe.unsubscribe();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.mediaSubscribe = this.mediaObserver.media$.subscribe(\r\n      (result: MediaChange) => {\r\n        this.deviceXs = result.mqAlias === 'xs' ? true : false;\r\n      }\r\n    );\r\n  }\r\n  openAttemptHistory() {\r\n    this.router.navigate(['attemptHistory']);\r\n  }\r\n}\r\n","<!--Author - Padmesh Donthu, Pratibha Basapure-->\r\n<div style=\"background-color: #404242; color: white;\">\r\n  <div\r\n    fxLayout=\"row\"\r\n    fxLayout.xs=\"column\"\r\n    fxLayoutWrap\r\n    fxLayoutGap=\"20px\"\r\n    fxLayoutGap.xs=\"5px\"\r\n    fxLayoutAlign=\"start\"\r\n    style=\"padding: 2%;\"\r\n  >\r\n    <div fxFlex=\"30%\" fxLayout=\"column wrap\" fxLayoutAlign=\"start start\">\r\n      <p style=\"color: gray; text-decoration: underline; font-size: medium;\">\r\n        Some quick links...\r\n      </p>\r\n      <p style=\"margin: 0;\">\r\n        <a [routerLink]=\"'/privacyPolicies'\">Privacy Policies</a>\r\n      </p>\r\n      <p style=\"margin: 0;\">\r\n        <a [routerLink]=\"'/termsAndConditions'\">Terms and Conditions</a>\r\n      </p>\r\n      <p style=\"margin: 0;\">\r\n        <a [routerLink]=\"'/faqs'\">FAQs</a>\r\n      </p>\r\n    </div>\r\n    <div fxFlex=\"40%\">\r\n      <div fxLayout=\"column wrap\" fxLayoutAlign=\"center center\">\r\n        <p style=\"color: gray; text-decoration: underline; font-size: medium;\">\r\n          Connect with us at..\r\n        </p>\r\n\r\n        <div fxLayout=\"row\" fxLayoutGap=\"40px\" fxLayoutAlign=\"center\">\r\n          <a\r\n            href=\"https://www.facebook.com/GREPrep-106492821161876\"\r\n            target=\"_blank\"\r\n            style=\"margin-right: 40px;\"\r\n          >\r\n            <img\r\n              src=\"../../assets/img/f_logo_RGB-Blue_100.png\"\r\n              style=\"cursor: pointer; width: 150%;\"\r\n            />\r\n          </a>\r\n          <a href=\"https://www.instagram.com\" target=\"_blank\">\r\n            <img\r\n              src=\"../../assets/img/glyph-logo_May2016.png\"\r\n              style=\"cursor: pointer; width: 65%; margin-left: 20px;\"\r\n            />\r\n          </a>\r\n          <a href=\"https://www.linkedin.com\" target=\"_blank\">\r\n            <img\r\n              src=\"../../assets/img/LI-In-Bug.png\"\r\n              style=\"cursor: pointer; width: 62%;\"\r\n            />\r\n          </a>\r\n          <a href=\"https://www.youtube.com/watch?v=gmUX4Brfqag\" target=\"_blank\">\r\n            <img\r\n              src=\"../../assets/img/yt_logo_rgb_light.png\"\r\n              style=\"\r\n                cursor: pointer;\r\n                width: 75%;\r\n                margin-top: 35px;\r\n                margin-left: -45px;\r\n              \"\r\n            />\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div fxFlex=\"25%\" fxLayout=\"column wrap\" fxLayoutAlign=\"end end\">\r\n      <p style=\"color: gray; text-decoration: underline; font-size: medium;\">\r\n        Some quick links...\r\n      </p>\r\n      <p style=\"margin: 0;\">\r\n        <a [routerLink]=\"'/contactUs'\">Contact Us</a>\r\n      </p>\r\n      <p style=\"margin: 0;\">\r\n        <a [routerLink]=\"'/aboutUs'\">About Us</a>\r\n      </p>\r\n    </div>\r\n  </div>\r\n  <div\r\n    fxLayout=\"row\"\r\n    fxLayout.xs=\"column\"\r\n    fxLayoutWrap\r\n    fxLayoutGap=\"20px\"\r\n    fxLayoutGap.xs=\"5px\"\r\n    fxLayoutAlign=\"end end\"\r\n    style=\"padding-right: 2%;\"\r\n  >\r\n    <div fxFlex=\"100%\" style=\"text-align: right;\">\r\n      <a\r\n        href=\"https://play.google.com/store/apps/details?id=mega.GRE.examination\"\r\n        target=\"_blank\"\r\n      >\r\n        <img src=\"../../assets/img/google-play-badge.png\" style=\"width: 15%;\" />\r\n      </a>\r\n    </div>\r\n  </div>\r\n  <div\r\n    fxLayout=\"row\"\r\n    fxLayout.xs=\"column\"\r\n    fxLayoutWrap\r\n    fxLayoutGap=\"20px\"\r\n    fxLayoutGap.xs=\"5px\"\r\n    fxLayoutAlign=\"center center\"\r\n    style=\"padding-top: 0.5%;\"\r\n  >\r\n    <div fxFlex=\"100%\">\r\n      <h5 style=\"font-size: medium; text-align: center;\">\r\n        &#169; 2020 by GREPREP. All Rights Reserved.\r\n      </h5>\r\n    </div>\r\n  </div>\r\n</div>\r\n","//  Author: Pratibha B(B00847415)\r\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators, FormGroupDirective, NgForm, FormBuilder } from '@angular/forms';\r\nimport { Location } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n  MatDialog,\r\n} from '@angular/material/dialog';\r\nimport { LoginAndSignupDialogComponent } from '../login-and-signup-dialog/login-and-signup-dialog.component';\r\nimport { UserService } from '../services/user.service';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\nimport { User } from '../models/user.model';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\r\n  isErrorState(\r\n    control: FormControl | null,\r\n    form: FormGroupDirective | NgForm | null\r\n  ): boolean {\r\n    const invalidCtrl = !!(control && control.invalid && control.parent.dirty);\r\n    const invalidParent = !!(\r\n      control &&\r\n      control.parent &&\r\n      control.parent.invalid &&\r\n      control.parent.dirty\r\n    );\r\n\r\n    return invalidCtrl || invalidParent;\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'app-forgot-password',\r\n  templateUrl: './forgot-password.component.html',\r\n  styleUrls: ['./forgot-password.component.css'],\r\n  encapsulation: ViewEncapsulation.Emulated,\r\n})\r\nexport class ForgotPasswordComponent implements OnInit {  \r\n  userDetails: User={ email: '', password: '' };;\r\n  matcher = new MyErrorStateMatcher();\r\n  forgotPasswordForm: FormGroup;\r\n  emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  hide = true;\r\n  serverErrorMessages: string;\r\n  constructor(\r\n    private location: Location,\r\n    private router: Router,\r\n    private dialog: MatDialog,\r\n    private userService: UserService,\r\n    private formBuilder: FormBuilder,\r\n    private _snackBar: MatSnackBar\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.forgotPasswordForm = this.formBuilder.group(\r\n      {     \r\n        email: new FormControl('', [Validators.required, Validators.email,Validators.pattern(this.emailRegex)]),\r\n        password: new FormControl('', [\r\n          Validators.required,\r\n          Validators.minLength(8),\r\n        ]),\r\n        confirmPassword: new FormControl('', [Validators.required]),      \r\n      },\r\n      { validator: this.checkPasswords }\r\n    );    \r\n  }\r\n\r\n  public hasError = (controlName: string, errorName: string) => {\r\n    return this.forgotPasswordForm.controls[controlName].hasError(errorName);\r\n  };\r\n\r\n  resetPassword() {    \r\n    if (this.forgotPasswordForm.invalid) {\r\n      return;\r\n    }\r\n    else{\r\n      this.userDetails.password = this.forgotPasswordForm.controls['password'].value;\r\n      this.userDetails.email = this.forgotPasswordForm.controls['email'].value;\r\n      this.userService.updateUserPassword(this.userDetails).subscribe(\r\n        (res) => {                   \r\n          if(res == null){\r\n            this.serverErrorMessages = \"You do not seem to be registered. Please check your email\";\r\n            return;\r\n          }\r\n          this.userService.logout();          \r\n          alert(\"Password updated successfully. Please login using new password to continue.\")\r\n        },\r\n        err => {\r\n          this._snackBar.open(\"Something went wrong. Unable to update. Please try later !!\", '', { duration: 300 });\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  onCancel() {\r\n    this.location.back;\r\n  }\r\n  forgotPassword(){\r\n    this.router.navigate(['/']);\r\n  }\r\n  checkPasswords(group: FormGroup) {\r\n    let pass = group.controls.password.value;\r\n    let confirmPass = group.controls.confirmPassword.value;\r\n\r\n    return pass === confirmPass ? null : { notSame: true };\r\n  }\r\n}\r\n","<div class=\"loginLayout\">\r\n    <mat-card class=\"loginCard\" [class.mat-elevation-z10]=\"true\">\r\n        <mat-card-title>Returning User?</mat-card-title>\r\n        <mat-card-subtitle>Continue your learning!</mat-card-subtitle>\r\n        <mat-card-content>\r\n            <div class=\"alert\" *ngIf=\"serverErrorMessages\">\r\n                {{ serverErrorMessages }}\r\n              </div>\r\n            <div class=\"container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"0.5\"\r\n                fxLayoutAlign=\"start\">\r\n                <div fxFlex=\"35%\" style=\"padding: 10px;\">\r\n                    <form [formGroup]=\"forgotPasswordForm\" (ngSubmit)=\"resetPassword()\">\r\n                        <div class=\"container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"0.5\"\r\n                            fxLayoutAlign=\"start\">\r\n                            <mat-form-field appearance=\"outline\">\r\n                                <mat-label>Email address</mat-label>\r\n\r\n                                <input matInput type=\"email\" required placeholder=\"Enter your Email address\"\r\n                                    formControlName=\"email\" id=\"email\" />\r\n                                <mat-icon matPrefix>email</mat-icon>\r\n                                <mat-hint align=\"end\">Example: xyz@gmail.com</mat-hint>\r\n                                <mat-error *ngIf=\"hasError('email', 'required')\">Email address is required</mat-error>\r\n                                <mat-error *ngIf=\"hasError('email', 'email')\">Emaild address is not valid</mat-error>\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <br />\r\n                        <div class=\"container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"0.5\"\r\n                            fxLayoutAlign=\"start\">\r\n                            <mat-form-field appearance=\"outline\">\r\n                                <mat-label>Password</mat-label>\r\n                                <input matInput [type]=\"hide ? 'password' : 'text'\" required\r\n                                    placeholder=\"Enter your password\" formControlName=\"password\" id=\"password\"\r\n                                    minlength=\"8\" />\r\n                                <mat-icon matPrefix>lock</mat-icon>\r\n                                <mat-icon matSuffix (click)=\"hide = !hide\" style=\"cursor: pointer;\">\r\n                                    {{ hide ? \"visibility_off\" : \"visibility\" }}</mat-icon>\r\n                                <mat-error *ngIf=\"hasError('password', 'required')\">Password is required</mat-error>\r\n                                <mat-error *ngIf=\"hasError('password', 'minlength')\">The minimum length is 8 characters\r\n                                </mat-error>\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <br />\r\n                        <div class=\"container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"0.5\"\r\n                            fxLayoutAlign=\"start\">\r\n                            <mat-form-field appearance=\"outline\">\r\n                                <mat-label>Confirm Password</mat-label>\r\n                  <input matInput [type]=\"hide ? 'password' : 'text'\" placeholder=\"Confirm your password\"\r\n                    formControlName=\"confirmPassword\" id=\"confirmPassword\" [errorStateMatcher]=\"matcher\" />\r\n                  <mat-icon matPrefix>lock</mat-icon>\r\n                  <mat-icon matSuffix (click)=\"hide = !hide\" style=\"cursor: pointer;\">\r\n                    {{ hide ? \"visibility_off\" : \"visibility\" }}</mat-icon>\r\n                  <mat-error *ngIf=\"forgotPasswordForm.hasError('notSame')\">\r\n                    Passwords do not match\r\n                  </mat-error>\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <br />\r\n                        <div class=\"container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"0.5\"\r\n                            fxLayoutAlign=\"start\">\r\n                            <button type=\"submit\" mat-raised-button color=\"primary\" [disabled]=\"!forgotPasswordForm.valid\">\r\n                                Resume Learning!\r\n                            </button>\r\n                        </div>\r\n                        <br />                      \r\n                    </form>\r\n                    <br />\r\n                    <div class=\"container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"0.5\"\r\n                        fxLayoutAlign=\"start\">\r\n                        <div>\r\n                            New User? Create account here\r\n                            <a href=\"/registration\">\r\n                                <button mat-stroked-button color=\"primary\" class=\"loginBtn\">\r\n                                    Start Learning!\r\n                                </button>\r\n                            </a>\r\n                            <br />\r\n                            <a [routerLink]=\"['']\">Go to Home</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div fxFlex=\"65%\">\r\n                    <br />\r\n                    <div class=\"container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"0.5\"\r\n                        fxLayoutAlign=\"end\">\r\n                        <div>\r\n                            <img src=\"../../assets/img/english2.jpg\" width=\"80%\" height=\"75%\" />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>           \r\n        </mat-card-content>\r\n    </mat-card>\r\n</div>","//Author- Neelesh Singh\r\nimport { Component, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { PredictionServiceService } from '../services/prediction-service.service';\r\nimport { UserService } from '../services/user.service';\r\n\r\nexport interface GrePredictor {\r\n  school: string;\r\n  possibility: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-gre-predictor',\r\n  templateUrl: './gre-predictor.component.html',\r\n  styleUrls: ['./gre-predictor.component.css'],\r\n  encapsulation: ViewEncapsulation.Emulated,\r\n})\r\nexport class GrePredictorComponent implements OnInit {\r\n  constructor(\r\n    private predictionService: PredictionServiceService,\r\n    private userService: UserService\r\n  ) {}\r\n\r\n  collegeList: GrePredictor[] = [];\r\n  totalScore: any;\r\n  displayedColumns: string[] = ['school', 'possibility'];\r\n  dataSource: MatTableDataSource<GrePredictor>;\r\n  // dataSource = new MatTableDataSource<GrePredictor>(this.collegeList);\r\n\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\r\n  ngOnInit(): void {\r\n    this.getCollegeData();\r\n  }\r\n  /** Getting the data corresponding to the school, that is the possibility **/\r\n  private getCollegeData() {\r\n    this.predictionService\r\n      .getColleges(this.userService.getUserEmail())\r\n      .subscribe(\r\n        (res) => {\r\n          const dreamCollege = res['DreamColleges'].map((x) => {\r\n            return {\r\n              school: x,\r\n              possibility: 'Dream',\r\n            };\r\n          });\r\n          const reachCollege = res['ReachColleges'].map((x) => {\r\n            return {\r\n              school: x,\r\n              possibility: 'Reach',\r\n            };\r\n          });\r\n          const safeCollege = res['SafeColleges'].map((x) => {\r\n            return {\r\n              school: x,\r\n              possibility: 'Safe',\r\n            };\r\n          });\r\n          /** adding to the current object **/\r\n          this.collegeList = [...dreamCollege, ...reachCollege, ...safeCollege];\r\n          this.dataSource = new MatTableDataSource<GrePredictor>(\r\n            this.collegeList\r\n          );\r\n          this.totalScore = res['Score'];\r\n          this.dataSource.paginator = this.paginator;\r\n          this.dataSource.sort = this.sort;\r\n        },\r\n        (err) => {\r\n        }\r\n      );\r\n  }\r\n\r\n  applyFilter(event: Event) {\r\n    const filterValue = (event.target as HTMLInputElement).value;\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n}\r\n","<! Author- Neelesh Singh -->\r\n<div style=\"overflow: auto; height: 100%; background-color: #e7ebee;\">\r\n  <app-header></app-header>\r\n  <div class=\"grePredictor\">\r\n    <h2>GRE School Predictor</h2>\r\n    <h5 *ngIf=\"totalScore != -1\">\r\n      Based on your Mock Test score, that is <b>{{ totalScore }}</b\r\n      >, we have predicted the following universities along with their chances\r\n      of admission. The chances are divided into 3 categories dream, safe and\r\n      reach, so based on your score, following is the list of universities along\r\n      with thier chances of admit.\r\n    </h5>\r\n\r\n    <h5 *ngIf=\"totalScore == -1\">\r\n      You have not taken any mock tests yet. Please take a mock test to view\r\n      your college list.\r\n    </h5>\r\n\r\n    <mat-form-field appearance=\"outline\" *ngIf=\"totalScore != -1\">\r\n      <mat-label>Search your schools...</mat-label>\r\n      <input\r\n        matInput\r\n        (keyup)=\"applyFilter($event)\"\r\n        placeholder=\"Example: Canad\"\r\n      />\r\n      <mat-icon matPrefix>search</mat-icon>\r\n    </mat-form-field>\r\n    <div\r\n      class=\"grePredictorTable mat-elevation-z12\"\r\n      [hidden]=\"dataSource?.filteredData?.length === 0\"\r\n    >\r\n      <table mat-table matSort [dataSource]=\"dataSource\">\r\n        <ng-container matColumnDef=\"school\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>School</th>\r\n          <td mat-cell *matCellDef=\"let element\">{{ element.school }}</td>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"possibility\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Possibility</th>\r\n          <td mat-cell *matCellDef=\"let element\">{{ element.possibility }}</td>\r\n        </ng-container>\r\n        <tr\r\n          mat-header-row\r\n          *matHeaderRowDef=\"displayedColumns; sticky: true\"\r\n        ></tr>\r\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\r\n      </table>\r\n      <mat-paginator\r\n        [pageSizeOptions]=\"[5, 10, 20, 50, 100]\"\r\n        showFirstLastButtons\r\n        class=\"mat-paginator-sticky\"\r\n      ></mat-paginator>\r\n    </div>\r\n    <div\r\n      *ngIf=\"dataSource?.filteredData?.length === 0\"\r\n      fxLayoutAlign=\"center center\"\r\n    >\r\n      <img\r\n        src=\"../../assets/img/noresultsfound.PNG\"\r\n        width=\"180vw\"\r\n        height=\"180vh\"\r\n        style=\"margin-top: 8vw;\"\r\n      />\r\n    </div>\r\n  </div>\r\n</div>\r\n","// Author - Padmesh Donthu\r\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-gre',\r\n  templateUrl: './gre.component.html',\r\n  styleUrls: ['./gre.component.css'],\r\n  encapsulation: ViewEncapsulation.Emulated\r\n})\r\nexport class GreComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<!--Author - Padmesh Donthu-->\r\n<div style=\"overflow: auto; height: 100%; background-color: #e7ebee;\">\r\n  <app-header></app-header>\r\n  <div\r\n    class=\"container\"\r\n    fxLayout=\"row\"\r\n    fxLayout.xs=\"column\"\r\n    fxLayoutWrap\r\n    fxLayoutGap=\"10px\"\r\n    fxLayoutGap.xs=\"5px\"\r\n    fxLayoutAlign=\"start\"\r\n    style=\"\r\n      padding-left: 5%;\r\n      padding-right: 5%;\r\n      padding-top: 2%;\r\n      padding-bottom: 2%;\r\n    \"\r\n  >\r\n    <div class=\"item item-1\" fxFlex=\"50%\">\r\n      <mat-card\r\n        class=\"example-card\"\r\n        [routerLink]=\"['verbal']\"\r\n        routerLinkActive=\"active\"\r\n      >\r\n        <mat-card-header>\r\n          <mat-card-title>Verbal</mat-card-title>\r\n          <mat-card-subtitle>GRE</mat-card-subtitle>\r\n        </mat-card-header>\r\n        <img\r\n          mat-card-image\r\n          src=\"assets/img/gre_verbal_prep.png\"\r\n          alt=\"Photo of a Gre Verbal\"\r\n          height=\"30%\"\r\n        />\r\n        <mat-card-content>\r\n          <p>\r\n            GRE Verbal Practice is used to test your ability to solve problems\r\n            related to Verbal section of GRE. You can select the type of verbal\r\n            problems to solve and also select the number of questions to\r\n            practice.\r\n          </p>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n    <div class=\"item item-1\" fxFlex=\"50%\">\r\n      <mat-card\r\n        class=\"example-card\"\r\n        [routerLink]=\"['quant']\"\r\n        routerLinkActive=\"active\"\r\n      >\r\n        <mat-card-header>\r\n          <mat-card-title>Quantitative</mat-card-title>\r\n          <mat-card-subtitle>GRE</mat-card-subtitle>\r\n        </mat-card-header>\r\n        <img\r\n          mat-card-image\r\n          src=\"assets/img/gre_quant_prep.png\"\r\n          alt=\"Photo of a GRE Quant\"\r\n          height=\"30%\"\r\n        />\r\n        <mat-card-content>\r\n          <p>\r\n            GRE Quantitative Practice is used to test your ability to solve\r\n            problems related to Quantitative section of GRE. You can select the\r\n            type of quantitative problems to solve and also select the number of\r\n            questions to practice.\r\n          </p>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n  </div>\r\n  <div\r\n    class=\"container\"\r\n    fxLayout=\"row\"\r\n    fxLayout.xs=\"column\"\r\n    fxLayoutWrap\r\n    fxLayoutGap=\"10px\"\r\n    fxLayoutGap.xs=\"5px\"\r\n    fxLayoutAlign=\"start\"\r\n    style=\"\r\n      padding-left: 5%;\r\n      padding-right: 5%;\r\n      padding-top: 2%;\r\n      padding-bottom: 2%;\r\n    \"\r\n  >\r\n    <div class=\"item item-1\" fxFlex=\"50%\">\r\n      <mat-card\r\n        class=\"example-card\"\r\n        [routerLink]=\"['quiz']\"\r\n        routerLinkActive=\"active\"\r\n      >\r\n        <mat-card-header>\r\n          <mat-card-title>Quiz</mat-card-title>\r\n          <mat-card-subtitle>GRE</mat-card-subtitle>\r\n        </mat-card-header>\r\n        <img\r\n          mat-card-image\r\n          src=\"assets/img/gre-quiz.png\"\r\n          alt=\"Photo of a GRE Quiz\"\r\n          height=\"200px\"\r\n        />\r\n        <mat-card-content>\r\n          <p>\r\n            GRE Quiz is used to test your ability to solve problems related to\r\n            both Quantitative and Verbal section of GRE. You can select the\r\n            number of questions to practice before taking the Quiz.\r\n          </p>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n\r\n    <div class=\"item item-1\" fxFlex=\"50%\">\r\n      <mat-card\r\n        class=\"example-card\"\r\n        [routerLink]=\"['mocktest']\"\r\n        routerLinkActive=\"active\"\r\n      >\r\n        <mat-card-header>\r\n          <mat-card-title>Mock Test</mat-card-title>\r\n          <mat-card-subtitle>GRE</mat-card-subtitle>\r\n        </mat-card-header>\r\n        <img\r\n          mat-card-image\r\n          src=\"assets/img/gremock.jpg\"\r\n          alt=\"Photo of a GRE mock\"\r\n          height=\"200px\"\r\n        />\r\n        <mat-card-content>\r\n          <p>\r\n            GRE Mock Test is used to test your ability to solve problems related\r\n            to actual GRE Test. The GRE Mock Test is a timed test and the level\r\n            of difficulty ranges from medium to difficulty.\r\n          </p>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n  </div>\r\n</div>\r\n","// Author - Padmesh Donthu\r\nimport { Component, OnInit, OnDestroy, ViewEncapsulation } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { MediaObserver, MediaChange } from '@angular/flex-layout';\r\nimport { Subscription } from 'rxjs';\r\nimport { UserService } from '../services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.css'],\r\n  encapsulation: ViewEncapsulation.Emulated,\r\n})\r\nexport class HeaderComponent implements OnInit, OnDestroy {\r\n  mediaSubscribe: Subscription;\r\n  deviceXs: boolean;\r\n  isLoggedIn: any;\r\n\r\n  // Inject dependecies here\r\n  constructor(\r\n    private router: Router,\r\n    private mediaObserver: MediaObserver,\r\n    private userService: UserService\r\n  ) {}\r\n  ngOnDestroy(): void {\r\n    this.mediaSubscribe.unsubscribe();\r\n  }\r\n\r\n  // This is used to check if the user is logged in or not and also set the device size based\r\n  // on which the header changes\r\n  ngOnInit(): void {\r\n    this.isLoggedIn = this.userService.isLoggedIn();\r\n    this.mediaSubscribe = this.mediaObserver.media$.subscribe(\r\n      (result: MediaChange) => {\r\n        this.deviceXs = result.mqAlias === 'xs' ? true : false;\r\n      }\r\n    );\r\n  }\r\n  // Method to open attempt history page\r\n  openAttemptHistory() {\r\n    this.router.navigate(['/attemptHistory']);\r\n  }\r\n  // Logs out the user from the current session\r\n  logout() {\r\n    this.userService.logout();\r\n  }\r\n  // Method to open user's favourite schools\r\n  openMySchools() {\r\n    this.router.navigate(['/profile/mySchools']);\r\n  }\r\n}\r\n","<!--Author - Padmesh Donthu-->\r\n<mat-toolbar color=\"primary\" class=\"toolbar\">\r\n  <mat-toolbar-row fxLayoutAlign=\"space-between center\">\r\n    <div fxLayout=\"row\">\r\n      <button mat-button>\r\n        Gre Prep\r\n      </button>\r\n\r\n      <div *ngIf=\"!deviceXs\">\r\n        <button mat-button routerLink=\"/gre\">GRE</button>\r\n\r\n        <button mat-button routerLink=\"/masters\">Masters</button>\r\n\r\n        <button mat-button routerLink=\"/gre-predictor\">\r\n          GRE Predictor\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <div>\r\n      <button mat-button routerLink=\"/\">\r\n        Home\r\n      </button>\r\n\r\n      <button mat-button routerLink=\"/login\" *ngIf=\"!isLoggedIn\">Login</button>\r\n      <button mat-raised-button routerLink=\"/registration\" *ngIf=\"!isLoggedIn\">\r\n        Register\r\n      </button>\r\n\r\n      <button\r\n        mat-icon-button\r\n        matTooltip=\"Profile\"\r\n        (click)=\"select.open()\"\r\n        *ngIf=\"isLoggedIn\"\r\n      >\r\n        <mat-icon>account_circle</mat-icon>\r\n\r\n        <mat-select #select class=\"profile\">\r\n          <mat-option (click)=\"openAttemptHistory()\" value=\"ae\"\r\n            >Attempt History</mat-option\r\n          >\r\n          <mat-option (click)=\"openMySchools()\" value=\"ae\"\r\n            >My Schools</mat-option\r\n          >\r\n          <mat-option routerLink=\"/profile/profileSettings\" value=\"ae\"\r\n            >Profile Settings</mat-option\r\n          >\r\n          <mat-option (click)=\"logout()\" value=\"ae\">Logout</mat-option>\r\n        </mat-select>\r\n      </button>\r\n    </div>\r\n  </mat-toolbar-row>\r\n  <mat-toolbar-row *ngIf=\"deviceXs\" fxLayoutAlign=\"space-between end\">\r\n    <button mat-button routerLink=\"/gre\">GRE</button>\r\n\r\n    <button mat-button routerLink=\"/masters\">Masters</button>\r\n\r\n    <button mat-button routerLink=\"/gre-predictor\">\r\n      GRE Predictor\r\n    </button>\r\n  </mat-toolbar-row>\r\n</mat-toolbar>\r\n","// Author - Abhinav Ramesh\r\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: [\r\n    '../../../node_modules/materialize-css/dist/css/materialize.min.css',\r\n    './home.component.css',\r\n  ],\r\n  encapsulation: ViewEncapsulation.Emulated,\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  ngOnInit(): void {}\r\n}\r\n","<!--Author - Abhinav Ramesh, Padmesh Donthu-->\r\n<head>\r\n  <link\r\n    rel=\"stylesheet\"\r\n    href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\r\n  />\r\n  <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"></script>\r\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js\"></script>\r\n</head>\r\n<script type=\"text/javascript\" src=\"js/materialize.min.js\"></script>\r\n<app-header></app-header>\r\n<div class=\"parallax\"></div>\r\n<div class=\"section\" style=\"background-color: #e7ebee;\">\r\n  <div class=\"row container\">\r\n    <h2 class=\"header\">Why Choose GRE PREP?</h2>\r\n    <p class=\"grey-text text-darken-3 lighten-3\">\r\n      Today users like you mostly want the best product but at a minimum\r\n      possible cost, so generally it is quite difficult to find such product,\r\n      but this website is completely free of cost and is available for all the\r\n      users globally. Moreover, we provide enough practice materials to ace the\r\n      GRE examination. These materials resemble the questions asked in the GRE\r\n      examination very closely, as can be observed from our testimonials the\r\n      scores the students have got after using our resources. This website is\r\n      trustworthy, free of cost and provides a very simple interface for\r\n      preparation. It is a combo of everything that a student needs to perform\r\n      well in the GRE examination. It’s a great option for students as it is\r\n      offered entirely online, meaning no books, DVDs, classrooms, etc. This has\r\n      become the preferred study method for the majority of GRE studiers. There\r\n      are also no deadlines so the GRE prep course from GREPrep can be taken at\r\n      students own pace, which is a huge plus as other courses often make you\r\n      pay quite a bit extra to extend your subscription. It’s a great option for\r\n      people with full time jobs, families, or some other time demanding factor.\r\n      <br />It’s completely free of cost only requirement being creating an\r\n      account to access all the features. Again, the program is completely\r\n      accessed online, which may be a drawback for some but from all the\r\n      students I’ve helped on the GRE who have used GREPrep, none have seen this\r\n      as an obstacle to maximizing their learning.We do not provide in person\r\n      tutoring. However, GREPrep offers a plethora of free resources that can\r\n      help immensely in place of a tutor. Moreover, GREPrep has its own android\r\n      application that also offers plethora of study materials for the students\r\n      for practice. The application is avilable on google play store. So, if a\r\n      student is not able to use the website while on the go, they can easily\r\n      access all the materials through our android application. The app is also\r\n      free of cost. These are the factors that the student can consider while\r\n      opting our services and we promise stduent will never regret thier\r\n      decision of choosing us. We wish all the best to evry GRE aspirants. Happy\r\n      learning!!\r\n    </p>\r\n  </div>\r\n</div>\r\n<div class=\"parallax-container\">\r\n  <div class=\"parallax2\"></div>\r\n</div>\r\n<div class=\"section\" style=\"background-color: #e7ebee;\">\r\n  <div class=\"row container\">\r\n    <h2 class=\"header\">Tests</h2>\r\n    <p class=\"grey-text text-darken-3 lighten-3\">\r\n      GREPrep provides a variety of tests for prospective students who want to\r\n      take GRE Exam. We provide four different types of test: Quantitative,\r\n      Verbal, Quiz, and Mock Tests. The Quantitative tests provides the users an\r\n      opportunity to excel their knowlege and understanding of mathematics. The\r\n      Verbal tests are used to test the skills of the person in the vocabulary\r\n      and understanding of the English language. The Quiz section is a mix of\r\n      Quantitative and Verbal tests where the questions are from both the\r\n      sections. These tests are not timed. Use the GREPrep Mock Test to help you\r\n      prepare for the computer-delivered GRE General Test. The mock tests are\r\n      designed to help you practice your test-taking strategies, such as time\r\n      management, by taking a test under timed conditions.\r\n    </p>\r\n  </div>\r\n</div>\r\n<div class=\"parallax-container\">\r\n  <div class=\"parallax3\"></div>\r\n</div>\r\n<div class=\"section\" style=\"background-color: #e7ebee;\">\r\n  <div class=\"row container\">\r\n    <h2 class=\"header\">GRE Predictor and Attempt History</h2>\r\n    <p class=\"grey-text text-darken-3 lighten-3\">\r\n      We also have two features GRE Predictor and Attempt History. A GRE score\r\n      predictor will be introduced which works based on the student's\r\n      performance in the tests. The score every user gets in all the test\r\n      modules will be used by the GRE score predictor in generating the\r\n      predicted GRE score. University admits predictor which is based on users\r\n      predicted GRE score that comes up with chances of getting admit from a\r\n      university. These predictions are based on the highest mock test score of\r\n      the user. The predictions will help the user to focus on the schools that\r\n      give the user better chances of getting an admit. Along with the\r\n      predictor, we also have an attempt history feature, which allows the user\r\n      to view how the user has fared in the previous tests. The user can also\r\n      look at the answers that was provided during the tests using the View\r\n      Answers option. We will also mention the correct answers for each question\r\n      to the user.\r\n    </p>\r\n  </div>\r\n  <div class=\"parallax-container\">\r\n    <div class=\"parallax4\"></div>\r\n  </div>\r\n  <div class=\"section\" style=\"background-color: #e7ebee;\">\r\n    <div class=\"row container\">\r\n      <h2 class=\"header\">My Schools</h2>\r\n      <p class=\"grey-text text-darken-3 lighten-3\">\r\n        Aspirants can add schools to this page as they start their preparation\r\n        and change their selection or move schools between different tables\r\n        whenever they feel the need to. Whenever people start preparing for\r\n        their GRE exam, they have a set target in their mind. They know which\r\n        schools they want to get into. As they move further in their\r\n        preparation, they get a much clearer picture as to which schools they\r\n        can get into easily and schools for which schools they need to work\r\n        hard. Before starting their GRE preparations, aspirants are suggested to\r\n        a mock test so that they could get to know how much effort they must put\r\n        into their preparations. Based on these marks they can even shortlist\r\n        schools as Dream, Reach and Safe. Dream schools are those schools for\r\n        which users must put in a lot of effort into their preparations. Reach\r\n        schools are the one for which users must put in adequate amount of\r\n        efforts. Safe schools are the one for which users are quite sure they\r\n        would get into with little efforts. The schools in these divisions are\r\n        bound to change as the preparation goes on. This will help them keep\r\n        their eye on the target.\r\n      </p>\r\n    </div>\r\n  </div>\r\n</div>\r\n<app-footer></app-footer>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\nimport { startWith, map } from 'rxjs/operators';\r\nimport { SchoolService } from '../services/school.service';\r\nimport { School } from '../models/school.model';\r\nimport { UserService } from '../services/user.service';\r\nimport { SchoolType } from '../models/school-type.model';\r\nimport { UserSchools } from '../models/user-schools.model';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\nexport interface Options {\r\n  name: string;\r\n  id: number;\r\n}\r\ndeclare var M:any;\r\n@Component({\r\n  selector: 'app-list-of-schools',\r\n  templateUrl: './list-of-schools.component.html',\r\n  styleUrls: [\r\n    '../../../node_modules/materialize-css/dist/css/materialize.min.css',\r\n    './list-of-schools.component.css',\r\n  ],\r\n  providers: [SchoolService],\r\n})\r\nexport class ListOfSchoolsComponent implements OnInit {\r\n  schoolList: School[] = new Array();\r\n  filteredSchools: Observable<School[]>;\r\n\r\n  title = 'demo-deploy';\r\n  tempUserSchools: UserSchools = null;\r\n  isLoading: boolean = true;\r\n\r\n  form = new FormGroup({\r\n    myControl: new FormControl(),\r\n  });\r\n\r\n  constructor(\r\n    private router: Router,\r\n    public schoolService: SchoolService,\r\n    public userService: UserService,\r\n    private _snackBar: MatSnackBar\r\n  ) {}\r\n  \r\n  schoolChoosen: number = 0;\r\n\r\n  ngOnInit(): void {\r\n    this.refreshSchoolList();\r\n  }\r\n\r\n  reset() {\r\n    this.schoolChoosen = 0;\r\n    this.form.controls['myControl'].setValue('');\r\n  }\r\n\r\n  getCard(school: number) {\r\n    if (school) {\r\n      this.schoolChoosen = school;\r\n    } else {\r\n      this.schoolChoosen = 0;\r\n    }\r\n  }\r\n\r\n  displayFn(school: School): string {\r\n    return school && school.name ? school.name : '';\r\n  }\r\n\r\n  private _filter(name: string): School[] {\r\n    if (name) {\r\n      const filterValue = name.toLowerCase();\r\n      return this.schoolList.filter(\r\n        (school) => school.name.toLowerCase().indexOf(filterValue) === 0\r\n      );\r\n    }\r\n  }\r\n\r\n  //To fetch and display the school rankings\r\n  refreshSchoolList() {\r\n    this.schoolService.getSchoolList().subscribe((res) => {\r\n      this.schoolService.schools = res as School[];\r\n      this.schoolList = this.schoolService.schools;\r\n      this.filteringSchools();\r\n      this.getUserSchools();\r\n      this.isLoading = false;\r\n    });\r\n  }\r\n\r\n  filteringSchools() {\r\n    this.filteredSchools = this.form.controls['myControl'].valueChanges.pipe(\r\n      startWith<string | School>(''),\r\n      map((value) => (typeof value === 'string' ? value : value.name)),\r\n      map((name) => (name ? this._filter(name) : this.schoolList.slice()))\r\n    );\r\n  }\r\n\r\n  addToFavouriteSchools(school: School, schooType:Number) {\r\n    var emailId = this.userService.getUserEmail();\r\n    var userSchools: UserSchools = null;\r\n    this.schoolService.getFavouriteSchool(emailId).subscribe((res) => {\r\n      userSchools = res as UserSchools;\r\n      if (userSchools == null) {\r\n        userSchools = new UserSchools();\r\n        userSchools.userId = emailId;\r\n        var favouriteSchools: SchoolType[] = [];\r\n        var favouriteSchool = new SchoolType();\r\n        favouriteSchool.schoolId = school.id;\r\n        favouriteSchool.schoolName = school.name;\r\n        favouriteSchool.schoolType = schooType;\r\n        favouriteSchools.push(favouriteSchool);\r\n        userSchools.favouriteSchools = favouriteSchools;\r\n        this.schoolService.postFavouriteSchool(userSchools).subscribe((res) => {\r\n          this._snackBar.open(\"School Added Successfully\", \"OK\", {\r\n            duration: 2000,\r\n          });\r\n        });\r\n      }\r\n      else{\r\n        var favouriteSchool = new SchoolType();\r\n        var favouriteSchools: SchoolType[] = [];\r\n        favouriteSchools = userSchools.favouriteSchools;\r\n        favouriteSchool.schoolId = school.id;\r\n        favouriteSchool.schoolName = school.name;\r\n        favouriteSchool.schoolType = schooType;\r\n        favouriteSchools.push(favouriteSchool);\r\n        userSchools.favouriteSchools = favouriteSchools;\r\n        this.schoolService.postFavouriteSchool(userSchools).subscribe((res) => {\r\n          this._snackBar.open(\"School Added Successfully\", \"OK\", {\r\n            duration: 2000,\r\n          });\r\n        });\r\n      }\r\n      this.refreshSchoolList();\r\n    });\r\n  }\r\n\r\n  getUserSchools() {\r\n    var emailId = this.userService.getUserEmail();\r\n    this.schoolService.getFavouriteSchool(emailId).subscribe((res) => {\r\n    this.tempUserSchools = res as UserSchools;\r\n    }); \r\n  }\r\n\r\n  verifySchoolStatus(school:School):boolean{\r\n    if(this.tempUserSchools != null){\r\n    return this.tempUserSchools.favouriteSchools.some(s => s.schoolId == school.id);\r\n    }\r\n    else{\r\n      return false;\r\n    }\r\n    \r\n  }\r\n}\r\n","<head>\r\n  <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"></script>\r\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js\"></script>\r\n</head>\r\n<app-header></app-header>\r\n<div class=\"loading-indicator\" *ngIf=\"isLoading\">\r\n  <mat-spinner></mat-spinner>\r\n</div>\r\n<div class=\"container\" *ngIf=\"!isLoading\">\r\n  <div class=\"auto-complete\" style=\"text-align: center;\">\r\n    <form class=\"example-form\" [formGroup]=\"form\">\r\n      <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n        <mat-label>Search Universities</mat-label>\r\n        <input\r\n          type=\"text\"\r\n          aria-label=\"School\"\r\n          matInput\r\n          formControlName=\"myControl\"\r\n          [matAutocomplete]=\"auto\"\r\n        />\r\n        <mat-autocomplete\r\n          autoActiveFirstOption\r\n          #auto=\"matAutocomplete\"\r\n          (optionSelected)=\"getCard($event.option.value.id)\"\r\n          [displayWith]=\"displayFn\"\r\n        >\r\n          <mat-option\r\n            *ngFor=\"let school of filteredSchools | async\"\r\n            [value]=\"school\"\r\n          >\r\n            {{ school.name }}\r\n          </mat-option>\r\n        </mat-autocomplete>\r\n      </mat-form-field>\r\n      <button\r\n        mat-fab\r\n        title=\"Reset the field\"\r\n        color=\"primary\"\r\n        (click)=\"reset()\"\r\n        aria-label=\"Example icon button with a home icon\"\r\n      >\r\n        <mat-icon>refresh</mat-icon>\r\n      </button>\r\n    </form>\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n    <div *ngFor=\"let school of schoolList\">\r\n      <div\r\n        class=\"col s12 m12 l6\"\r\n        *ngIf=\"schoolChoosen == 0 || schoolChoosen == school.id\"\r\n      >\r\n        <div class=\"card\">\r\n          <div class=\"card-image waves-effect waves-block waves-light\">\r\n            <img\r\n              class=\"activator\"\r\n              src=\"{{ school.imageURL }}\"\r\n              style=\"width: 100%; height: 40vh;\"\r\n            />\r\n          </div>\r\n          <div class=\"card-content\" *ngIf=\"!verifySchoolStatus(school)\">\r\n            <span\r\n              class=\"card-title grey-text text-darken-4\"\r\n              style=\"font-size: medium;\"\r\n              >{{ school.name }}\r\n              <i\r\n                class=\"material-icons right\"\r\n                [matMenuTriggerFor]=\"menu\"\r\n                style=\"cursor: pointer;\"\r\n                >favorite_border</i\r\n              ></span\r\n            >\r\n            <mat-menu #menu=\"matMenu\">\r\n              <button mat-menu-item (click)=\"addToFavouriteSchools(school, 1)\">\r\n                Add to Dream Schools\r\n              </button>\r\n              <button mat-menu-item (click)=\"addToFavouriteSchools(school, 2)\">\r\n                Add to Reach Schools\r\n              </button>\r\n              <button mat-menu-item (click)=\"addToFavouriteSchools(school, 3)\">\r\n                Add to Safe Schools\r\n              </button>\r\n            </mat-menu>\r\n          </div>\r\n          <div class=\"card-content\" *ngIf=\"verifySchoolStatus(school)\">\r\n            <span\r\n              class=\"card-title grey-text text-darken-4\"\r\n              style=\"font-size: medium;\"\r\n              >{{ school.name }}\r\n              <i class=\"material-icons right\" style=\"color: #e31b23;\"\r\n                >favorite</i\r\n              ></span\r\n            >\r\n          </div>\r\n          <div class=\"card-reveal\">\r\n            <span class=\"card-title grey-text text-darken-4\"\r\n              >{{ school.name }}<i class=\"material-icons right\">close</i></span\r\n            >\r\n            <br />\r\n            <p>{{ school.description }}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-login-and-signup-dialog',\r\n  templateUrl: './login-and-signup-dialog.component.html',\r\n  styleUrls: ['./login-and-signup-dialog.component.css'],\r\n})\r\nexport class LoginAndSignupDialogComponent {\r\n  constructor(\r\n    public dialogRef: MatDialogRef<LoginAndSignupDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {}\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","<h1 mat-dialog-title>Welcome</h1>\r\n<div mat-dialog-content style=\"overflow-y: hidden;\">\r\n  <mat-list>\r\n    <mat-list-item *ngIf=\"data.firstName != null\">First Name: {{ data.firstName }}</mat-list-item>\r\n    <mat-list-item *ngIf=\"data.lastName != null\">Last Name: {{ data.lastName }}</mat-list-item>\r\n    <mat-list-item>Email Address: {{ data.email }}</mat-list-item>\r\n    <mat-list-item *ngIf=\"data.phoneNumber != null\">Phone Number: {{ data.phoneNumber }}</mat-list-item>\r\n    <mat-list-item>{{ data.password }}</mat-list-item>\r\n  </mat-list>\r\n  <div mat-dialog-actions>\r\n    <button mat-button (click)=\"onNoClick()\">Close</button>\r\n    <button mat-button [mat-dialog-close] cdkFocusInitial>\r\n      Ok\r\n    </button>\r\n  </div>\r\n</div>","//  Author: Pratibha B(B00847415)\r\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Location } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n  MatDialog,\r\n  MatDialogRef,\r\n  MAT_DIALOG_DATA,\r\n} from '@angular/material/dialog';\r\nimport { LoginAndSignupDialogComponent } from '../login-and-signup-dialog/login-and-signup-dialog.component';\r\nimport { UserService } from '../services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css'],\r\n  encapsulation: ViewEncapsulation.Emulated,\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  title = 'Login';\r\n\r\n  loginForm: FormGroup;\r\n\r\n  hide = true;\r\n  serverErrorMessages: string;\r\n  constructor(\r\n    private location: Location,\r\n    private router: Router,\r\n    private dialog: MatDialog,\r\n    private userService: UserService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loginForm = new FormGroup({\r\n      email: new FormControl('', [Validators.required, Validators.email]),\r\n      password: new FormControl('', [Validators.required]),\r\n    });\r\n    if (this.userService.isLoggedIn()) this.router.navigate(['gre']);\r\n  }\r\n\r\n  public hasError = (controlName: string, errorName: string) => {\r\n    return this.loginForm.controls[controlName].hasError(errorName);\r\n  };\r\n\r\n  login() {\r\n    this.userService.login(this.loginForm.value).subscribe(\r\n      (res) => {\r\n        this.userService.setToken(res['token']);\r\n        this.userService.setUserEmail(res['email']);\r\n        this.router.navigate(['/']);\r\n      },\r\n      (err) => {\r\n        this.serverErrorMessages = err.error.message;\r\n      }\r\n    );\r\n  }\r\n\r\n  onCancel() {\r\n    this.location.back;\r\n  }\r\n  forgotPassword(){\r\n    this.router.navigate(['/forgotPassward']);\r\n  }\r\n}\r\n","<div class=\"loginLayout\">\r\n  <mat-card class=\"loginCard\" [class.mat-elevation-z10]=\"true\">\r\n    <mat-card-title>Returning User?</mat-card-title>\r\n    <mat-card-subtitle>Continue your learning!</mat-card-subtitle>\r\n    <mat-card-content>\r\n      <div class=\"alert\" *ngIf=\"serverErrorMessages\">\r\n        {{ serverErrorMessages }}\r\n      </div>\r\n      <div class=\"container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"0.5\" fxLayoutAlign=\"start\">\r\n        <div fxFlex=\"35%\" style=\"padding: 10px;\">\r\n          <form [formGroup]=\"loginForm\" (ngSubmit)=\"login()\">\r\n            <div class=\"container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"0.5\"\r\n              fxLayoutAlign=\"start\">\r\n              <mat-form-field appearance=\"outline\">\r\n                <mat-label>Email address</mat-label>\r\n\r\n                <input matInput type=\"email\" required placeholder=\"Enter your Email address\" formControlName=\"email\"\r\n                  id=\"email\" />\r\n                <mat-icon matPrefix>email</mat-icon>\r\n                <mat-hint align=\"end\">Example: xyz@gmail.com</mat-hint>\r\n                <mat-error *ngIf=\"hasError('email', 'required')\">Email address is required</mat-error>\r\n                <mat-error *ngIf=\"hasError('email', 'email')\">Emaild address is not valid</mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n            <br />\r\n            <div class=\"container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"0.5\"\r\n              fxLayoutAlign=\"start\">\r\n              <mat-form-field appearance=\"outline\">\r\n                <mat-label>Password</mat-label>\r\n                <input matInput [type]=\"hide ? 'password' : 'text'\" required placeholder=\"Enter your password\"\r\n                  formControlName=\"password\" id=\"password\" />\r\n                <mat-icon matPrefix>lock</mat-icon>\r\n                <mat-icon matSuffix (click)=\"hide = !hide\" style=\"cursor: pointer;\">\r\n                  {{ hide ? \"visibility_off\" : \"visibility\" }}</mat-icon>\r\n                <mat-error *ngIf=\"hasError('password', 'required')\">Password is required</mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n            <br />\r\n            <div class=\"container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"0.5\"\r\n              fxLayoutAlign=\"start\">\r\n              <button type=\"submit\" mat-raised-button color=\"primary\" [disabled]=\"!loginForm.valid\">\r\n                Resume Learning!\r\n              </button>\r\n            </div>\r\n            <br />\r\n            <div class=\"container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"0.5\"\r\n              fxLayoutAlign=\"start\">\r\n              <button mat-raised-button color=\"warn\" (click)=\"forgotPassword()\">\r\n                Forgot Password?\r\n              </button>\r\n            </div>\r\n          </form>\r\n          <br />\r\n          <div class=\"container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"0.5\"\r\n            fxLayoutAlign=\"start\">\r\n            <div>\r\n              New User? Create account here\r\n              <a href=\"/registration\">\r\n                <button mat-stroked-button color=\"primary\" class=\"loginBtn\">\r\n                  Start Learning!\r\n                </button>\r\n              </a>\r\n              <br />\r\n              <a [routerLink]=\"['']\">Go to Home</a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div fxFlex=\"65%\">\r\n          <br />\r\n          <div class=\"container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"0.5\" fxLayoutAlign=\"end\">\r\n            <div>\r\n              <img src=\"../../assets/img/english2.jpg\" width=\"80%\" height=\"75%\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>    \r\n    </mat-card-content>\r\n  </mat-card>\r\n</div>","// Author - Padmesh Donthu\r\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-masters-home',\r\n  templateUrl: './masters-home.component.html',\r\n  styleUrls: ['./masters-home.component.css'],\r\n  encapsulation: ViewEncapsulation.Emulated\r\n})\r\nexport class MastersHomeComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<!--Author - Padmesh Donthu-->\r\n<div style=\"background-color: #e7ebee; min-height: 100%;\">\r\n  <app-header></app-header>\r\n  <div\r\n    class=\"container\"\r\n    fxLayout=\"row\"\r\n    fxLayout.xs=\"column\"\r\n    fxLayoutWrap\r\n    fxLayoutGap=\"10px\"\r\n    fxLayoutGap.xs=\"5px\"\r\n    fxLayoutAlign=\"start\"\r\n    style=\"\r\n      padding-left: 5%;\r\n      padding-right: 5%;\r\n      padding-top: 2%;\r\n      padding-bottom: 2%;\r\n      margin-top: 5%;\r\n    \"\r\n  >\r\n    <div class=\"item item-1\" fxFlex=\"50%\">\r\n      <mat-card\r\n        class=\"example-card\"\r\n        [routerLink]=\"['whyMasters']\"\r\n        routerLinkActive=\"active\"\r\n      >\r\n        <mat-card-header>\r\n          <mat-card-title>Why Masters?</mat-card-title>\r\n          <mat-card-subtitle>Masters</mat-card-subtitle>\r\n        </mat-card-header>\r\n        <mat-card-content>\r\n          <br />\r\n          <p>\r\n            Click on this link to know more about the prospects of masters and\r\n            why masters is in demand among the students across the world! We\r\n            have compiled a list of possible reasons on the demand for masters.\r\n          </p>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n    <div class=\"item item-1\" fxFlex=\"50%\">\r\n      <mat-card\r\n        class=\"example-card\"\r\n        [routerLink]=\"['stories']\"\r\n        routerLinkActive=\"active\"\r\n      >\r\n        <mat-card-header>\r\n          <mat-card-title>Success Stories</mat-card-title>\r\n          <mat-card-subtitle>Masters</mat-card-subtitle>\r\n        </mat-card-header>\r\n        <mat-card-content>\r\n          <br />\r\n          <p>\r\n            Click on this link to know more about the users who have enrolled to\r\n            GREPrep. Learn about how GREPrep has helped them to achieve what our\r\n            users have dreamt of. These are their success stories.\r\n          </p>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n  </div>\r\n  <div\r\n    class=\"container\"\r\n    fxLayout=\"row\"\r\n    fxLayout.xs=\"column\"\r\n    fxLayoutWrap\r\n    fxLayoutGap=\"10px\"\r\n    fxLayoutGap.xs=\"5px\"\r\n    fxLayoutAlign=\"start\"\r\n    style=\"\r\n      padding-left: 5%;\r\n      padding-right: 5%;\r\n      padding-top: 2%;\r\n      padding-bottom: 2%;\r\n    \"\r\n  >\r\n    <div class=\"item item-1\" fxFlex=\"50%\">\r\n      <mat-card\r\n        class=\"example-card\"\r\n        [routerLink]=\"['listOfSchools']\"\r\n        routerLinkActive=\"active\"\r\n      >\r\n        <mat-card-header>\r\n          <mat-card-title>List of Schools</mat-card-title>\r\n          <mat-card-subtitle>Masters</mat-card-subtitle>\r\n        </mat-card-header>\r\n        <mat-card-content>\r\n          <br />\r\n          <p>\r\n            This feature provides the user a huge list of schools to select\r\n            from. The schools are sorted based on their overall global ranking.\r\n            User are provided with a list of schools, a small description about\r\n            them and a search bar to narrow down their choices. Moreover, if\r\n            users are interested in a school, they can add schools as dream,\r\n            reach or safe option.\r\n          </p>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n\r\n    <div class=\"item item-1\" fxFlex=\"50%\">\r\n      <mat-card\r\n        class=\"example-card\"\r\n        [routerLink]=\"['ranking']\"\r\n        routerLinkActive=\"active\"\r\n      >\r\n        <mat-card-header>\r\n          <mat-card-title>School Rankings 2020</mat-card-title>\r\n          <mat-card-subtitle>Masters</mat-card-subtitle>\r\n        </mat-card-header>\r\n        <mat-card-content>\r\n          <br />\r\n          <p>\r\n            This feature provides the user with a list of their favourite\r\n            schools. Users can add schools as dream, reach and safe as they\r\n            start their preparation and remove school from one table add add it\r\n            to a different table as they move ahead with their preperations.\r\n            Once users remove a school from this page, they add it into a\r\n            different category from list of schools page.\r\n          </p>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n  </div>\r\n</div>\r\n","// Author - Padmesh Donthu\r\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-mock-test',\r\n  templateUrl: './mock-test.component.html',\r\n  styleUrls: [\r\n    '../../../node_modules/materialize-css/dist/css/materialize.min.css',\r\n    './mock-test.component.css',\r\n  ],\r\n  encapsulation: ViewEncapsulation.Emulated,\r\n})\r\nexport class MockTestComponent implements OnInit {\r\n  constructor(private route: ActivatedRoute, private router: Router) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  // Method to navigate the user to take mock test page\r\n  next() {\r\n    this.router.navigate(['takeMockTest'], { relativeTo: this.route });\r\n  }\r\n}\r\n","<!--Author - Padmesh Donthu-->\r\n<div style=\"background-color: #e7ebee; min-height: 100%;\">\r\n  <app-header></app-header>\r\n  <div class=\"container\" style=\"padding-top: 20px; padding-bottom: 20px;\">\r\n    <h2 class=\"center-align\">GRE Mock Test</h2>\r\n    <div class=\"row\">\r\n      <div class=\"center-align\">\r\n        Use the GREPrep Mock Test to help you prepare for the computer-delivered\r\n        GRE General Test. The mock tests are designed to help you:\r\n        <ul class=\"collection\">\r\n          <li class=\"collection-item\">\r\n            Understand what's being tested Gain familiarity with the various\r\n            question types\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            Practice your test-taking strategies, such as time management, by\r\n            taking a test under timed conditions\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            Use the concepts you have prepared in quantitative and verbal\r\n            question types\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n    <br />\r\n    <div class=\"row\">\r\n      <div class=\"center-align\">\r\n        <h5>Instructions</h5>\r\n        <ul class=\"collection\">\r\n          <li class=\"collection-item\">\r\n            The Mock Test will be held for 2 hours i.e. 120 mins which will have\r\n            50 questions.\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            The questions consist of Verbal and Quantitative types.\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            The questions can either be multiple choice or single choice types\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            Once you submit your test, you can get your mock test score\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            You can use buttons like First, Previous, Next, and Last to move to\r\n            questions\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            The Mock Test does not include the Analytical Writing\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            Click on Start Your Mock Test button below to start your Mock Test.\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            Once you click on the button, the test starts immediately and the\r\n            clock starts automatically\r\n          </li>\r\n          <li class=\"collection-item\">All the best for your Mock Test!!</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n    <br />\r\n    <div class=\"row\">\r\n      <div class=\"center-align\">\r\n        <button\r\n          class=\"btn waves-effect waves-light indigo darken-3\"\r\n          (click)=\"next()\"\r\n        >\r\n          Start your Mock Test\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","// Stores all the possible answers for the question given by a user\n// Author - Padmesh Donthu\nexport class Answers {\n  questionId: number;\n  questionTitle: string;\n  answers: number[];\n  actualAnswers: string[];\n  options: string[];\n}\n","// Author - Padmesh Donthu\n// Stores the user attempts \nexport class Attempt {\n  test: string;\n  score: number;\n  dateTaken: Date;\n  testId: string;\n}\n","export class SchoolType {\r\n    schoolId : Number;\r\n    schoolName : String;\r\n    schoolType : Number;\r\n}\r\n","import { Answers } from './answers';\n\n// Author - Padmesh Donthu\n// This class stores the list of questions and answers attempted by the user\nexport class UserAnswers {\n  userId: String;\n  questionAnswers: Answers[];\n  testType: String;\n}\n","import { SchoolType } from './school-type.model';\r\n\r\nexport class UserSchools {\r\n    userId: String;\r\n    favouriteSchools: SchoolType[];\r\n}\r\n","import { Component, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport {MatPaginator} from '@angular/material/paginator';\r\nimport {MatSort} from '@angular/material/sort';\r\nimport {MatTableDataSource} from '@angular/material/table';\r\nimport { SchoolType } from '../models/school-type.model';\r\nimport { UserSchools } from '../models/user-schools.model';\r\nimport { SchoolService } from '../services/school.service';\r\nimport { UserService } from '../services/user.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\ndeclare var M:any;\r\n@Component({\r\n  selector: 'app-my-schools',\r\n  templateUrl: './my-schools.component.html',\r\n  styleUrls: ['./my-schools.component.css'],\r\n  encapsulation: ViewEncapsulation.Emulated,\r\n  providers: [SchoolService]\r\n})\r\nexport class MySchoolsComponent implements OnInit{\r\n  displayedColumns: string[] = ['id', 'name', 'actions'];\r\n  dream_dataSource: MatTableDataSource<SchoolType>;\r\n  reach_dataSource: MatTableDataSource<SchoolType>;\r\n  safe_dataSource: MatTableDataSource<SchoolType>;\r\n\r\n  tempUserSchools:UserSchools = null;\r\n  dreamSchools: SchoolType[] = new Array();\r\n  reachSchools: SchoolType[] = new Array();\r\n  safeSchools: SchoolType[] = new Array();\r\n  \r\n  constructor(public schoolService: SchoolService,\r\n    public userService: UserService, \r\n    private _snackBar: MatSnackBar\r\n    ){}\r\n  \r\n  @ViewChild('paginatorDream', {static: true}) paginatorDream: MatPaginator;\r\n  @ViewChild('paginatorReach', {static: true}) paginatorReach: MatPaginator;\r\n  @ViewChild('paginatorSafe', {static: true}) paginatorSafe: MatPaginator;\r\n\r\n  ngOnInit() {\r\n    this.getUserSchools();\r\n  }\r\n\r\n  getUserSchools() {\r\n    var emailId = this.userService.getUserEmail();\r\n    this.schoolService.getFavouriteSchool(emailId).subscribe((res) => {\r\n    this.tempUserSchools = res as UserSchools;\r\n    if(this.tempUserSchools != null){\r\n      var favouriteSchools: SchoolType[] = new Array();\r\n      this.dreamSchools = [];\r\n      this.reachSchools = [];\r\n      this.safeSchools = [];\r\n      favouriteSchools = this.tempUserSchools.favouriteSchools;\r\n      for(var favouriteSchool of favouriteSchools){\r\n        if(favouriteSchool.schoolType == 1){\r\n          this.dreamSchools.push(favouriteSchool);\r\n        }\r\n        if(favouriteSchool.schoolType == 2){\r\n          this.reachSchools.push(favouriteSchool);\r\n        }\r\n        if(favouriteSchool.schoolType == 3){\r\n          this.safeSchools.push(favouriteSchool);\r\n        }\r\n      }\r\n      this.dream_dataSource = new MatTableDataSource(this.dreamSchools);\r\n      this.dream_dataSource.paginator = this.paginatorDream;\r\n      this.reach_dataSource = new MatTableDataSource(this.reachSchools);\r\n      this.reach_dataSource.paginator = this.paginatorReach;\r\n      this.safe_dataSource = new MatTableDataSource(this.safeSchools);\r\n      this.safe_dataSource.paginator = this.paginatorSafe;\r\n    }\r\n    }); \r\n  }\r\n\r\n  deleteSchool(schoolId: Number){\r\n    var emailId = this.userService.getUserEmail();\r\n    this.schoolService.removeFavouriteSchool(emailId, schoolId).subscribe((res) => {\r\n      this._snackBar.open(\"School Removed Successfully\", \"OK\", {\r\n        duration: 2000,\r\n      });\r\n      this.getUserSchools();\r\n    });\r\n  }\r\n}","<div style=\"background-color: #e7ebee; min-height: 100%;\">\r\n  <app-header></app-header>\r\n  <h1 style=\"padding-top: 2%; text-align: center; font-size: xx-large;\">\r\n    MY SCHOOLS\r\n  </h1>\r\n  <div style=\"padding-bottom: 2%;\">\r\n    <div *ngIf=\"tempUserSchools\" fxLayout=\"column\" fxLayoutGap=\"0%\">\r\n      <div\r\n        *ngIf=\"dreamSchools.length > 0\"\r\n        fxLayout=\"column\"\r\n        fxLayoutAlign=\"center\"\r\n        class=\"mat-elevation-z8\"\r\n        style=\"background-color: white;\"\r\n      >\r\n        <div\r\n          *ngIf=\"dreamSchools.length > 0\"\r\n          fxFlex=\"10%\"\r\n          style=\"text-align: center; font-size: larger; padding-top: 2%;\"\r\n        >\r\n          Dream Schools\r\n        </div>\r\n        <div fxFlex=\"80%\" style=\"margin: 2%;\">\r\n          <mat-table\r\n            *ngIf=\"dreamSchools.length > 0\"\r\n            [dataSource]=\"dream_dataSource\"\r\n            class=\"mat-table\"\r\n            matSort\r\n          >\r\n            <!-- Position Column -->\r\n            <ng-container matColumnDef=\"id\">\r\n              <mat-header-cell *matHeaderCellDef> ID </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element; let i = index\">\r\n                {{ i + 1 + paginatorDream.pageIndex * paginatorDream.pageSize }}\r\n              </mat-cell>\r\n            </ng-container>\r\n\r\n            <!-- Name Column -->\r\n            <ng-container matColumnDef=\"name\">\r\n              <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\">\r\n                {{ element.schoolName }}\r\n              </mat-cell>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"actions\">\r\n              <mat-header-cell *matHeaderCellDef> Remove</mat-header-cell>\r\n              <mat-cell *matCellDef=\"let row\">\r\n                <a\r\n                  color=\"primary\"\r\n                  style=\"cursor: pointer;\"\r\n                  (click)=\"deleteSchool(row.schoolId)\"\r\n                >\r\n                  <i class=\"fa fa-trash\"></i>\r\n                </a>\r\n              </mat-cell>\r\n            </ng-container>\r\n\r\n            <mat-header-row\r\n              *matHeaderRowDef=\"displayedColumns\"\r\n            ></mat-header-row>\r\n            <mat-row *matRowDef=\"let row; columns: displayedColumns\"></mat-row>\r\n          </mat-table>\r\n        </div>\r\n        <div fxFlex=\"10%\" style=\"margin-left: auto; margin-right: auto;\">\r\n          <mat-paginator\r\n            #paginatorDream\r\n            class=\"mat-paginator-sticky\"\r\n            [length]=\"dream_dataSource?.data.length\"\r\n            [pageIndex]=\"0\"\r\n            [pageSize]=\"5\"\r\n            [pageSizeOptions]=\"[2, 3, 4, 5]\"\r\n          ></mat-paginator>\r\n        </div>\r\n      </div>\r\n      <div\r\n        *ngIf=\"reachSchools.length > 0\"\r\n        fxFlex=\"30%\"\r\n        fxLayout=\"column\"\r\n        fxLayoutAlign=\"center\"\r\n        class=\"mat-elevation-z8\"\r\n        style=\"background-color: white;\"\r\n      >\r\n        <div\r\n          *ngIf=\"reachSchools.length > 0\"\r\n          fxFlex=\"10%\"\r\n          style=\"text-align: center; font-size: larger; padding-top: 2%;\"\r\n        >\r\n          Reach Schools\r\n        </div>\r\n        <div fxFlex=\"80%\" style=\"margin: 2%;\">\r\n          <mat-table\r\n            *ngIf=\"reachSchools.length > 0\"\r\n            [dataSource]=\"reach_dataSource\"\r\n            class=\"mat-table\"\r\n            matSort\r\n          >\r\n            <!-- Position Column -->\r\n            <ng-container matColumnDef=\"id\">\r\n              <mat-header-cell *matHeaderCellDef> ID </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element; let i = index\">\r\n                {{ i + 1 + paginatorReach.pageIndex * paginatorReach.pageSize }}\r\n              </mat-cell>\r\n            </ng-container>\r\n\r\n            <!-- Name Column -->\r\n            <ng-container matColumnDef=\"name\">\r\n              <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\">\r\n                {{ element.schoolName }}\r\n              </mat-cell>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"actions\">\r\n              <mat-header-cell *matHeaderCellDef> Remove</mat-header-cell>\r\n              <mat-cell *matCellDef=\"let row\">\r\n                <a\r\n                  color=\"primary\"\r\n                  style=\"cursor: pointer;\"\r\n                  (click)=\"deleteSchool(row.schoolId)\"\r\n                >\r\n                  <i class=\"fa fa-trash\"></i>\r\n                </a>\r\n              </mat-cell>\r\n            </ng-container>\r\n\r\n            <mat-header-row\r\n              *matHeaderRowDef=\"displayedColumns\"\r\n            ></mat-header-row>\r\n            <mat-row *matRowDef=\"let row; columns: displayedColumns\"></mat-row>\r\n          </mat-table>\r\n        </div>\r\n        <div fxFlex=\"10%\" style=\"margin-left: auto; margin-right: auto;\">\r\n          <mat-paginator\r\n            #paginatorReach\r\n            [length]=\"reach_dataSource?.data.length\"\r\n            [pageIndex]=\"0\"\r\n            [pageSize]=\"5\"\r\n            [pageSizeOptions]=\"[2, 3, 4, 5]\"\r\n          ></mat-paginator>\r\n        </div>\r\n      </div>\r\n      <div\r\n        *ngIf=\"safeSchools.length > 0\"\r\n        fxFlex=\"30%\"\r\n        fxLayout=\"column\"\r\n        fxLayoutAlign=\"center\"\r\n        class=\"mat-elevation-z8\"\r\n        style=\"background-color: white;\"\r\n      >\r\n        <div\r\n          *ngIf=\"safeSchools.length > 0\"\r\n          fxFlex=\"10%\"\r\n          style=\"text-align: center; font-size: larger; padding-top: 2%;\"\r\n        >\r\n          Safe Schools\r\n        </div>\r\n        <div fxFlex=\"80%\" style=\"margin: 2%;\">\r\n          <mat-table\r\n            *ngIf=\"safeSchools.length > 0\"\r\n            [dataSource]=\"safe_dataSource\"\r\n            class=\"mat-table\"\r\n            matSort\r\n          >\r\n            <!-- Position Column -->\r\n            <ng-container matColumnDef=\"id\">\r\n              <mat-header-cell *matHeaderCellDef> ID </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element; let i = index\"\r\n                >{{ i + 1 + paginatorSafe.pageIndex * paginatorSafe.pageSize }}\r\n              </mat-cell>\r\n            </ng-container>\r\n\r\n            <!-- Name Column -->\r\n            <ng-container matColumnDef=\"name\">\r\n              <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\">\r\n                {{ element.schoolName }}\r\n              </mat-cell>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"actions\">\r\n              <mat-header-cell *matHeaderCellDef> Remove</mat-header-cell>\r\n              <mat-cell *matCellDef=\"let row\">\r\n                <a\r\n                  color=\"primary\"\r\n                  style=\"cursor: pointer;\"\r\n                  (click)=\"deleteSchool(row.schoolId)\"\r\n                >\r\n                  <i class=\"fa fa-trash\"></i>\r\n                </a>\r\n              </mat-cell>\r\n            </ng-container>\r\n\r\n            <mat-header-row\r\n              *matHeaderRowDef=\"displayedColumns\"\r\n            ></mat-header-row>\r\n            <mat-row *matRowDef=\"let row; columns: displayedColumns\"></mat-row>\r\n          </mat-table>\r\n        </div>\r\n        <div fxFlex=\"10%\" style=\"margin-left: auto; margin-right: auto;\">\r\n          <mat-paginator\r\n            #paginatorSafe\r\n            [length]=\"safe_dataSource?.data.length\"\r\n            [pageIndex]=\"0\"\r\n            [pageSize]=\"5\"\r\n            [pageSizeOptions]=\"[2, 3, 4, 5]\"\r\n          ></mat-paginator>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div *ngIf=\"!tempUserSchools\">\r\n      <h2 style=\"text-align: center;\">\r\n        You havent added any school into Favourites.\r\n      </h2>\r\n    </div>\r\n  </div>\r\n</div>\r\n","//  Author: Pratibha B(B00847415)\r\nimport { Component, OnInit, ViewChild } from '@angular/core';\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  Validators,\r\n  FormControl,\r\n  FormGroupDirective,\r\n  NgForm,\r\n} from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { MatAccordion } from '@angular/material/expansion';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\nimport { UserService } from '../services/user.service';\r\nimport { User } from '../models/user.model';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\r\n  isErrorState(\r\n    control: FormControl | null,\r\n    form: FormGroupDirective | NgForm | null\r\n  ): boolean {\r\n    const invalidCtrl = !!(control && control.invalid && control.parent.dirty);\r\n    const invalidParent = !!(\r\n      control &&\r\n      control.parent &&\r\n      control.parent.invalid &&\r\n      control.parent.dirty\r\n    );\r\n\r\n    return invalidCtrl || invalidParent;\r\n  }\r\n}\r\n\r\ndeclare var M: any;\r\n\r\n@Component({\r\n  selector: 'app-profile-settings',\r\n  templateUrl: './profile-settings.component.html',\r\n  styleUrls: ['./profile-settings.component.css'],\r\n})\r\nexport class ProfileSettingsComponent implements OnInit {\r\n  @ViewChild(MatAccordion) accordion: MatAccordion;\r\n  userDetails: User = { firstName: '', mobileNumber: 0 };\r\n  firstName: string = 'queen elizabeth';\r\n  contactNum: number = 9023456789;\r\n\r\n  signupForm: FormGroup;\r\n  contactNumberForm: FormGroup;\r\n  passwordChangeForm: FormGroup;\r\n\r\n  submitted = false;\r\n  hide = true;\r\n\r\n  makeFirstNameEditable = false;\r\n  makeContactNumberEditable = false;\r\n\r\n  matcher = new MyErrorStateMatcher();\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userService: UserService,\r\n    private _snackBar: MatSnackBar\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.signupForm = this.formBuilder.group({\r\n      firstName: ['', [Validators.required]],\r\n    });\r\n    this.contactNumberForm = this.formBuilder.group({\r\n      mobileNum: [\r\n        '',\r\n        [\r\n          Validators.required,\r\n          Validators.pattern('^[0-9]*$'),\r\n          Validators.minLength(10),\r\n          Validators.maxLength(10),\r\n        ],\r\n      ],\r\n    });\r\n    this.passwordChangeForm = this.formBuilder.group(\r\n      {\r\n        password: new FormControl('', [\r\n          Validators.required,\r\n          Validators.minLength(8),\r\n        ]),\r\n        confirmPassword: new FormControl('', [Validators.required]),\r\n      },\r\n      { validator: this.checkPasswords }\r\n    );\r\n\r\n    this.userService.getUserProfile().subscribe(\r\n      (res) => {\r\n        this.userDetails = res['user'];\r\n      },\r\n      err => {\r\n      }\r\n    );\r\n  }\r\n\r\n  public hasError = (controlName: string, errorName: string) => {\r\n    return this.signupForm.controls[controlName].hasError(errorName);\r\n  };\r\n  public hasErrorInContactNum = (controlName: string, errorName: string) => {\r\n    return this.contactNumberForm.controls[controlName].hasError(errorName);\r\n  };\r\n  public hasErrorInChangePassword = (\r\n    controlName: string,\r\n    errorName: string\r\n  ) => {\r\n    return this.passwordChangeForm.controls[controlName].hasError(errorName);\r\n  };\r\n  checkPasswords(group: FormGroup) {\r\n    let pass = group.controls.password.value;\r\n    let confirmPass = group.controls.confirmPassword.value;\r\n\r\n    return pass === confirmPass ? null : { notSame: true };\r\n  }\r\n  submitUserName() {\r\n    this.submitted = true;\r\n    if (this.signupForm.invalid) {\r\n      return;\r\n    }\r\n    else {\r\n      this.makeFirstNameEditable = false;\r\n      this.userDetails.firstName = this.signupForm.controls['firstName'].value;\r\n      this.userService.updateUserDetails(this.userDetails).subscribe(\r\n        (res) => {\r\n          this._snackBar.open(\"Updated successfully !!\", '', { duration: 1000 });\r\n        },\r\n        err => {\r\n          this._snackBar.open(\"Something went wrong. Unable to update. Please try later !!\", '', { duration: 300 });\r\n        }\r\n      );\r\n    }\r\n  }\r\n  editUserName() {\r\n    this.makeFirstNameEditable = true;\r\n  }\r\n  cancelUserName() {\r\n    this.submitted = true;\r\n    if (this.signupForm.invalid) {\r\n      return;\r\n    }\r\n    else {\r\n      this.makeFirstNameEditable = false;\r\n    }\r\n  }\r\n  submitContactNumber() {\r\n    if (this.contactNumberForm.invalid) {\r\n      return;\r\n    } else {\r\n      this.makeContactNumberEditable = false;\r\n      this.userDetails.mobileNumber = this.contactNumberForm.controls['mobileNum'].value;\r\n      this.userService.updateUserDetails(this.userDetails).subscribe(\r\n        res => {\r\n          this._snackBar.open(\"Updated successfully !!\", '', { duration: 1000 });\r\n        },\r\n        err => {\r\n          this._snackBar.open(\"Something went wrong. Unable to update. Please try later !!\", '', { duration: 300 });\r\n        }\r\n      );\r\n    }\r\n  }\r\n  editContactNumber() {\r\n    this.makeContactNumberEditable = true;\r\n  }\r\n  cancelMobileNumber() {\r\n    this.submitted = true;\r\n    if (this.contactNumberForm.invalid) {\r\n      return;\r\n    }\r\n    else {\r\n      this.makeContactNumberEditable = false;\r\n    }\r\n  }\r\n  submitPassword() {\r\n    if (this.passwordChangeForm.invalid) {\r\n      return;\r\n    }\r\n    else {\r\n      this.userDetails.password = this.passwordChangeForm.controls['password'].value;\r\n      this.userService.updateUserPassword(this.userDetails).subscribe(\r\n        (res) => {\r\n          this._snackBar.open(\"\", '', { duration: 1000 });\r\n          alert(\"Password updated successfully. Please log in again to continue.\")\r\n          this.userService.logout();\r\n        },\r\n        err => {\r\n          this._snackBar.open(\"Something went wrong. Unable to update. Please try later !!\", '', { duration: 300 });\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  deleteUserAccount() {\r\n    if (confirm('Are you sure to delete your account ?') == true) {\r\n      this.userDetails.email = this.userService.getUserEmail();\r\n      this.userService.deleteUserAccount(this.userDetails).subscribe((res) => {\r\n        alert(\"Deleted successfully. Thank you for availing GREPrep Service. Have a bright future.\")\r\n        this.userService.logout();\r\n      });\r\n    }\r\n  }\r\n}\r\n","<app-header></app-header>\r\n<div class=\"example-action-buttons\">\r\n  <h1>\r\n    <button mat-button (click)=\"accordion.openAll()\">Expand All</button>\r\n    <button mat-button (click)=\"accordion.closeAll()\">Collapse All</button>\r\n  </h1>\r\n</div>\r\n<mat-accordion class=\"example-headers-align\" multi>\r\n  <div class=\"registrationLayout\">\r\n    <mat-card class=\"registrationCard\" [class.mat-elevation-z10]=\"true\">\r\n      <mat-expansion-panel>\r\n        <mat-expansion-panel-header>\r\n          <mat-panel-title>\r\n            <h2>Personal Information</h2>\r\n          </mat-panel-title>\r\n          <mat-panel-description>\r\n            Edit your full name and mobile number\r\n            <mat-icon>account_circle</mat-icon>\r\n          </mat-panel-description>\r\n        </mat-expansion-panel-header>\r\n        <form [formGroup]=\"signupForm\" (ngSubmit)=\"submitUserName()\">\r\n          <div class=\"container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"start center\" fxLayoutGap=\"10px\">\r\n            <div fxFlex=\"50%\" fxLayoutGap=\"10px\">\r\n              <mat-label>First Name : </mat-label>\r\n              <span *ngIf=\"!makeFirstNameEditable\">\r\n                {{ userDetails.firstName }}</span>\r\n              <mat-form-field *ngIf=\"makeFirstNameEditable\" appearance=\"outline\">\r\n                <input matInput type=\"text\" required placeholder=\"Enter your full name\" formControlName=\"firstName\"\r\n                  id=\"firstName\" [(ngModel)]=\"userDetails.firstName\" />\r\n                <mat-icon matPrefix>account_circle</mat-icon>\r\n                <mat-error *ngIf=\"hasError('firstName', 'required')\">First Name is required</mat-error>\r\n              </mat-form-field>\r\n              <button *ngIf=\"!makeFirstNameEditable\" mat-raised-button color=\"primary\" type=\"button\"\r\n                (click)=\"editUserName()\">\r\n                Edit\r\n              </button>\r\n              <button *ngIf=\"makeFirstNameEditable\" mat-raised-button color=\"primary\" type=\"submit\">\r\n                Save\r\n              </button>\r\n              <button *ngIf=\"makeFirstNameEditable\" mat-raised-button color=\"primary\" type=\"button\"\r\n                (click)=\"submitUserName()\">\r\n                Cancel\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n        <br />\r\n        <form [formGroup]=\"contactNumberForm\" (ngSubmit)=\"submitContactNumber()\">\r\n          <div class=\"container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"start center\" fxLayoutGap=\"10px\">\r\n            <mat-label>Contact Number : </mat-label>\r\n            <span *ngIf=\"!makeContactNumberEditable\">\r\n              {{ userDetails.mobileNumber }}</span>\r\n            <mat-form-field *ngIf=\"makeContactNumberEditable\" appearance=\"outline\">\r\n              <input matInput type=\"text\" required placeholder=\"Enter your name\" formControlName=\"mobileNum\"\r\n                id=\"contactNum\" [(ngModel)]=\"userDetails.mobileNumber\" />\r\n              <mat-icon matPrefix> contact_phone</mat-icon>\r\n              <mat-error *ngIf=\"hasErrorInContactNum('mobileNum', 'required')\">Contact Number is required</mat-error>\r\n              <mat-error *ngIf=\"hasErrorInContactNum('mobileNum', 'minlength')\">10 digit contact number is required\r\n              </mat-error>\r\n              <mat-error *ngIf=\"hasErrorInContactNum('mobileNum', 'maxlength')\">10 digit contact number is required\r\n              </mat-error>\r\n              <mat-error *ngIf=\"hasErrorInContactNum('mobileNum', 'pattern')\">Contact number should be a digit\r\n              </mat-error>\r\n            </mat-form-field>\r\n            <button *ngIf=\"!makeContactNumberEditable\" mat-raised-button color=\"primary\" type=\"button\"\r\n              (click)=\"editContactNumber()\">\r\n              Edit\r\n            </button>\r\n            <button *ngIf=\"makeContactNumberEditable\" mat-raised-button color=\"primary\" type=\"submit\">\r\n              Save\r\n            </button>\r\n            <button *ngIf=\"makeContactNumberEditable\" mat-raised-button color=\"primary\" type=\"button\"\r\n              (click)=\"submitContactNumber()\">\r\n              Cancel\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </mat-expansion-panel>\r\n    </mat-card>\r\n  </div>\r\n  <div class=\"registrationLayout\">\r\n    <mat-card class=\"registrationCard\" [class.mat-elevation-z10]=\"true\">\r\n      <mat-expansion-panel>\r\n        <mat-expansion-panel-header>\r\n          <mat-panel-title>\r\n            <h2>Password Management</h2>\r\n          </mat-panel-title>\r\n          <mat-panel-description>\r\n            Change password\r\n            <mat-icon>lock</mat-icon>\r\n          </mat-panel-description>\r\n        </mat-expansion-panel-header>\r\n\r\n        <form [formGroup]=\"passwordChangeForm\" (ngSubmit)=\"submitPassword()\">\r\n          <div class=\"container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"start center\" fxLayoutGap=\"10px\">\r\n            <div fxFlex=\"30%\">\r\n              <mat-form-field appearance=\"outline\">\r\n                <mat-label>Password</mat-label>\r\n                <input matInput [type]=\"hide ? 'password' : 'text'\" required placeholder=\"Enter your password\"\r\n                  formControlName=\"password\" id=\"password\" minlength=\"8\" />\r\n                <mat-icon matPrefix>lock</mat-icon>\r\n                <mat-icon matSuffix (click)=\"hide = !hide\" style=\"cursor: pointer;\">\r\n                  {{ hide ? \"visibility_off\" : \"visibility\" }}</mat-icon>\r\n                <mat-error *ngIf=\"hasErrorInChangePassword('password', 'required')\">Password is required</mat-error>\r\n                <mat-error *ngIf=\"hasErrorInChangePassword('password', 'minlength')\">The minimum length is 8 characters\r\n                </mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"30%\">\r\n              <mat-form-field appearance=\"outline\">\r\n                <mat-label>Confirm Password</mat-label>\r\n                <input matInput [type]=\"hide ? 'password' : 'text'\" placeholder=\"Confirm your password\"\r\n                  formControlName=\"confirmPassword\" id=\"confirmPassword\" [errorStateMatcher]=\"matcher\" />\r\n                <mat-icon matPrefix>lock</mat-icon>\r\n                <mat-icon matSuffix (click)=\"hide = !hide\" style=\"cursor: pointer;\">\r\n                  {{ hide ? \"visibility_off\" : \"visibility\" }}</mat-icon>\r\n                <mat-error *ngIf=\"passwordChangeForm.hasError('notSame')\">\r\n                  Passwords do not match\r\n                </mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <button mat-raised-button color=\"primary\" type=\"submit\">\r\n            Save\r\n          </button>\r\n        </form>\r\n      </mat-expansion-panel>\r\n    </mat-card>\r\n  </div>\r\n  <div class=\"registrationLayout\">\r\n    <mat-card class=\"registrationCard\" [class.mat-elevation-z10]=\"true\">\r\n      <mat-expansion-panel>\r\n        <mat-expansion-panel-header>\r\n          <mat-panel-title>\r\n            <h2>Delete Account</h2>\r\n          </mat-panel-title>\r\n          <mat-panel-description>\r\n            Delete your account along with all saved universities list\r\n            <mat-icon>delete_forever</mat-icon>\r\n          </mat-panel-description>\r\n        </mat-expansion-panel-header>\r\n        <button mat-raised-button color=\"warn\" (click)=\"deleteUserAccount()\">Delete account</button>\r\n      </mat-expansion-panel>\r\n    </mat-card>\r\n  </div>\r\n</mat-accordion>","// Author - Padmesh Donthu\r\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { FormGroup, FormControl } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { QuestionManagerService } from '../services/question-manager.service';\r\n\r\n@Component({\r\n  selector: 'app-quantitative-practice',\r\n  templateUrl: './quantitative-practice.component.html',\r\n  styleUrls: [\r\n    '../../../node_modules/materialize-css/dist/css/materialize.min.css',\r\n    './quantitative-practice.component.css',\r\n  ],\r\n  encapsulation: ViewEncapsulation.Emulated,\r\n})\r\nexport class QuantitativePracticeComponent implements OnInit {\r\n  ngOnInit(): void {}\r\n\r\n  // Inject services and router to the component\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private questionService: QuestionManagerService\r\n  ) {}\r\n\r\n  // Method to route the user to quantitative test page\r\n  next() {\r\n    if (\r\n      this.questionService.questionCount == 0 ||\r\n      this.questionService.questionType == ''\r\n    ) {\r\n      alert(\r\n        'Please select all the options available before starting your test'\r\n      );\r\n    } else {\r\n      this.router.navigate(['takeQuantPracticeTest'], {\r\n        relativeTo: this.route,\r\n      });\r\n    }\r\n  }\r\n\r\n  // Method to set the number of questions for the test\r\n  setNumberOfQuestions(questionCount: number) {\r\n    this.questionService.questionCount = questionCount;\r\n  }\r\n\r\n  // Method to set the test type in quantitative practice\r\n  setQuestionType(questionType: string) {\r\n    this.questionService.questionType = questionType;\r\n  }\r\n}\r\n","<!--Author - Padmesh Donthu-->\r\n<div style=\"background-color: #e7ebee; min-height: 100%;\">\r\n  <app-header></app-header>\r\n  <div class=\"container\" style=\"padding-top: 20px; padding-bottom: 20px;\">\r\n    <h2 class=\"center-align\">GRE Quantitative Practice</h2>\r\n    <div class=\"row\">\r\n      <div class=\"center-align\">\r\n        Use the GREPrep Quantitative Practice to help you prepare for the\r\n        computer-delivered GRE General Test. The Quantitative Practice Quizzes are\r\n        designed to help you:\r\n        <ul class=\"collection\">\r\n          <li class=\"collection-item\">\r\n            Understand what's being tested Gain familiarity with the various\r\n            question types and difficulty level of Quantitative type of questions\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            Practice your test-taking strategies by understanding the topics\r\n            thoroughly\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            Use the concepts you have prepared in quantitative question types\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n    <br />\r\n    <div class=\"row\">\r\n      <div class=\"center-align\">\r\n        <h5>Instructions</h5>\r\n        <ul class=\"collection\">\r\n          <li class=\"collection-item\">\r\n            The Quiz is untimed i.e. you will have unlimited time to complete\r\n            it. You can choose the number of questions to attempt before taking\r\n            the quiz.\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            The questions consist of Quantitative types.\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            The questions can either be multiple choice or single choice types\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            Once you submit your test, you can get your quiz score. Each\r\n            question will be of 1 mark.\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            You can use buttons like First, Previous, Next, and Last to move to\r\n            questions\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            Select the type of verbal questions you want to attempt\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            Select the number of questions you want to attempt\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            Click on Start Your Quiz button below to start your Quiz.\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            Once you click on the button, the test starts immediately.\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n    <br />\r\n    <div class=\"row\">\r\n      <div class=\"center-align\">\r\n        <mat-radio-group>\r\n          <mat-radio-button\r\n            value=\"QC\"\r\n            class=\"radioBtn\"\r\n            (change)=\"setQuestionType('QC')\"\r\n            >Quantitative Comparison\r\n          </mat-radio-button>\r\n          <mat-radio-button\r\n            value=\"QMCQ\"\r\n            class=\"radioBtn\"\r\n            (change)=\"setQuestionType('QMCQ')\"\r\n            >Quantitative Multiple Choice One Answer\r\n          </mat-radio-button>\r\n          <mat-radio-button\r\n            value=\"QSMQ\"\r\n            class=\"radioBtn\"\r\n            (change)=\"setQuestionType('QSMQ')\"\r\n            >Quantitative Multiple Choice One or More Answers\r\n          </mat-radio-button>\r\n        </mat-radio-group>\r\n      </div>\r\n    </div>\r\n    <br />\r\n    <div class=\"row\">\r\n      <div class=\"center-align\">\r\n        <mat-radio-group>\r\n          <mat-radio-button\r\n            value=\"10\"\r\n            class=\"radioBtn\"\r\n            (change)=\"setNumberOfQuestions(10)\"\r\n            >10\r\n          </mat-radio-button>\r\n          <mat-radio-button\r\n            value=\"20\"\r\n            class=\"radioBtn\"\r\n            (change)=\"setNumberOfQuestions(20)\"\r\n            >20\r\n          </mat-radio-button>\r\n          <mat-radio-button\r\n            value=\"30\"\r\n            class=\"radioBtn\"\r\n            (change)=\"setNumberOfQuestions(30)\"\r\n            >30\r\n          </mat-radio-button>\r\n          <mat-radio-button\r\n            value=\"40\"\r\n            class=\"radioBtn\"\r\n            (change)=\"setNumberOfQuestions(40)\"\r\n            >40\r\n          </mat-radio-button>\r\n          <mat-radio-button\r\n            value=\"50\"\r\n            class=\"radioBtn\"\r\n            (change)=\"setNumberOfQuestions(50)\"\r\n            >50\r\n          </mat-radio-button>\r\n        </mat-radio-group>\r\n      </div>\r\n    </div>\r\n    <br />\r\n    <div class=\"row\">\r\n      <div class=\"center-align\">\r\n        <button\r\n          class=\"btn waves-effect waves-light indigo darken-3\"\r\n          (click)=\"next()\"\r\n        >\r\n          Start your Quiz\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","// Author - Padmesh Donthu\r\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { QuestionManagerService } from '../services/question-manager.service';\r\n\r\n@Component({\r\n  selector: 'app-quiz',\r\n  templateUrl: './quiz.component.html',\r\n  styleUrls: [\r\n    '../../../node_modules/materialize-css/dist/css/materialize.min.css',\r\n    './quiz.component.css',\r\n  ],\r\n  encapsulation: ViewEncapsulation.Emulated,\r\n})\r\nexport class QuizComponent implements OnInit {\r\n  // Inject services and router to the component\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private questionService: QuestionManagerService\r\n  ) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  // Method to route the user to quiz page\r\n  next() {\r\n    if (this.questionService.questionCount == 0) {\r\n      alert(\r\n        'Please select the number of questions to attempt before starting your test'\r\n      );\r\n    } else {\r\n      this.router.navigate(['takeQuiz'], { relativeTo: this.route });\r\n    }\r\n  }\r\n\r\n  // Method to set the number of questions for the test\r\n  setNumberOfQuestions(questionCount: number) {\r\n    this.questionService.questionCount = questionCount;\r\n  }\r\n}\r\n","<!--Author - Padmesh Donthu-->\r\n<div style=\"background-color: #e7ebee; min-height: 100%;\">\r\n  <app-header></app-header>\r\n  <div class=\"container\" style=\"padding-top: 20px; padding-bottom: 20px;\">\r\n    <h2 class=\"center-align\">GRE Quiz</h2>\r\n    <div class=\"row\">\r\n      <div class=\"center-align\">\r\n        Use the GREPrep Quiz to help you prepare for the computer-delivered GRE\r\n        General Test. The quizzes are designed to help you:\r\n        <ul class=\"collection\">\r\n          <li class=\"collection-item\">\r\n            Understand what's being tested Gain familiarity with the various\r\n            question types\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            Practice your test-taking strategies by understanding the topics\r\n            thoroughly\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            Use the concepts you have prepared in quantitative and verbal\r\n            question types\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n    <br />\r\n    <div class=\"row\">\r\n      <div class=\"center-align\">\r\n        <h5>Instructions</h5>\r\n        <ul class=\"collection\">\r\n          <li class=\"collection-item\">\r\n            The Quiz is untimed i.e. you will have unlimited time to complete\r\n            it. You can choose the number of questions to attempt before taking\r\n            the quiz.\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            The questions consist of Verbal and Quantitative types.\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            The questions can either be multiple choice or single choice types\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            Once you submit your test, you can get your quiz score. Each\r\n            question will be of 1 mark.\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            You can use buttons like First, Previous, Next, and Last to move to\r\n            questions\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            Select the number of questions you want to attempt\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            Click on Start Your Quiz button below to start your Quiz.\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            Once you click on the button, the test starts immediately.\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n    <br />\r\n    <div class=\"row\">\r\n      <div class=\"center-align\">\r\n        <mat-radio-group>\r\n          <mat-radio-button\r\n            value=\"10\"\r\n            class=\"radioBtn\"\r\n            (change)=\"setNumberOfQuestions(10)\"\r\n            >10\r\n          </mat-radio-button>\r\n          <mat-radio-button\r\n            value=\"20\"\r\n            class=\"radioBtn\"\r\n            (change)=\"setNumberOfQuestions(20)\"\r\n            >20\r\n          </mat-radio-button>\r\n          <mat-radio-button\r\n            value=\"30\"\r\n            class=\"radioBtn\"\r\n            (change)=\"setNumberOfQuestions(30)\"\r\n            >30\r\n          </mat-radio-button>\r\n          <mat-radio-button\r\n            value=\"40\"\r\n            class=\"radioBtn\"\r\n            (change)=\"setNumberOfQuestions(40)\"\r\n            >40\r\n          </mat-radio-button>\r\n          <mat-radio-button\r\n            value=\"50\"\r\n            class=\"radioBtn\"\r\n            (change)=\"setNumberOfQuestions(50)\"\r\n            >50\r\n          </mat-radio-button>\r\n        </mat-radio-group>\r\n      </div>\r\n    </div>\r\n    <br />\r\n    <div class=\"row\">\r\n      <div class=\"center-align\">\r\n        <button\r\n          class=\"btn waves-effect waves-light indigo darken-3\"\r\n          (click)=\"next()\"\r\n        >\r\n          Start your Quiz\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","//  Author: Pratibha B(B00847415)\r\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport {\r\n  FormGroup,\r\n  FormControl,\r\n  Validators,\r\n  FormGroupDirective,\r\n  NgForm,\r\n  FormBuilder,\r\n} from '@angular/forms';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\nimport { Router } from '@angular/router';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { LoginAndSignupDialogComponent } from '../login-and-signup-dialog/login-and-signup-dialog.component';\r\nimport { UserService } from '../services/user.service';\r\n\r\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\r\n  isErrorState(\r\n    control: FormControl | null,\r\n    form: FormGroupDirective | NgForm | null\r\n  ): boolean {\r\n    const invalidCtrl = !!(control && control.invalid && control.parent.dirty);\r\n    const invalidParent = !!(\r\n      control &&\r\n      control.parent &&\r\n      control.parent.invalid &&\r\n      control.parent.dirty\r\n    );\r\n\r\n    return invalidCtrl || invalidParent;\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'app-registration',\r\n  templateUrl: './registration.component.html',\r\n  styleUrls: ['./registration.component.css'],\r\n  encapsulation: ViewEncapsulation.Emulated\r\n})\r\nexport class RegistrationComponent implements OnInit {\r\n  signupForm: FormGroup;\r\n\r\n  hide = true;\r\n\r\n  matcher = new MyErrorStateMatcher();\r\n  emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  showSucessMessage: boolean;\r\n  serverErrorMessages: string;\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private dialog: MatDialog,\r\n    private userService: UserService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.signupForm = this.formBuilder.group(\r\n      {\r\n        firstName: new FormControl('', [Validators.required]),\r\n        lastName: new FormControl('', [Validators.required]),\r\n        email: new FormControl('', [Validators.required, Validators.email,Validators.pattern(this.emailRegex)]),\r\n        password: new FormControl('', [\r\n          Validators.required,\r\n          Validators.minLength(8),\r\n        ]),\r\n        confirmPassword: new FormControl('', [Validators.required]),\r\n        mobileNumber: new FormControl('', [\r\n          Validators.required,\r\n          Validators.minLength(10),\r\n          Validators.maxLength(10),\r\n          Validators.pattern('[6-9]\\\\d{9}'),\r\n        ]),\r\n      },\r\n      { validator: this.checkPasswords }\r\n    );\r\n  }\r\n\r\n  public hasError = (controlName: string, errorName: string) => {\r\n    return this.signupForm.controls[controlName].hasError(errorName);\r\n  };\r\n\r\n  signup() {\r\n    this.userService.postUser(this.signupForm.value).subscribe(\r\n      res => {\r\n        const dialogRef = this.dialog.open(LoginAndSignupDialogComponent, {\r\n      width: '500px',\r\n      data: {\r\n        firstName: this.signupForm.value.firstName,\r\n        lastName: this.signupForm.value.lastName,\r\n        mobileNumber: this.signupForm.value.mobileNumber,\r\n        email: this.signupForm.value.email,\r\n        password:'Registered successfully. Please login to continue',\r\n      },\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      this.router.navigate(['login']);\r\n    });\r\n      },\r\n      err => {\r\n        if (err.status === 422) {\r\n          this.serverErrorMessages = err.error.join('<br/>');\r\n        }\r\n        else\r\n          this.serverErrorMessages = 'Something went wrong.Please contact admin.';\r\n      }\r\n    );  \r\n  }\r\n\r\n  checkPasswords(group: FormGroup) {\r\n    let pass = group.controls.password.value;\r\n    let confirmPass = group.controls.confirmPassword.value;\r\n\r\n    return pass === confirmPass ? null : { notSame: true };\r\n  }\r\n}\r\n","<div class=\"registrationLayout\">\r\n  <mat-card class=\"registrationCard\" [class.mat-elevation-z10]=\"true\">\r\n    <mat-card-title>Create Account</mat-card-title>\r\n    <mat-card-subtitle>Welcome to the world of learning!</mat-card-subtitle>\r\n    <mat-card-content>\r\n      <div class=\"container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"0.5\" fxLayoutAlign=\"center\">\r\n        <div fxFlex=\"50\">\r\n          <form [formGroup]=\"signupForm\" (ngSubmit)=\"signup()\">\r\n            <div class=\"container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"0.5\"\r\n              fxLayoutAlign=\"center\">\r\n              <div fxFlex=\"50%\">\r\n                <mat-form-field appearance=\"outline\">\r\n                  <mat-label>First Name</mat-label>\r\n\r\n                  <input matInput type=\"text\" required placeholder=\"Enter your first name\" formControlName=\"firstName\"\r\n                    id=\"firstName\" />\r\n                  <mat-icon matPrefix>account_circle</mat-icon>\r\n                  <mat-hint align=\"end\">Example: John</mat-hint>\r\n                  <mat-error *ngIf=\"hasError('firstName', 'required')\">First Name is required</mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n              <div fxFlex=\"50%\">\r\n                <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Last Name</mat-label>\r\n\r\n                  <input matInput type=\"text\" required placeholder=\"Enter your last name\" formControlName=\"lastName\"\r\n                    id=\"lastName\" />\r\n                  <mat-icon matPrefix>account_circle</mat-icon>\r\n                  <mat-hint align=\"end\">Example: Doe</mat-hint>\r\n                  <mat-error *ngIf=\"hasError('lastName', 'required')\">Last Name is required</mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <br />\r\n            <div class=\"container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"0.5\"\r\n              fxLayoutAlign=\"center\">\r\n              <div fxFlex=\"50%\">\r\n                <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Email address</mat-label>\r\n\r\n                  <input matInput type=\"email\" required placeholder=\"Enter your Email address\" formControlName=\"email\"\r\n                    id=\"email\" />\r\n                  <mat-icon matPrefix>email</mat-icon>\r\n                  <mat-hint align=\"end\">Example: xyz@gmail.com</mat-hint>\r\n                  <mat-error *ngIf=\"hasError('email', 'required')\">Email address is required</mat-error>\r\n                  <mat-error *ngIf=\"hasError('email', 'email') || hasError('email', 'pattern')\">Emaild address is not valid</mat-error>                  \r\n                </mat-form-field>\r\n              </div>\r\n              <div fxFlex=\"50%\">\r\n                <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Mobile number</mat-label>\r\n\r\n                  <input matInput required placeholder=\"Enter your mobile number\" formControlName=\"mobileNumber\"\r\n                    id=\"mobileNumber\" maxlength=\"10\" minlength=\"10\" />\r\n                  <mat-icon matPrefix>phone</mat-icon>\r\n                  <mat-hint align=\"end\">Example: 9024125836</mat-hint>\r\n                  <mat-error *ngIf=\"hasError('mobileNumber', 'required')\">Phone number is required</mat-error>\r\n                  <mat-error *ngIf=\"\r\n                      !signupForm.get('mobileNumber').hasError('required') &&\r\n                      signupForm.get('mobileNumber').hasError('pattern')\r\n                    \">\r\n                    Phone number is not valid\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <br />\r\n            <div class=\"container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"0.5\"\r\n              fxLayoutAlign=\"center\">\r\n              <div fxFlex=\"50%\">\r\n                <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Password</mat-label>\r\n                  <input matInput [type]=\"hide ? 'password' : 'text'\" required placeholder=\"Enter your password\"\r\n                    formControlName=\"password\" id=\"password\" minlength=\"8\" />\r\n                  <mat-icon matPrefix>lock</mat-icon>\r\n                  <mat-icon matSuffix (click)=\"hide = !hide\" style=\"cursor: pointer;\">\r\n                    {{ hide ? \"visibility_off\" : \"visibility\" }}</mat-icon>\r\n                  <mat-error *ngIf=\"hasError('password', 'required')\">Password is required</mat-error>\r\n                  <mat-error *ngIf=\"hasError('password', 'minlength')\">The minimum length is 8 characters</mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n              <div fxFlex=\"50%\">\r\n                <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Confirm Password</mat-label>\r\n                  <input matInput [type]=\"hide ? 'password' : 'text'\" placeholder=\"Confirm your password\"\r\n                    formControlName=\"confirmPassword\" id=\"confirmPassword\" [errorStateMatcher]=\"matcher\" />\r\n                  <mat-icon matPrefix>lock</mat-icon>\r\n                  <mat-icon matSuffix (click)=\"hide = !hide\" style=\"cursor: pointer;\">\r\n                    {{ hide ? \"visibility_off\" : \"visibility\" }}</mat-icon>\r\n                  <mat-error *ngIf=\"signupForm.hasError('notSame')\">\r\n                    Passwords do not match\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <br />\r\n            <div class=\"container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"0.5\"\r\n              fxLayoutAlign=\"start\">\r\n              <button mat-raised-button type=\"submit\" color=\"primary\" [disabled]=\"!signupForm.valid\">\r\n                Start Learning!\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n        <div fxFlex=\"50\">\r\n          <br />\r\n          <div class=\"container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"0.5\"\r\n            fxLayoutAlign=\"start center\">\r\n            Already a member?&nbsp;&nbsp;\r\n            <a href=\"/login\">\r\n              <button mat-stroked-button color=\"primary\">\r\n                Resume Learning!\r\n              </button>\r\n            </a>\r\n            <br />\r\n          </div>\r\n          <a [routerLink]=\"['']\">Go to Home</a>\r\n          <br />\r\n          <br />\r\n          <div class=\"container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"0.5\" fxLayoutAlign=\"end\">\r\n            <img src=\"../../assets/img/english.PNG\" width=\"100%\" height=\"300\" />\r\n          </div>\r\n        </div>\r\n        <div class=\"success\" *ngIf=\"showSucessMessage\">\r\n          Saved successfully\r\n        </div>\r\n        \r\n        <!-- Error message -->\r\n        <div class=\"alert\" *ngIf=\"serverErrorMessages\">\r\n          {{serverErrorMessages}}\r\n        </div>\r\n      </div>\r\n    </mat-card-content>\r\n  </mat-card>\r\n  <!-- Success message -->\r\n\r\n</div>","import { AfterViewInit, Component, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTable, MatTableDataSource } from '@angular/material/table';\r\n\r\n\r\nimport { SchoolService } from '../services/school.service';\r\nimport { School } from '../models/school.model';\r\nimport { FormGroup, FormControl } from '@angular/forms';\r\n\r\n\r\ninterface schoolRanking {\r\n  value: Number;\r\n  viewValue: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-school-ranking',\r\n  templateUrl: './school-ranking.component.html',\r\n  styleUrls: [\r\n    '../../../node_modules/materialize-css/dist/css/materialize.min.css',\r\n    './school-ranking.component.css'],\r\n  encapsulation: ViewEncapsulation.Emulated,\r\n  providers: [SchoolService]\r\n})\r\n//Component responsible for displaying the school ranking\r\nexport class SchoolRankingComponent implements OnInit {\r\n\r\n  dataSource: MatTableDataSource<School>;\r\n  schoolList: School[] = new Array();\r\n  isLoading: boolean = true;\r\n  selectedRanking:Number;\r\n  private paginator: MatPaginator;\r\n\r\n  form: FormGroup;\r\n  rankings: schoolRanking[] = [\r\n    {value: 0, viewValue: 'Global Ranking'},\r\n    {value: 1, viewValue: 'Computer Science Ranking'},\r\n    {value: 2, viewValue: 'Electrical Ranking'},\r\n    {value: 3, viewValue: 'Mechanical Ranking'}\r\n  ];\r\n\r\n   /** Columns displayed in the table. Columns IDs can be added, removed, or reordered. */\r\n  displayedColumns = ['id', 'name'];\r\n  rankingControl = new FormControl(this.rankings[1].value);\r\n\r\n  @ViewChild(MatPaginator) set matPaginator(mp: MatPaginator) {\r\n    this.paginator = mp;\r\n    this.setDataSourceAttributes();\r\n}\r\n\r\n  constructor(public schoolService: SchoolService){\r\n    this.form = new FormGroup({\r\n      school: this.rankingControl\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n   this.refreshEmployeeList();\r\n  }\r\n\r\n  setDataSourceAttributes() {\r\n    if (!this.isLoading) {\r\n      this.dataSource.paginator = this.paginator;\r\n    }\r\n  }\r\n\r\n  //To fetch and display the school rankings\r\n  refreshEmployeeList(){\r\n   this.schoolService.getSchoolList().subscribe((res) => {\r\n      this.schoolService.schools = res as School[];\r\n      this.dataSource = new MatTableDataSource(this.schoolService.schools);\r\n      this.isLoading = false;\r\n      this.setDataSourceAttributes();\r\n    });\r\n  }\r\n\r\n  //Function is executed when the value in the drop down is changed\r\n  public onChange(event): void {\r\n    this.selectedRanking = event.value.value;\r\n    if(this.selectedRanking == 1){\r\n      this.schoolService.schools=this.schoolService.schools.sort((a, b) => (a.csRank < b.csRank ? -1 : 1));\r\n      this.dataSource = new MatTableDataSource(this.schoolService.schools);\r\n      this.dataSource.paginator = this.paginator;\r\n    }\r\n    else if(this.selectedRanking == 2){\r\n      this.schoolService.schools= this.schoolService.schools.sort((a, b) => (a.eceRank < b.eceRank ? -1 : 1));\r\n      this.dataSource = new MatTableDataSource(this.schoolService.schools);\r\n      this.dataSource.paginator = this.paginator;\r\n    }\r\n    else if(this.selectedRanking == 3) {\r\n      this.schoolService.schools= this.schoolService.schools.sort((a, b) => (a.mechRank < b.mechRank ? -1 : 1));\r\n      this.dataSource = new MatTableDataSource(this.schoolService.schools);\r\n      this.dataSource.paginator = this.paginator;\r\n    }\r\n    else{\r\n      this.schoolService.schools= this.schoolService.schools.sort((a, b) => (a.globalRank < b.globalRank ? -1 : 1));\r\n      this.dataSource = new MatTableDataSource(this.schoolService.schools);\r\n      this.dataSource.paginator = this.paginator;\r\n    }\r\n  }\r\n}\r\n","<head>\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.0.0-beta1/jquery.min.js\"></script>\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.6/js/materialize.min.js\"></script>\r\n</head>\r\n<div style=\"background-color: #e7ebee; min-height: 100%;\">\r\n  <app-header></app-header>\r\n  <div class=\"loading-indicator\" *ngIf=\"isLoading\">\r\n    <mat-spinner></mat-spinner>\r\n  </div>\r\n  <div *ngIf=\"!isLoading\">\r\n  <h1 class=\"heading\">Schools Ranking 2020</h1>\r\n  <div style=\"text-align: center;\">\r\n    <form [formGroup]=\"form\">\r\n      <mat-form-field appearance=\"outline\" class=\"dropDown\">\r\n        <mat-label>School Ranking</mat-label>\r\n        <mat-select (selectionChange)=\"onChange($event)\" [formControl]=\"rankingControl\" name=\"ranking\">\r\n          <mat-option *ngFor=\"let ranking of rankings\" [value]=\"ranking\">\r\n            {{ranking.viewValue}}\r\n          </mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n    </form>\r\n  </div>\r\n  <br>\r\n  <div class=\"ranking-table mat-elevation-z8\">\r\n    <mat-table [(dataSource)]=\"dataSource\">\r\n      <!-- Id Column -->\r\n      <ng-container matColumnDef=\"id\">\r\n        <mat-header-cell *matHeaderCellDef>Rank</mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element; let i = index;\"> {{(i+1) +  (paginator.pageIndex * paginator.pageSize)}} </mat-cell>\r\n      </ng-container>\r\n\r\n      <!-- Name Column -->\r\n      <ng-container matColumnDef=\"name\">\r\n        <mat-header-cell *matHeaderCellDef>School Name</mat-header-cell>\r\n        <mat-cell *matCellDef=\"let row\">{{ row.name }}</mat-cell>\r\n      </ng-container>\r\n\r\n      <mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></mat-header-row >\r\n      <mat-row *matRowDef=\"let row; columns: displayedColumns\"></mat-row>\r\n    </mat-table>\r\n    <mat-paginator\r\n      #paginator\r\n      class=\"mat-paginator-sticky\"\r\n      [length]=\"dataSource?.data.length\"\r\n      [pageIndex]=\"0\"\r\n      [pageSize]=\"5\"\r\n      [pageSizeOptions]=\"[5, 10]\"\r\n    >\r\n    </mat-paginator>\r\n  </div>\r\n  <br />\r\n  </div>\r\n</div>\r\n \r\n","import { Injectable } from '@angular/core';\r\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PredictionServiceService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getColleges(user) {\r\n    const requestBody = {\r\n      userEmailID: user\r\n    }\r\n    return this.http.post('/predictor/predict', requestBody);\r\n  }\r\n}\r\n","// Author - Padmesh Donthu\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Question } from '../models/question';\nimport { Observable } from 'rxjs';\nimport { UserAnswers } from '../models/user-answers';\nimport { Test } from '../models/test';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QuestionManagerService {\n  private baseUrl = '/question';\n\n  public questionCount = 0;\n\n  public questionType = '';\n\n  public answerId: string = '-1';\n\n  constructor(private httpClient: HttpClient) {}\n\n  // Get request to get list of questions from the database\n  getQuestions(): Observable<Question[]> {\n    return this.httpClient.get<Question[]>(this.baseUrl);\n  }\n\n  // Post request to save the user answers for the attempted test to the database\n  saveUserAnswers(userAnswers: UserAnswers) {\n    return this.httpClient.post(this.baseUrl + '/saveUserAnswers', userAnswers);\n  }\n\n  // Post request to save the calculated GRE Score for the Mock Test to the database\n  saveUserGreScore(emailId: String, score: Number, data: any) {\n    var body = {\n      userEmailID: emailId,\n      mockTest: score,\n      mockTestId: data,\n    };\n    return this.httpClient.post('/predictor/addHistory', body);\n  }\n\n  // Post request to save the calculated Quiz Score to the database\n  saveUserQuizScore(emailId: String, score: Number, data: any) {\n    var body = {\n      userEmailID: emailId,\n      quiz: score,\n      quizTestId: data,\n    };\n    return this.httpClient.post(this.baseUrl + '/addQuizHistory', body);\n  }\n\n  // Get request to get the list of questions for the Quiz\n  getQuestionsForQuiz(): Observable<Question[]> {\n    let url = this.baseUrl + '/getQuizQuestions/' + this.questionCount;\n    return this.httpClient.get<Question[]>(url);\n  }\n\n  // Get request to get the list of questions for the Verbal Practice\n  getQuestionsForVerbalAndQuantPractice(): Observable<Question[]> {\n    let url = this.baseUrl + '/getVerbalAndQuantQuestions';\n    var requestParams = new HttpParams();\n    requestParams = requestParams.set(\n      'questionCount',\n      this.questionCount.toString()\n    );\n    requestParams = requestParams.set('questionType', this.questionType);\n    return this.httpClient.get<Question[]>(url, { params: requestParams });\n  }\n\n  // Post request to save the calculated Quiz Score to the database\n  saveUserVerbalPracticeScore(emailId: String, score: Number, data: any) {\n    var body = {\n      userEmailID: emailId,\n      score: score,\n      verbalTestId: data,\n    };\n    return this.httpClient.post(\n      this.baseUrl + '/addVerbalPracticeHistory',\n      body\n    );\n  }\n\n  // Post request to save the calculated Quiz Score to the database\n  saveUserQuantPracticeScore(emailId: String, score: Number, data: any) {\n    var body = {\n      userEmailID: emailId,\n      score: score,\n      quantTestId: data,\n    };\n    return this.httpClient.post(\n      this.baseUrl + '/addQuantPracticeHistory',\n      body\n    );\n  }\n\n  // Get request to get the user's attempt history\n  getAttemptHistory(emailId: string): Observable<Test> {\n    let url = this.baseUrl + '/getAttemptHistory';\n    var requestParams = new HttpParams();\n    requestParams = requestParams.set('userEmailID', emailId);\n    return this.httpClient.get<Test>(url, { params: requestParams });\n  }\n\n  // Get request to get the list of answers for the test taken by an user\n  getAnswers(): Observable<UserAnswers> {\n    let url = this.baseUrl + '/getAnswers';\n    var requestParams = new HttpParams();\n    requestParams = requestParams.set('id', this.answerId);\n    return this.httpClient.get<UserAnswers>(url, { params: requestParams });\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { School } from '../models/school.model';\r\nimport { UserSchools } from '../models/user-schools.model'\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SchoolService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  selectedSchool: School;\r\n  schools: School[];\r\n  readonly schoolRankingURL = '/schoolRankings';\r\n  readonly addSchoolURL = '/schools/addSchools';\r\n  readonly removeSchoolURL = '/schools/removeSchools';\r\n  readonly getFavouriteSchoolURL = '/schools';\r\n\r\n  //Used to fetch all the school details from the API\r\n  getSchoolList(){\r\n    return this.http.get(this.schoolRankingURL);\r\n  }\r\n\r\n  postFavouriteSchool(userSchool : UserSchools){\r\n    return this.http.post(this.addSchoolURL, userSchool);\r\n  }\r\n\r\n  getFavouriteSchools(){\r\n    return this.http.get(this.getFavouriteSchoolURL);\r\n  }\r\n\r\n  getFavouriteSchool(emailId: String){\r\n    return this.http.get(this.getFavouriteSchoolURL + '/' + emailId);\r\n  }\r\n\r\n  removeFavouriteSchool(emailId: String, schoolId: Number){\r\n    var body = {\r\n      userId: emailId,\r\n      schoolId: schoolId,\r\n    };\r\n    return this.http.put(this.removeSchoolURL, body);\r\n  }\r\n}\r\n","//  Author: Pratibha B(B00847415)\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { User } from '../models/user.model';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserService {\r\n  selectedUser: User = {\r\n    firstName: '',\r\n    lastName: '',\r\n    mobileNumber: 0,\r\n    email: '',\r\n    password: '',\r\n  };\r\n\r\n  noAuthHeader = { headers: new HttpHeaders({ NoAuth: 'True' }) };\r\n\r\n  constructor(private http: HttpClient, private router: Router) { }\r\n\r\n  //HttpMethods\r\n\r\n  postUser(user: User) {\r\n    return this.http.post('/user/register', user, this.noAuthHeader);\r\n  }\r\n\r\n  login(authCredentials) {\r\n    return this.http.post('/user/authenticate', authCredentials, this.noAuthHeader);\r\n  }\r\n  logout() {\r\n    this.deleteToken();\r\n    this.deleteUserEmail();\r\n    this.router.navigate(['/login']);\r\n  }\r\n  getUserProfile() {\r\n    return this.http.get('/user/userProfile');\r\n  }\r\n\r\n  updateUserDetails(user: User) {\r\n    return this.http.post('/user/userProfile/updateUserDetails', user);\r\n  }\r\n\r\n  updateUserPassword(user: User) {\r\n    return this.http.post('/user/userProfile/updateUserPassword', user);\r\n  }\r\n\r\n  deleteUserAccount(user: User) {\r\n    return this.http.post('/user/userProfile/deleteUser', user);\r\n  }\r\n  //Helper Methods\r\n\r\n  setToken(token: string) {\r\n    localStorage.setItem('token', token);\r\n  }\r\n\r\n  getToken() {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  deleteToken() {\r\n    localStorage.removeItem('token');\r\n  }\r\n\r\n  setUserEmail(email: string) {\r\n    localStorage.setItem('email', email);\r\n  }\r\n\r\n  getUserEmail() {\r\n    return localStorage.getItem('email');\r\n  }\r\n\r\n  deleteUserEmail() {\r\n    localStorage.removeItem('email');\r\n  }\r\n\r\n  getUserPayload() {\r\n    var token = this.getToken();\r\n    if (token) {\r\n      var userPayload = atob(token.split('.')[1]);\r\n      return JSON.parse(userPayload);\r\n    } else return null;\r\n  }\r\n\r\n  isLoggedIn() {\r\n    var userPayload = this.getUserPayload();\r\n    if (userPayload) return userPayload.exp > Date.now() / 1000;\r\n    else return false;\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-about-us',\r\n  templateUrl: './about-us.component.html',\r\n  styleUrls: ['./about-us.component.css']\r\n})\r\nexport class AboutUSComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<app-header></app-header>\r\n<div class=\"heading\">About Us</div>\r\n<div class=\"content\">\r\n    <div class=\"card\">\r\n        <mat-card class=\"example-card\">\r\n          <mat-card-header>            \r\n            <mat-card-title>GREPrep</mat-card-title>           \r\n          </mat-card-header>         \r\n          <mat-card-content>\r\n            <p>\r\n                Today users like you mostly want the best product but at a minimum possible cost, so generally it is quite difficult to find such product, but this website is completely free of cost and is available for all the users globally. Moreover, we provide enough practice materials to ace the GRE examination. These materials resemble the questions asked in the GRE examination very closely, as can be observed from our testimonials the scores the students have got after using our resources. This website is trustworthy, free of cost and provides a very simple interface for preparation. It is a combo of everything that a student needs to perform well in the GRE examination. It’s a great option for students as it is offered entirely online, meaning no books, DVDs, classrooms, etc. This has become the preferred study method for the majority of GRE studiers. There are also no deadlines so the GRE prep course from GREPrep can be taken at students own pace, which is a huge plus as other courses often make you pay quite a bit extra to extend your subscription. It’s a great option for people with full time jobs, families, or some other time demanding factor.\r\nIt’s completely free of cost only requirement being creating an account to access all the features. Again, the program is completely accessed online, which may be a drawback for some but from all the students I’ve helped on the GRE who have used GREPrep, none have seen this as an obstacle to maximizing their learning.We do not provide in person tutoring. However, GREPrep offers a plethora of free resources that can help immensely in place of a tutor. Moreover, GREPrep has its own android application that also offers plethora of study materials for the students for practice. The application is avilable on google play store. So, if a student is not able to use the website while on the go, they can easily access all the materials through our android application. The app is also free of cost. These are the factors that the student can consider while opting our services and we promise stduent will never regret thier decision of choosing us. We wish all the best to evry GRE aspirants. Happy learning!!\r\n            </p>\r\n          </mat-card-content>\r\n        </mat-card>\r\n      </div>                \r\n</div>\r\n<footer></footer>","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-contact-us',\r\n  templateUrl: './contact-us.component.html',\r\n  styleUrls: ['./contact-us.component.css']\r\n})\r\nexport class ContactUsComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<app-header></app-header>\r\n<div class=\"heading\">Contact Us</div>\r\n<div class=\"content\">\r\n    <div class=\"card\">\r\n        <mat-card class=\"example-card\">\r\n          <mat-card-header>            \r\n            <mat-card-title>Our contact details</mat-card-title>           \r\n          </mat-card-header>         \r\n          <mat-card-content>\r\n            <p>\r\n                We created this application to help the students excel in their GRE exam. For any queries that are not listed in FAQs, feel free to contact us at neelesh.homefilescenter14@gmail.com or reach at +19028809819. We are always happy to help.\r\n            </p>\r\n          </mat-card-content>\r\n        </mat-card>\r\n      </div>         \r\n</div>\r\n<footer></footer>","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-faqs',\r\n  templateUrl: './faqs.component.html',\r\n  styleUrls: ['./faqs.component.css']\r\n})\r\nexport class FAQsComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<app-header></app-header>\r\n<div class=\"heading\">Frequently Asked Questions (FAQs)</div>\r\n<div class=\"content\">\r\n    <div class=\"card\">\r\n        <mat-card class=\"example-card\">\r\n          <mat-card-header>\r\n            <div\r\n              mat-card-avatar\r\n              class=\"example-header-image\"\r\n              style=\"background-image: url('/assets/img/faq.jpg');\"\r\n            ></div>\r\n            <mat-card-title>WHY DO YOU NEED THIS APP?</mat-card-title>           \r\n          </mat-card-header>         \r\n          <mat-card-content>\r\n            <p>\r\n                The best application for preparing for GRE examination \r\n                which covers quant, verbal as well as quiz.\r\n            </p>\r\n          </mat-card-content>\r\n        </mat-card>\r\n      </div>\r\n      <div class=\"card\">\r\n        <mat-card class=\"example-card\">\r\n          <mat-card-header>\r\n            <div\r\n              mat-card-avatar\r\n              class=\"example-header-image\"\r\n              style=\"background-image: url('/assets/img/faq.jpg');\"\r\n            ></div>\r\n            <mat-card-title>WHO SHOULD USE THIS APPLICATION?</mat-card-title>           \r\n          </mat-card-header>         \r\n          <mat-card-content>\r\n            <p>\r\n                The GRE aspirants who want to score 300+, with ease must use this application.\r\n            </p>\r\n          </mat-card-content>\r\n        </mat-card>\r\n      </div>\r\n      <div class=\"card\">\r\n        <mat-card class=\"example-card\">\r\n          <mat-card-header>\r\n            <div\r\n              mat-card-avatar\r\n              class=\"example-header-image\"\r\n              style=\"background-image: url('/assets/img/faq.jpg');\"\r\n            ></div>\r\n            <mat-card-title>WHAT IS SPECIAL IN THIS APP, THAT OTHERS DO NOT PROVIDE?</mat-card-title>           \r\n          </mat-card-header>         \r\n          <mat-card-content>\r\n            <p>\r\n                This app provides you with maximum study material for free.\r\n            </p>\r\n          </mat-card-content>\r\n        </mat-card>\r\n      </div>\r\n      <div class=\"card\">\r\n        <mat-card class=\"example-card\">\r\n          <mat-card-header>\r\n            <div\r\n              mat-card-avatar\r\n              class=\"example-header-image\"\r\n              style=\"background-image: url('/assets/img/faq.jpg');\"\r\n            ></div>\r\n            <mat-card-title>WHO SHOULD DOWNLOAD THIS APP?</mat-card-title>           \r\n          </mat-card-header>         \r\n          <mat-card-content>\r\n            <p>\r\n                The GRE aspirants who want to score 300+, with ease must have this app in their android device.\r\n            </p>\r\n          </mat-card-content>\r\n        </mat-card>\r\n      </div>\r\n      <div class=\"card\">\r\n        <mat-card class=\"example-card\">\r\n          <mat-card-header>\r\n            <div\r\n              mat-card-avatar\r\n              class=\"example-header-image\"\r\n              style=\"background-image: url('/assets/img/faq.jpg');\"\r\n            ></div>\r\n            <mat-card-title>HOW MANY QUESTIONS ARE THEIR IN THIS APP OVERALL COMBINING ALL THE 3 SECTIONS?</mat-card-title>           \r\n          </mat-card-header>         \r\n          <mat-card-content>\r\n            <p>\r\n                There are more than 50 practice questions including all the sections, \r\n                which if you practice completely, your score in GRE will be very good.\r\n            </p>\r\n          </mat-card-content>\r\n        </mat-card>\r\n      </div>\r\n      <div class=\"card\">\r\n        <mat-card class=\"example-card\">\r\n          <mat-card-header>\r\n            <div\r\n              mat-card-avatar\r\n              class=\"example-header-image\"\r\n              style=\"background-image: url('/assets/img/faq.jpg');\"\r\n            ></div>\r\n            <mat-card-title>WHICH COUNTRY UNIVERSITIES INFORMATION I CAN GET?</mat-card-title>           \r\n          </mat-card-header>         \r\n          <mat-card-content>\r\n            <p>\r\n               Overall information about top USA and Canada universities are provided.\r\n            </p>\r\n          </mat-card-content>\r\n        </mat-card>\r\n      </div>\r\n</div>\r\n<footer></footer>","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-privacy-policies',\r\n  templateUrl: './privacy-policies.component.html',\r\n  styleUrls: ['./privacy-policies.component.css']\r\n})\r\nexport class PrivacyPoliciesComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<app-header></app-header>\r\n<div class=\"heading\">Privacy Policy</div>\r\n<div class=\"content\">\r\n    <div class=\"card\">\r\n        <mat-card class=\"example-card\">\r\n          <mat-card-header>            \r\n            <mat-card-title>Reservation of Rights</mat-card-title>           \r\n          </mat-card-header>         \r\n          <mat-card-content>\r\n            <p>\r\n                We reserve the right to request that you remove all links or any particular link to our Website. You approve to immediately remove all links to our Website upon request. We also reserve the right to amen these terms and conditions and it’s linking policy at any time. By continuously linking to our Website, you agree to be bound to and follow these linking terms and conditions.\r\n            </p>\r\n          </mat-card-content>\r\n        </mat-card>\r\n      </div>\r\n      <div class=\"card\">\r\n        <mat-card class=\"example-card\">\r\n          <mat-card-header>           \r\n            <mat-card-title>Removal of links from our website</mat-card-title>           \r\n          </mat-card-header>         \r\n          <mat-card-content>\r\n            <p>\r\n                If you find any link on our Website that is offensive for any reason, you are free to contact and inform us any moment. We will consider requests to remove links but we are not obligated to or so or to respond to you directly.\r\n\r\n                We do not ensure that the information on this website is correct, we do not warrant its completeness or accuracy; nor do we promise to ensure that the website remains available or that the material on the website is kept up to date.\r\n            </p>\r\n          </mat-card-content>\r\n        </mat-card>\r\n      </div>\r\n      <div class=\"card\">\r\n        <mat-card class=\"example-card\">\r\n          <mat-card-header>          \r\n            <mat-card-title>Disclaimer</mat-card-title>           \r\n          </mat-card-header>         \r\n          <mat-card-content>\r\n            <p>\r\n                To the maximum extent permitted by applicable law, we exclude all representations, warranties and conditions relating to our website and the use of this website. Nothing in this disclaimer will:\r\n\r\n                limit or exclude our or your liability for death or personal injury;\r\n                limit or exclude our or your liability for fraud or fraudulent misrepresentation;\r\n                limit any of our or your liabilities in any way that is not permitted under applicable law; or\r\n                exclude any of our or your liabilities that may not be excluded under applicable law.\r\n                The limitations and prohibitions of liability set in this Section and elsewhere in this disclaimer: (a) are subject to the preceding paragraph; and (b) govern all liabilities arising under the disclaimer, including liabilities arising in contract, in tort and for breach of statutory duty.\r\n                \r\n                As long as the website and the information and services on the website are provided free of charge, we will not be liable for any loss or damage of any nature.\r\n            </p>\r\n          </mat-card-content>\r\n        </mat-card>\r\n      </div>    \r\n</div>\r\n<footer></footer>","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-terms-and-conditions',\r\n  templateUrl: './terms-and-conditions.component.html',\r\n  styleUrls: ['./terms-and-conditions.component.css']\r\n})\r\nexport class TermsAndConditionsComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<app-header></app-header>\r\n<div class=\"heading\">Terms and Conditions</div>\r\n<div class=\"content\">\r\n    <div class=\"card\">\r\n        <mat-card class=\"example-card\">\r\n          <mat-card-header>            \r\n            <mat-card-title>Terms and Conditions</mat-card-title>           \r\n          </mat-card-header>         \r\n          <mat-card-content>\r\n            <p>\r\n              Welcome to GRE Prep!\r\n\r\n              These terms and conditions outline the rules and regulations for the use of GRE Complete Prep's Website, located at https://www.homefilescenter.com.\r\n              \r\n              By accessing this website we assume you accept these terms and conditions. Do not continue to use GRE Prep if you do not agree to take all of the terms and conditions stated on this page. Our Terms and Conditions were created with the help of the Terms And Conditions Generator and the Free Terms & Conditions Generator.\r\n              \r\n              The following terminology applies to these Terms and Conditions, Privacy Statement and Disclaimer Notice and all Agreements: \"Client\", \"You\" and \"Your\" refers to you, the person log on this website and compliant to the Company’s terms and conditions. \"The Company\", \"Ourselves\", \"We\", \"Our\" and \"Us\", refers to our Company. \"Party\", \"Parties\", or \"Us\", refers to both the Client and ourselves. All terms refer to the offer, acceptance and consideration of payment necessary to undertake the process of our assistance to the Client in the most appropriate manner for the express purpose of meeting the Client’s needs in respect of provision of the Company’s stated services, in accordance with and subject to, prevailing law of Netherlands. Any use of the above terminology or other words in the singular, plural, capitalization and/or he/she or they, are taken as interchangeable and therefore as referring to same.\r\n            </p>\r\n          </mat-card-content>\r\n        </mat-card>\r\n      </div>\r\n      <div class=\"card\">\r\n        <mat-card class=\"example-card\">\r\n          <mat-card-header>           \r\n            <mat-card-title>Cookies</mat-card-title>           \r\n          </mat-card-header>         \r\n          <mat-card-content>\r\n            <p>\r\n              We employ the use of cookies. By accessing GRE Prep, you agreed to use cookies in agreement with the GRE Complete Prep's Privacy Policy.\r\n<br/>\r\nMost interactive websites use cookies to let us retrieve the user’s details for each visit. Cookies are used by our website to enable the functionality of certain areas to make it easier for people visiting our website. Some of our affiliate/advertising partners may also use cookies.\r\n            </p>\r\n          </mat-card-content>\r\n        </mat-card>\r\n      </div>\r\n      <div class=\"card\">\r\n        <mat-card class=\"example-card\">\r\n          <mat-card-header>          \r\n            <mat-card-title>License</mat-card-title>           \r\n          </mat-card-header>         \r\n          <mat-card-content>\r\n            <p>\r\n              Unless otherwise stated, GRE Complete Prep and/or its licensors own the intellectual property rights for all material on GRE Prep. All intellectual property rights are reserved. You may access this from GRE Prep for your own personal use subjected to restrictions set in these terms and conditions.\r\n\r\n              You must not:\r\n              \r\n              Republish material from GRE Prep\r\n              Sell, rent or sub-license material from GRE Prep\r\n              Reproduce, duplicate or copy material from GRE Prep\r\n              Redistribute content from GRE Prep\r\n              This Agreement shall begin on the date hereof.\r\n              \r\n              Parts of this website offer an opportunity for users to post and exchange opinions and information in certain areas of the website. GRE Complete Prep does not filter, edit, publish or review Comments prior to their presence on the website. Comments do not reflect the views and opinions of GRE Complete Prep,its agents and/or affiliates. Comments reflect the views and opinions of the person who post their views and opinions. To the extent permitted by applicable laws, GRE Complete Prep shall not be liable for the Comments or for any liability, damages or expenses caused and/or suffered as a result of any use of and/or posting of and/or appearance of the Comments on this website.\r\n              \r\n              GRE Complete Prep reserves the right to monitor all Comments and to remove any Comments which can be considered inappropriate, offensive or causes breach of these Terms and Conditions.\r\n              \r\n              You warrant and represent that:\r\n              \r\n              You are entitled to post the Comments on our website and have all necessary licenses and consents to do so;\r\n              The Comments do not invade any intellectual property right, including without limitation copyright, patent or trademark of any third party;\r\n              The Comments do not contain any defamatory, libelous, offensive, indecent or otherwise unlawful material which is an invasion of privacy\r\n              The Comments will not be used to solicit or promote business or custom or present commercial activities or unlawful activity.\r\n              You hereby grant GRE Complete Prep a non-exclusive license to use, reproduce, edit and authorize others to use, reproduce and edit any of your Comments in any and all forms, formats or media.\r\n            </p>\r\n          </mat-card-content>\r\n        </mat-card>\r\n      </div>\r\n      <div class=\"card\">\r\n        <mat-card class=\"example-card\">\r\n          <mat-card-header>         \r\n            <mat-card-title>Hyperlinking to our Content</mat-card-title>           \r\n          </mat-card-header>         \r\n          <mat-card-content>\r\n            <p>\r\n              The following organizations may link to our Website without prior written approval:\r\n\r\n              Government agencies;\r\n              Search engines;\r\n              News organizations;\r\n              Online directory distributors may link to our Website in the same manner as they hyperlink to the Websites of other listed businesses; and\r\n              System wide Accredited Businesses except soliciting non-profit organizations, charity shopping malls, and charity fundraising groups which may not hyperlink to our Web site.\r\n              These organizations may link to our home page, to publications or to other Website information so long as the link: (a) is not in any way deceptive; (b) does not falsely imply sponsorship, endorsement or approval of the linking party and its products and/or services; and (c) fits within the context of the linking party’s site.\r\n              \r\n              We may consider and approve other link requests from the following types of organizations:\r\n              \r\n              commonly-known consumer and/or business information sources;\r\n              dot.com community sites;\r\n              associations or other groups representing charities;\r\n              online directory distributors;\r\n              internet portals;\r\n              accounting, law and consulting firms; and\r\n              educational institutions and trade associations.\r\n              We will approve link requests from these organizations if we decide that: (a) the link would not make us look unfavorably to ourselves or to our accredited businesses; (b) the organization does not have any negative records with us; (c) the benefit to us from the visibility of the hyperlink compensates the absence of GRE Complete Prep; and (d) the link is in the context of general resource information.\r\n              \r\n              These organizations may link to our home page so long as the link: (a) is not in any way deceptive; (b) does not falsely imply sponsorship, endorsement or approval of the linking party and its products or services; and (c) fits within the context of the linking party’s site.\r\n              \r\n              If you are one of the organizations listed in paragraph 2 above and are interested in linking to our website, you must inform us by sending an e-mail to GRE Complete Prep. Please include your name, your organization name, contact information as well as the URL of your site, a list of any URLs from which you intend to link to our Website, and a list of the URLs on our site to which you would like to link. Wait 2-3 weeks for a response.\r\n              \r\n              Approved organizations may hyperlink to our Website as follows:\r\n              \r\n              By use of our corporate name; or\r\n              By use of the uniform resource locator being linked to; or\r\n              By use of any other description of our Website being linked to that makes sense within the context and format of content on the linking party’s site.\r\n              No use of GRE Complete Prep's logo or other artwork will be allowed for linking absent a trademark license agreement.\r\n            </p>\r\n          </mat-card-content>\r\n        </mat-card>\r\n      </div>\r\n      <div class=\"card\">\r\n        <mat-card class=\"example-card\">\r\n          <mat-card-header>         \r\n            <mat-card-title>Content Liability</mat-card-title>           \r\n          </mat-card-header>         \r\n          <mat-card-content>\r\n            <p>\r\n              We shall not be hold responsible for any content that appears on your Website. You agree to protect and defend us against all claims that is rising on your Website. No link(s) should appear on any Website that may be interpreted as libelous, obscene or criminal, or which infringes, otherwise violates, or advocates the infringement or other violation of, any third party rights.\r\n            </p>\r\n          </mat-card-content>\r\n        </mat-card>\r\n      </div>      \r\n</div>\r\n<footer></footer>","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-success-stories',\r\n  templateUrl: './success-stories.component.html',\r\n  styleUrls: ['./success-stories.component.css'],\r\n  encapsulation: ViewEncapsulation.Emulated\r\n})\r\nexport class SuccessStoriesComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div style=\"background-color: #e7ebee; background-size: cover;\">\r\n  <app-header></app-header>\r\n  <div style=\"padding: 2%;\">\r\n    <div>\r\n      <h1 class=\"heading\">Success Stories</h1>\r\n    </div>\r\n    <div\r\n      fxLayout=\"column\"\r\n      fxLayoutGap=\"2%\"\r\n      fxLayoutAlign=\"center\"\r\n      class=\"topDiv\"\r\n    >\r\n      <div class=\"mat-elevation-z8\">\r\n        <mat-card>\r\n          <mat-card-header>\r\n            <div mat-card-avatar class=\"example-header-image\"></div>\r\n            <mat-card-title>Name: Akash Singh </mat-card-title>\r\n            <mat-card-subtitle\r\n              >GRE Score Before GREPrep: 303 <br />GRE Score After GREPrep:\r\n              315</mat-card-subtitle\r\n            >\r\n          </mat-card-header>\r\n          <p>\r\n            GREPrep was instrumental in teaching me new concepts for the GRE\r\n            that I hadn’t learned from previous prep materials. The study plans\r\n            had a great focus on both verbal and quant, allowing for better\r\n            development of each skill. The practice questions were phenomenal.\r\n            Especially the interface was so simple that there was no extra\r\n            effort required, complete focus was on studies. I went through all\r\n            of the practice questions, and all of the quizzes, twice! I also\r\n            utilized the word lists provided that helped me to enhance my\r\n            vocabulary, and reading comprehensions solidified my readiness even\r\n            further. I improved my score by 12 points that was just amazing, and\r\n            I solely attribute this to GREPrep.\r\n          </p>\r\n        </mat-card>\r\n      </div>\r\n      <div class=\"mat-elevation-z8\">\r\n        <mat-card>\r\n          <mat-card-header>\r\n            <div mat-card-avatar class=\"example-header-image\"></div>\r\n            <mat-card-title>Name: Kabir Singh </mat-card-title>\r\n            <mat-card-subtitle\r\n              >GRE SCORE BEFORE GREPrep: 311 <br />GRE Score After GREPrep:\r\n              329</mat-card-subtitle\r\n            >\r\n          </mat-card-header>\r\n          <p>\r\n            GREPrep is amazing. I went from not even knowing what the GRE was to\r\n            getting a great score in one month. I followed the 1 month study\r\n            plan and felt that GREPrep prepared me so well that I took my GRE a\r\n            month early and the result was astonishing. I got a 329 total, and\r\n            was so happy with my score I cried. I gave GRE before also by using\r\n            practice materials from other websites but after using GREPrep just\r\n            for one month my score increased by 18 points. GREPrep prepared me\r\n            so well, especially for the quant section which I really struggled\r\n            with in the beginning. They provide so great practice materials that\r\n            resemble the real GRE exam very closely and the mock test scores are\r\n            really the same as we get in the real GRE exam. I really can't thank\r\n            GREPrep enough. I came into GRE studying so nervous, clueless and\r\n            unprepared and came out with an amazing score I couldn't be happier\r\n            with. Thank you GREPrep!!!\r\n          </p>\r\n        </mat-card>\r\n      </div>\r\n      <div class=\"mat-elevation-z8\">\r\n        <mat-card>\r\n          <mat-card-header>\r\n            <div mat-card-avatar class=\"example-header-image\"></div>\r\n            <mat-card-title>Name: David Jones </mat-card-title>\r\n            <mat-card-subtitle\r\n              >GRE SCORE BEFORE GREPrep: Not given <br />GRE Score After\r\n              GREPrep: 324</mat-card-subtitle\r\n            >\r\n          </mat-card-header>\r\n          <p>\r\n            If I say GREPrep is THE BEST prep for GRE, you probably would be\r\n            thinking I am being boastful or perhaps trying to market GREPrep.\r\n            But one just cannot be modest while talking about it. If you are\r\n            preparing to take a GRE, GREPrep has to be the way. It is like a\r\n            one-stop-shop, which has all the materials one might need to ace in\r\n            GRE. The QUALITY of questions included in the study material are\r\n            unparalleled and are closest to the type and quality of questions\r\n            one sees in GRE. And if you are scared of the Verbal section, then\r\n            let me assure you, the materials are so well organized it will be a\r\n            piec of cakewalk. I had never given GRE exam before, so I was very\r\n            nervous since it was my first time. But after getting my score in\r\n            the mock test, my confidence was boosted, and trust me it was not\r\n            fake confidence since the actual score was exactly the same as the\r\n            score in the mock test. This proves that thier test is so accurate\r\n            to the real GRE examination. Moreover the best part of all, they\r\n            provide everything free of cost that is just superb. Thank you so\r\n            much GREPrep for helping me to get admit to my dream university.\r\n          </p>\r\n        </mat-card>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","// Author - Padmesh Donthu\r\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { Question } from '../models/question';\r\nimport { QuestionManagerService } from '../services/question-manager.service';\r\nimport { QuestionConfig } from '../models/question-config';\r\nimport { UserAnswers } from '../models/user-answers';\r\nimport { Answers } from '../models/answers';\r\nimport { UserService } from '../services/user.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-take-mock-test',\r\n  templateUrl: './take-mock-test.component.html',\r\n  styleUrls: [\r\n    '../../../node_modules/materialize-css/dist/css/materialize.min.css',\r\n    './take-mock-test.component.css',\r\n  ],\r\n  encapsulation: ViewEncapsulation.Emulated,\r\n})\r\nexport class TakeMockTestComponent implements OnInit {\r\n  // Class variables that are used in the html for reactivity\r\n  questions: Question[];\r\n  mode = 'quiz';\r\n  loading = true;\r\n\r\n  // Stores the final gre score based on the answers\r\n  greScore = 0;\r\n\r\n  // Stores all the user answers\r\n  userAnswers: UserAnswers = null;\r\n\r\n  // Setting the configuration for the Test\r\n  config: QuestionConfig = {\r\n    allowBack: true,\r\n    autoMove: false, // if true, it will move to next question automatically when answered.\r\n    duration: 7200, // indicates the time (in secs) in which quiz needs to be completed. 0 means unlimited.\r\n    pageSize: 1,\r\n    showClock: false,\r\n    showPager: true,\r\n    theme: 'none',\r\n  };\r\n\r\n  // These attributes are used\r\n  pager = {\r\n    index: 0,\r\n    size: 1,\r\n    count: 1,\r\n  };\r\n\r\n  // These attributes are used for creating a timer for the test\r\n  timer: any = null;\r\n  startTime: Date;\r\n  endTime: Date;\r\n  ellapsedTime = '00:00';\r\n  duration = '';\r\n\r\n  // Injecting services and router to the component\r\n  constructor(\r\n    private questionService: QuestionManagerService,\r\n    private userService: UserService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  // Gets all the questions available for the test when the component is initialised\r\n  ngOnInit(): void {\r\n    this.loadQuestions();\r\n  }\r\n\r\n  // Gets the questions for the quiz using the question service\r\n  loadQuestions() {\r\n    this.questionService.getQuestions().subscribe((data: Question[]) => {\r\n      this.questions = data;\r\n      this.loading = false;\r\n      this.pager.count = this.questions.length;\r\n      this.startTime = new Date();\r\n      this.ellapsedTime = '00:00';\r\n      this.timer = setInterval(() => {\r\n        this.tick();\r\n      }, 1000);\r\n      this.duration = this.parseTime(this.config.duration);\r\n    });\r\n  }\r\n\r\n  // A method which is used to increment the clock time\r\n  tick() {\r\n    const now = new Date();\r\n    const diff = (now.getTime() - this.startTime.getTime()) / 1000;\r\n    if (diff >= this.config.duration) {\r\n      this.onSubmit();\r\n    }\r\n    this.ellapsedTime = this.parseTime(diff);\r\n  }\r\n\r\n  // Converts the seconds to minutes and seconds\r\n  parseTime(totalSeconds: number) {\r\n    let mins: string | number = Math.floor(totalSeconds / 60);\r\n    let secs: string | number = Math.round(totalSeconds % 60);\r\n    mins = (mins < 10 ? '0' : '') + mins;\r\n    secs = (secs < 10 ? '0' : '') + secs;\r\n    return `${mins}:${secs}`;\r\n  }\r\n\r\n  // Used to get the next question based on the button click\r\n  get filteredQuestions() {\r\n    return this.questions\r\n      ? this.questions.slice(\r\n          this.pager.index,\r\n          this.pager.index + this.pager.size\r\n        )\r\n      : [];\r\n  }\r\n\r\n  // Used for automatically moving to next question once user selects the option\r\n  onSelect(question: Question) {\r\n    if (this.config.autoMove) {\r\n      this.goTo(this.pager.index + 1, question);\r\n    }\r\n  }\r\n\r\n  // This method is used to move the user to the question based on the button click\r\n  goTo(index: number, question: Question) {\r\n    var flag = false;\r\n    var confirmation = false;\r\n    if (this.userAnswers != null) {\r\n      for (var i = 0; i < this.userAnswers.questionAnswers.length; i++) {\r\n        if (\r\n          this.userAnswers.questionAnswers[i].questionId == question.questionId\r\n        ) {\r\n          if (this.userAnswers.questionAnswers[i].answers.length == 0) {\r\n            flag = false;\r\n            break;\r\n          } else {\r\n            flag = true;\r\n            confirmation = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Show alert if the user has not answered the current question\r\n    if (!flag) {\r\n      confirmation = confirm(\r\n        'Caution: You have not answered this question.\\n Do you want to continue?'\r\n      );\r\n    }\r\n\r\n    if (confirmation) {\r\n      if (index >= 0 && index < this.pager.count) {\r\n        this.pager.index = index;\r\n        this.mode = 'quiz';\r\n      }\r\n    }\r\n  }\r\n\r\n  //  Submits the quiz if the timer expires or if the user clicks on submit button\r\n  onSubmit() {\r\n    const now = new Date();\r\n    const diff = (now.getTime() - this.startTime.getTime()) / 1000;\r\n    var confirmation = true;\r\n    if (diff < this.config.duration) {\r\n      if (\r\n        this.userAnswers == null ||\r\n        this.userAnswers.questionAnswers.length < this.questions.length\r\n      ) {\r\n        // Show alert if some questions are unanswered\r\n        confirmation = confirm(\r\n          'One or more questions are unanswered. Would you still wish to submit the test?'\r\n        );\r\n      } else {\r\n        // Show alert to ask for the user to confirm if the user wishes to submit the quiz\r\n        confirmation = confirm(\r\n          'Are you sure you want to submit the test? You can review your answers before submitting!'\r\n        );\r\n      }\r\n    }\r\n\r\n    // If the user confirms, submit the quiz, save the answers and calculate the score\r\n    if (confirmation) {\r\n      this.mode = 'result';\r\n      this.fillUnansweredQuestions();\r\n      this.questionService\r\n        .saveUserAnswers(this.userAnswers)\r\n        .subscribe((data: any) => {\r\n          this.calculateGreScore();\r\n          this.saveUserGreScore(data);\r\n        });\r\n    }\r\n  }\r\n\r\n  // Method to save the gre score which is calculated to the database\r\n  saveUserGreScore(data: any) {\r\n    this.questionService\r\n      .saveUserGreScore(this.userService.getUserEmail(), this.greScore, data)\r\n      .subscribe((data: any) => {});\r\n  }\r\n\r\n  // Method to calculate the gre score based on the user answers\r\n  calculateGreScore() {\r\n    var unitQuestionScore = (340 * 1.0) / this.questions.length;\r\n    var totalScore = 0;\r\n    var flag = true;\r\n    for (var i = 0; i < this.userAnswers.questionAnswers.length; i++) {\r\n      var userAnswers = this.userAnswers.questionAnswers[i].answers;\r\n      var actualAnswers = this.userAnswers.questionAnswers[i].actualAnswers;\r\n      if (userAnswers.length != actualAnswers.length) {\r\n        flag = false;\r\n      } else {\r\n        flag = true;\r\n        for (var j = 0; j < actualAnswers.length; j++) {\r\n          if (userAnswers.indexOf(parseInt(actualAnswers[j])) < 0) {\r\n            flag = false;\r\n          }\r\n        }\r\n      }\r\n      if (flag) {\r\n        totalScore += unitQuestionScore;\r\n      }\r\n    }\r\n    this.greScore = totalScore;\r\n  }\r\n\r\n  // Save the answer after every question selection by the user\r\n  singleChoiceAnswer(value: number, question: Question) {\r\n    var flag = false;\r\n    var emailId = this.userService.getUserEmail();\r\n\r\n    if (this.userAnswers == null) {\r\n      this.userAnswers = new UserAnswers();\r\n      this.userAnswers.userId = emailId;\r\n      this.userAnswers.testType = 'MT';\r\n      var questionAnswers = new Answers();\r\n      this.userAnswers.questionAnswers = [];\r\n      questionAnswers.questionId = question.questionId;\r\n      questionAnswers.questionTitle = question.title;\r\n      questionAnswers.actualAnswers = [...question.answer];\r\n      questionAnswers.options = [...question.options];\r\n      questionAnswers.answers = [];\r\n      questionAnswers.answers.push(value);\r\n      this.userAnswers.questionAnswers.push(questionAnswers);\r\n    } else {\r\n      for (var i = 0; i < this.userAnswers.questionAnswers.length; i++) {\r\n        if (\r\n          this.userAnswers.questionAnswers[i].questionId == question.questionId\r\n        ) {\r\n          this.userAnswers.questionAnswers[i].answers = [];\r\n          this.userAnswers.questionAnswers[i].answers.push(value);\r\n          flag = true;\r\n          break;\r\n        }\r\n      }\r\n      if (!flag) {\r\n        var questionAnswers = new Answers();\r\n        questionAnswers.questionId = question.questionId;\r\n        questionAnswers.actualAnswers = [...question.answer];\r\n        questionAnswers.options = [...question.options];\r\n        questionAnswers.questionTitle = question.title;\r\n        questionAnswers.answers = [];\r\n        questionAnswers.answers.push(value);\r\n        this.userAnswers.questionAnswers.push(questionAnswers);\r\n      }\r\n    }\r\n  }\r\n\r\n  // This method tells the html page if the current option is checked or not for a question\r\n  getStatus(value: number, question: Question): Boolean {\r\n    if (this.userAnswers == null) {\r\n      return false;\r\n    } else {\r\n      for (var i = 0; i < this.userAnswers.questionAnswers.length; i++) {\r\n        if (\r\n          this.userAnswers.questionAnswers[i].questionId == question.questionId\r\n        ) {\r\n          if (this.userAnswers.questionAnswers[i].answers.indexOf(value) > -1) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Save the answer after every question selection by the user\r\n  multiChoiceAnswer(value: number, question: Question, event: any) {\r\n    var flag = false;\r\n    var emailId = this.userService.getUserEmail();\r\n\r\n    if (event.checked) {\r\n      if (this.userAnswers == null) {\r\n        this.userAnswers = new UserAnswers();\r\n        this.userAnswers.userId = emailId;\r\n        this.userAnswers.testType = 'MT';\r\n        var questionAnswers = new Answers();\r\n        this.userAnswers.questionAnswers = [];\r\n        questionAnswers.questionId = question.questionId;\r\n        questionAnswers.actualAnswers = [...question.answer];\r\n        questionAnswers.options = [...question.options];\r\n        questionAnswers.questionTitle = question.title;\r\n        questionAnswers.answers = [];\r\n        questionAnswers.answers.push(value);\r\n        this.userAnswers.questionAnswers.push(questionAnswers);\r\n      } else {\r\n        for (var i = 0; i < this.userAnswers.questionAnswers.length; i++) {\r\n          if (\r\n            this.userAnswers.questionAnswers[i].questionId ==\r\n            question.questionId\r\n          ) {\r\n            this.userAnswers.questionAnswers[i].answers.push(value);\r\n            flag = true;\r\n            break;\r\n          }\r\n        }\r\n        if (!flag) {\r\n          var questionAnswers = new Answers();\r\n          questionAnswers.questionId = question.questionId;\r\n          questionAnswers.actualAnswers = [...question.answer];\r\n          questionAnswers.options = [...question.options];\r\n          questionAnswers.questionTitle = question.title;\r\n          questionAnswers.answers = [];\r\n          questionAnswers.answers.push(value);\r\n          this.userAnswers.questionAnswers.push(questionAnswers);\r\n        }\r\n      }\r\n    } else {\r\n      for (var i = 0; i < this.userAnswers.questionAnswers.length; i++) {\r\n        if (\r\n          this.userAnswers.questionAnswers[i].questionId == question.questionId\r\n        ) {\r\n          this.userAnswers.questionAnswers[i].answers.splice(\r\n            this.userAnswers.questionAnswers[i].answers.indexOf(value),\r\n            1\r\n          );\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Quits the test and redirects to gre page\r\n  quitTest() {\r\n    if (\r\n      confirm(\r\n        'Are you sure you want to quit the test? You still have enough time left!'\r\n      )\r\n    ) {\r\n      this.router.navigate(['/gre']);\r\n    }\r\n  }\r\n\r\n  // Redirects to gre page when the user clicks on Back to GRE\r\n  goToGreHome() {\r\n    this.router.navigate(['/gre']);\r\n  }\r\n\r\n  // Method to fill any unanswered question and set the answer to a default value that is -1\r\n  fillUnansweredQuestions() {\r\n    var flag = false;\r\n    for (var i = 0; i < this.questions.length; i++) {\r\n      flag = false;\r\n      for (var j = 0; j < this.userAnswers.questionAnswers.length; j++) {\r\n        if (\r\n          this.questions[i].questionId ==\r\n          this.userAnswers.questionAnswers[j].questionId\r\n        ) {\r\n          flag = true;\r\n        }\r\n      }\r\n      if (!flag) {\r\n        var questionAnswers = new Answers();\r\n        questionAnswers.questionId = this.questions[i].questionId;\r\n        questionAnswers.questionTitle = this.questions[i].title;\r\n        questionAnswers.actualAnswers = [...this.questions[i].answer];\r\n        questionAnswers.options = [...this.questions[i].options];\r\n        questionAnswers.answers = [];\r\n        questionAnswers.answers.push(-1);\r\n        this.userAnswers.questionAnswers.push(questionAnswers);\r\n      }\r\n    }\r\n  }\r\n}\r\n","<!--Author - Padmesh Donthu-->\r\n<div style=\"background-color: #e7ebee; min-height: 100%;\">\r\n  <app-header></app-header>\r\n  <div class=\"loading-indicator\" *ngIf=\"loading\">\r\n    <mat-spinner></mat-spinner>\r\n  </div>\r\n  <div\r\n    class=\"container\"\r\n    style=\"padding-top: 20px; padding-bottom: 20px;\"\r\n    *ngIf=\"!loading\"\r\n  >\r\n    <div class=\"row\">\r\n      <div class=\"col s12\">\r\n        <div *ngIf=\"mode == 'quiz'\">\r\n          <div *ngFor=\"let question of filteredQuestions\">\r\n            <div class=\"row\">\r\n              <div\r\n                class=\"col s3\"\r\n                style=\"\r\n                  background-color: #283593 !important;\r\n                  padding: 10px;\r\n                  color: white;\r\n                  font-size: medium;\r\n                \"\r\n              >\r\n                Question {{ pager.index + 1 }} of {{ pager.count }}\r\n              </div>\r\n              <div\r\n                *ngIf=\"config.duration\"\r\n                class=\"col s3\"\r\n                style=\"\r\n                  background-color: #283593 !important;\r\n                  padding: 10px;\r\n                  color: white;\r\n                  float: right;\r\n                  font-size: medium;\r\n                \"\r\n              >\r\n                Time: {{ ellapsedTime }} / {{ duration }}\r\n              </div>\r\n            </div>\r\n            <div>{{ pager.index + 1 }}. {{ question.title }}</div>\r\n            <div *ngIf=\"question.image != null\" class=\"center-align\">\r\n              <br />\r\n              <img src=\"{{ question.image }}\" />\r\n            </div>\r\n            <br />\r\n            <div class=\"row\">\r\n              <div class=\"col s12\">\r\n                <div *ngIf=\"question.answer.length == 1\">\r\n                  <mat-radio-group>\r\n                    <mat-radio-button\r\n                      *ngFor=\"let option of question.options; let a = index\"\r\n                      [value]=\"a\"\r\n                      class=\"col s12\"\r\n                      [checked]=\"getStatus(a, question)\"\r\n                      (change)=\"singleChoiceAnswer(a, question)\"\r\n                    >\r\n                      {{ option }}\r\n                    </mat-radio-button>\r\n                  </mat-radio-group>\r\n                </div>\r\n                <div *ngIf=\"question.answer.length != 1\">\r\n                  <div *ngFor=\"let option of question.options; let j = index\">\r\n                    <mat-checkbox\r\n                      style=\"margin-top: 12px;\"\r\n                      class=\"col s12\"\r\n                      color=\"accent\"\r\n                      [checked]=\"getStatus(j, question)\"\r\n                      (change)=\"multiChoiceAnswer(j, question, $event)\"\r\n                    >\r\n                      {{ option }}\r\n                    </mat-checkbox>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <br />\r\n            <hr />\r\n            <div class=\"row\" style=\"margin-top: 20px;\">\r\n              <div class=\"col s3\">\r\n                <button\r\n                  class=\"btn waves-effect waves-light indigo darken-3\"\r\n                  *ngIf=\"config.allowBack\"\r\n                  (click)=\"goTo(0, question)\"\r\n                >\r\n                  First\r\n                </button>\r\n              </div>\r\n              <div class=\"col s3\">\r\n                <button\r\n                  class=\"btn waves-effect waves-light indigo darken-3\"\r\n                  *ngIf=\"config.allowBack\"\r\n                  (click)=\"goTo(pager.index - 1, question)\"\r\n                >\r\n                  Previous\r\n                </button>\r\n              </div>\r\n              <div class=\"col s3\">\r\n                <button\r\n                  class=\"btn waves-effect waves-light indigo darken-3\"\r\n                  *ngIf=\"config.allowBack\"\r\n                  (click)=\"goTo(pager.index + 1, question)\"\r\n                >\r\n                  Next\r\n                </button>\r\n              </div>\r\n              <div class=\"col s3\">\r\n                <button\r\n                  class=\"btn waves-effect waves-light indigo darken-3\"\r\n                  *ngIf=\"config.allowBack\"\r\n                  (click)=\"goTo(pager.count - 1, question)\"\r\n                >\r\n                  Last\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\" *ngIf=\"mode != 'result'\">\r\n          <hr />\r\n          <br />\r\n          <div class=\"center-align\">\r\n            <div *ngIf=\"mode != 'result' && pager.count - 1 == pager.index\">\r\n              <button\r\n                class=\"btn waves-effect waves-light\"\r\n                color=\"primary\"\r\n                (click)=\"onSubmit()\"\r\n              >\r\n                Submit Your Answers\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div *ngIf=\"mode == 'result'\">\r\n          <div class=\"container\">\r\n            <div class=\"row\">\r\n              <div class=\"center-align\">\r\n                <div\r\n                  class=\"card hoverable blue-grey darken-1\"\r\n                  style=\"padding: 20px;\"\r\n                >\r\n                  <div class=\"card-content white-text\">\r\n                    <span class=\"card-title\">Mock Test Score</span>\r\n                    <p>Your GRE Score is {{ greScore }}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"center-align\">\r\n                <button\r\n                  class=\"btn waves-effect waves-light indigo darken-3\"\r\n                  (click)=\"goToGreHome()\"\r\n                >\r\n                  Back to GRE\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\" *ngIf=\"mode != 'result'\">\r\n          <div class=\"center-align\">\r\n            <button\r\n              class=\"btn waves-effect waves-light red darken-3\"\r\n              (click)=\"quitTest()\"\r\n            >\r\n              Quit your Test\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\nimport { Question } from '../models/question';\nimport { UserAnswers } from '../models/user-answers';\nimport { QuestionConfig } from '../models/question-config';\nimport { QuestionManagerService } from '../services/question-manager.service';\nimport { UserService } from '../services/user.service';\nimport { Router } from '@angular/router';\nimport { Answers } from '../models/answers';\n\n@Component({\n  selector: 'app-take-quant-test',\n  templateUrl: './take-quant-test.component.html',\n  styleUrls: [\n    '../../../node_modules/materialize-css/dist/css/materialize.min.css',\n    './take-quant-test.component.css',\n  ],\n})\nexport class TakeQuantTestComponent implements OnInit {\n  // Class variables that are used in the html for reactivity\n  questions: Question[];\n  mode = 'quiz';\n  loading = true;\n\n  // Stores the final gre score based on the answers\n  quantPracticeScore = 0;\n\n  // Stores all the user answers\n  userAnswers: UserAnswers = null;\n\n  // Setting the configuration for the Test\n  config: QuestionConfig = {\n    allowBack: true,\n    autoMove: false, // if true, it will move to next question automatically when answered.\n    duration: 0, // indicates the time (in secs) in which quiz needs to be completed. 0 means unlimited.\n    pageSize: 1,\n    showClock: false,\n    showPager: true,\n    theme: 'none',\n  };\n\n  // These attributes are used\n  pager = {\n    index: 0,\n    size: 1,\n    count: 1,\n  };\n\n  // Injecting services and router to the component\n  constructor(\n    private questionService: QuestionManagerService,\n    private userService: UserService,\n    private router: Router\n  ) {}\n\n  // Gets all the questions available for the test when the component is initialised\n  ngOnInit(): void {\n    this.loadQuestions();\n  }\n\n  // Gets the questions for the quiz using the question service\n  loadQuestions() {\n    this.questionService\n      .getQuestionsForVerbalAndQuantPractice()\n      .subscribe((data: Question[]) => {\n        this.questions = data;\n        this.loading = false;\n        this.pager.count = this.questions.length;\n      });\n  }\n\n  // Used to get the next question based on the button click\n  get filteredQuestions() {\n    return this.questions\n      ? this.questions.slice(\n          this.pager.index,\n          this.pager.index + this.pager.size\n        )\n      : [];\n  }\n\n  // Used for automatically moving to next question once user selects the option\n  onSelect(question: Question) {\n    if (this.config.autoMove) {\n      this.goTo(this.pager.index + 1, question);\n    }\n  }\n\n  // This method is used to move the user to the question based on the button click\n  goTo(index: number, question: Question) {\n    var flag = false;\n    var confirmation = false;\n    if (this.userAnswers != null) {\n      for (var i = 0; i < this.userAnswers.questionAnswers.length; i++) {\n        if (\n          this.userAnswers.questionAnswers[i].questionId == question.questionId\n        ) {\n          if (this.userAnswers.questionAnswers[i].answers.length == 0) {\n            flag = false;\n            break;\n          } else {\n            flag = true;\n            confirmation = true;\n            break;\n          }\n        }\n      }\n    }\n\n    // Show alert if the user has not answered the current question\n    if (!flag) {\n      confirmation = confirm(\n        'Caution: You have not answered this question.\\n Do you want to continue?'\n      );\n    }\n\n    if (confirmation) {\n      if (index >= 0 && index < this.pager.count) {\n        this.pager.index = index;\n        this.mode = 'quiz';\n      }\n    }\n  }\n\n  //  Submits the quiz if the timer expires or if the user clicks on submit button\n  onSubmit() {\n    var confirmation = true;\n    if (\n      this.userAnswers == null ||\n      this.userAnswers.questionAnswers.length < this.questions.length\n    ) {\n      // Show alert if some questions are unanswered\n      confirmation = confirm(\n        'One or more questions are unanswered. Would you still wish to submit the test?'\n      );\n    } else {\n      // Show alert to ask for the user to confirm if the user wishes to submit the quiz\n      confirmation = confirm(\n        'Are you sure you want to submit the test? You can review your answers before submitting!'\n      );\n    }\n\n    // If the user confirms, submit the quiz, save the answers and calculate the score\n    if (confirmation) {\n      this.mode = 'result';\n      this.fillUnansweredQuestions();\n      this.questionService\n        .saveUserAnswers(this.userAnswers)\n        .subscribe((data: any) => {\n          this.calculateQuantPracticeScore();\n          this.saveUserQuantPracticeScore(data);\n        });\n    }\n  }\n\n  // Method to save the gre score which is calculated to the database\n  saveUserQuantPracticeScore(data: any) {\n    this.questionService\n      .saveUserQuantPracticeScore(\n        this.userService.getUserEmail(),\n        this.quantPracticeScore,\n        data\n      )\n      .subscribe((data: any) => {});\n  }\n\n  // Method to calculate the quantitative practice test score based on the user answers\n  calculateQuantPracticeScore() {\n    var unitQuestionScore = 1;\n    var totalScore = 0;\n    var flag = true;\n\n    for (var i = 0; i < this.userAnswers.questionAnswers.length; i++) {\n      var userAnswers = this.userAnswers.questionAnswers[i].answers;\n      var actualAnswers = this.userAnswers.questionAnswers[i].actualAnswers;\n      if (userAnswers.length != actualAnswers.length) {\n        flag = false;\n      } else {\n        flag = true;\n        for (var j = 0; j < actualAnswers.length; j++) {\n          if (userAnswers.indexOf(parseInt(actualAnswers[j])) < 0) {\n            flag = false;\n          }\n        }\n      }\n      if (flag) {\n        totalScore += unitQuestionScore;\n      }\n    }\n\n    this.quantPracticeScore = totalScore;\n  }\n\n  // Save the answer after every question selection by the user\n  singleChoiceAnswer(value: number, question: Question) {\n    var flag = false;\n    var emailId = this.userService.getUserEmail();\n\n    if (this.userAnswers == null) {\n      this.userAnswers = new UserAnswers();\n      this.userAnswers.userId = emailId;\n      this.userAnswers.testType = this.questionService.questionType;\n      var questionAnswers = new Answers();\n      this.userAnswers.questionAnswers = [];\n      questionAnswers.questionId = question.questionId;\n      questionAnswers.actualAnswers = [...question.answer];\n      questionAnswers.options = [...question.options];\n      questionAnswers.questionTitle = question.title;\n      questionAnswers.answers = [];\n      questionAnswers.answers.push(value);\n      this.userAnswers.questionAnswers.push(questionAnswers);\n    } else {\n      for (var i = 0; i < this.userAnswers.questionAnswers.length; i++) {\n        if (\n          this.userAnswers.questionAnswers[i].questionId == question.questionId\n        ) {\n          this.userAnswers.questionAnswers[i].answers = [];\n          this.userAnswers.questionAnswers[i].answers.push(value);\n          flag = true;\n          break;\n        }\n      }\n      if (!flag) {\n        var questionAnswers = new Answers();\n        questionAnswers.questionId = question.questionId;\n        questionAnswers.actualAnswers = [...question.answer];\n        questionAnswers.options = [...question.options];\n        questionAnswers.questionTitle = question.title;\n        questionAnswers.answers = [];\n        questionAnswers.answers.push(value);\n        this.userAnswers.questionAnswers.push(questionAnswers);\n      }\n    }\n  }\n\n  // This method tells the html page if the current option is checked or not for a question\n  getStatus(value: number, question: Question): Boolean {\n    if (this.userAnswers == null) {\n      return false;\n    } else {\n      for (var i = 0; i < this.userAnswers.questionAnswers.length; i++) {\n        if (\n          this.userAnswers.questionAnswers[i].questionId == question.questionId\n        ) {\n          if (this.userAnswers.questionAnswers[i].answers.indexOf(value) > -1) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }\n\n  // Save the answer after every question selection by the user\n  multiChoiceAnswer(value: number, question: Question, event: any) {\n    var flag = false;\n    var emailId = this.userService.getUserEmail();\n\n    if (event.checked) {\n      if (this.userAnswers == null) {\n        this.userAnswers = new UserAnswers();\n        this.userAnswers.userId = emailId;\n        this.userAnswers.testType = this.questionService.questionType;\n        var questionAnswers = new Answers();\n        this.userAnswers.questionAnswers = [];\n        questionAnswers.actualAnswers = [...question.answer];\n        questionAnswers.options = [...question.options];\n        questionAnswers.questionTitle = question.title;\n        questionAnswers.questionId = question.questionId;\n        questionAnswers.answers = [];\n        questionAnswers.answers.push(value);\n        this.userAnswers.questionAnswers.push(questionAnswers);\n      } else {\n        for (var i = 0; i < this.userAnswers.questionAnswers.length; i++) {\n          if (\n            this.userAnswers.questionAnswers[i].questionId ==\n            question.questionId\n          ) {\n            this.userAnswers.questionAnswers[i].answers.push(value);\n            flag = true;\n            break;\n          }\n        }\n        if (!flag) {\n          var questionAnswers = new Answers();\n          questionAnswers.questionId = question.questionId;\n          questionAnswers.actualAnswers = [...question.answer];\n          questionAnswers.options = [...question.options];\n          questionAnswers.questionTitle = question.title;\n          questionAnswers.answers = [];\n          questionAnswers.answers.push(value);\n          this.userAnswers.questionAnswers.push(questionAnswers);\n        }\n      }\n    } else {\n      for (var i = 0; i < this.userAnswers.questionAnswers.length; i++) {\n        if (\n          this.userAnswers.questionAnswers[i].questionId == question.questionId\n        ) {\n          this.userAnswers.questionAnswers[i].answers.splice(\n            this.userAnswers.questionAnswers[i].answers.indexOf(value),\n            1\n          );\n          break;\n        }\n      }\n    }\n  }\n\n  // Quits the test and redirects to gre page\n  quitTest() {\n    if (\n      confirm(\n        'Are you sure you want to quit the test? You still have enough time left!'\n      )\n    ) {\n      this.router.navigate(['/gre']);\n    }\n  }\n\n  // Redirects to gre page when the user clicks on Back to GRE\n  goToGreHome() {\n    this.router.navigate(['/gre']);\n  }\n\n  // Method to fill any unanswered question and set the answer to a default value that is -1\n  fillUnansweredQuestions() {\n    var flag = false;\n    for (var i = 0; i < this.questions.length; i++) {\n      flag = false;\n      for (var j = 0; j < this.userAnswers.questionAnswers.length; j++) {\n        if (\n          this.questions[i].questionId ==\n          this.userAnswers.questionAnswers[j].questionId\n        ) {\n          flag = true;\n        }\n      }\n      if (!flag) {\n        var questionAnswers = new Answers();\n        questionAnswers.questionId = this.questions[i].questionId;\n        questionAnswers.actualAnswers = [...this.questions[i].answer];\n        questionAnswers.options = [...this.questions[i].options];\n        questionAnswers.questionTitle = this.questions[i].title;\n        questionAnswers.answers = [];\n        questionAnswers.answers.push(-1);\n        this.userAnswers.questionAnswers.push(questionAnswers);\n      }\n    }\n  }\n}\n","<!--Author - Padmesh Donthu-->\n<div style=\"background-color: #e7ebee; min-height: 100%;\">\n    <app-header></app-header>\n    <div class=\"loading-indicator\" *ngIf=\"loading\">\n      <mat-spinner></mat-spinner>\n    </div>\n    <div\n      class=\"container\"\n      style=\"padding-top: 20px; padding-bottom: 20px;\"\n      *ngIf=\"!loading\"\n    >\n      <div class=\"row\">\n        <div class=\"col s12\">\n          <div *ngIf=\"mode == 'quiz'\">\n            <div *ngFor=\"let question of filteredQuestions\">\n              <div class=\"row\">\n                <div\n                  class=\"col s3\"\n                  style=\"\n                    background-color: #283593 !important;\n                    padding: 10px;\n                    color: white;\n                    font-size: medium;\n                  \"\n                >\n                  Question {{ pager.index + 1 }} of {{ pager.count }}\n                </div>\n              </div>\n              <div>{{ pager.index + 1 }}. {{ question.title }}</div>\n              <div *ngIf=\"question.image != null\" class=\"center-align\">\n                <br />\n                <img src=\"{{ question.image }}\" />\n              </div>\n              <br />\n              <div class=\"row\">\n                <div class=\"col s12\">\n                  <div *ngIf=\"question.answer.length == 1\">\n                    <mat-radio-group>\n                      <mat-radio-button\n                        *ngFor=\"let option of question.options; let a = index\"\n                        [value]=\"a\"\n                        class=\"col s12\"\n                        [checked]=\"getStatus(a, question)\"\n                        (change)=\"singleChoiceAnswer(a, question)\"\n                      >\n                        {{ option }}\n                      </mat-radio-button>\n                    </mat-radio-group>\n                  </div>\n                  <div *ngIf=\"question.answer.length != 1\">\n                    <div *ngFor=\"let option of question.options; let j = index\">\n                      <mat-checkbox\n                        style=\"margin-top: 12px;\"\n                        class=\"col s12\"\n                        color=\"accent\"\n                        [checked]=\"getStatus(j, question)\"\n                        (change)=\"multiChoiceAnswer(j, question, $event)\"\n                      >\n                        {{ option }}\n                      </mat-checkbox>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <br />\n              <hr />\n              <div class=\"row\" style=\"margin-top: 20px;\">\n                <div class=\"col s3\">\n                  <button\n                    class=\"btn waves-effect waves-light indigo darken-3\"\n                    *ngIf=\"config.allowBack\"\n                    (click)=\"goTo(0, question)\"\n                  >\n                    First\n                  </button>\n                </div>\n                <div class=\"col s3\">\n                  <button\n                    class=\"btn waves-effect waves-light indigo darken-3\"\n                    *ngIf=\"config.allowBack\"\n                    (click)=\"goTo(pager.index - 1, question)\"\n                  >\n                    Previous\n                  </button>\n                </div>\n                <div class=\"col s3\">\n                  <button\n                    class=\"btn waves-effect waves-light indigo darken-3\"\n                    *ngIf=\"config.allowBack\"\n                    (click)=\"goTo(pager.index + 1, question)\"\n                  >\n                    Next\n                  </button>\n                </div>\n                <div class=\"col s3\">\n                  <button\n                    class=\"btn waves-effect waves-light indigo darken-3\"\n                    *ngIf=\"config.allowBack\"\n                    (click)=\"goTo(pager.count - 1, question)\"\n                  >\n                    Last\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" *ngIf=\"mode != 'result'\">\n            <hr />\n            <br />\n            <div class=\"center-align\">\n              <div *ngIf=\"mode != 'result' && pager.count - 1 == pager.index\">\n                <button\n                  class=\"btn waves-effect waves-light\"\n                  color=\"primary\"\n                  (click)=\"onSubmit()\"\n                >\n                  Submit Your Answers\n                </button>\n              </div>\n            </div>\n          </div>\n          <div *ngIf=\"mode == 'result'\">\n            <div class=\"container\">\n              <div class=\"row\">\n                <div class=\"center-align\">\n                  <div\n                    class=\"card hoverable blue-grey darken-1\"\n                    style=\"padding: 20px;\"\n                  >\n                    <div class=\"card-content white-text\">\n                      <span class=\"card-title\">Quantitative Practice Score</span>\n                      <p>Your Score is {{ quantPracticeScore }}</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"row\">\n                <div class=\"center-align\">\n                  <button\n                    class=\"btn waves-effect waves-light indigo darken-3\"\n                    (click)=\"goToGreHome()\"\n                  >\n                    Back to GRE\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" *ngIf=\"mode != 'result'\">\n            <div class=\"center-align\">\n              <button\n                class=\"btn waves-effect waves-light red darken-3\"\n                (click)=\"quitTest()\"\n              >\n                Quit your Test\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  ","// Author - Padmesh Donthu\r\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { Question } from '../models/question';\r\nimport { QuestionManagerService } from '../services/question-manager.service';\r\nimport { QuestionConfig } from '../models/question-config';\r\nimport { UserAnswers } from '../models/user-answers';\r\nimport { Answers } from '../models/answers';\r\nimport { UserService } from '../services/user.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-take-quiz',\r\n  templateUrl: './take-quiz.component.html',\r\n  styleUrls: [\r\n    '../../../node_modules/materialize-css/dist/css/materialize.min.css',\r\n    './take-quiz.component.css',\r\n  ],\r\n  encapsulation: ViewEncapsulation.Emulated,\r\n})\r\nexport class TakeQuizComponent implements OnInit {\r\n  // Class variables that are used in the html for reactivity\r\n  questions: Question[];\r\n  mode = 'quiz';\r\n  loading = true;\r\n\r\n  // Stores the final gre score based on the answers\r\n  quizScore = 0;\r\n\r\n  // Stores all the user answers\r\n  userAnswers: UserAnswers = null;\r\n\r\n  // Setting the configuration for the Test\r\n  config: QuestionConfig = {\r\n    allowBack: true,\r\n    autoMove: false, // if true, it will move to next question automatically when answered.\r\n    duration: 0, // indicates the time (in secs) in which quiz needs to be completed. 0 means unlimited.\r\n    pageSize: 1,\r\n    showClock: false,\r\n    showPager: true,\r\n    theme: 'none',\r\n  };\r\n\r\n  // These attributes are used\r\n  pager = {\r\n    index: 0,\r\n    size: 1,\r\n    count: 1,\r\n  };\r\n\r\n  // Injecting services and router to the component\r\n  constructor(\r\n    private questionService: QuestionManagerService,\r\n    private userService: UserService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  // Gets all the questions available for the test when the component is initialised\r\n  ngOnInit(): void {\r\n    this.loadQuestions();\r\n  }\r\n\r\n  // Gets the questions for the quiz using the question service\r\n  loadQuestions() {\r\n    this.questionService.getQuestionsForQuiz().subscribe((data: Question[]) => {\r\n      this.questions = data;\r\n      this.loading = false;\r\n      this.pager.count = this.questions.length;\r\n    });\r\n  }\r\n\r\n  // Used to get the next question based on the button click\r\n  get filteredQuestions() {\r\n    return this.questions\r\n      ? this.questions.slice(\r\n          this.pager.index,\r\n          this.pager.index + this.pager.size\r\n        )\r\n      : [];\r\n  }\r\n\r\n  // Used for automatically moving to next question once user selects the option\r\n  onSelect(question: Question) {\r\n    if (this.config.autoMove) {\r\n      this.goTo(this.pager.index + 1, question);\r\n    }\r\n  }\r\n\r\n  // This method is used to move the user to the question based on the button click\r\n  goTo(index: number, question: Question) {\r\n    var flag = false;\r\n    var confirmation = false;\r\n    if (this.userAnswers != null) {\r\n      for (var i = 0; i < this.userAnswers.questionAnswers.length; i++) {\r\n        if (\r\n          this.userAnswers.questionAnswers[i].questionId == question.questionId\r\n        ) {\r\n          if (this.userAnswers.questionAnswers[i].answers.length == 0) {\r\n            flag = false;\r\n            break;\r\n          } else {\r\n            flag = true;\r\n            confirmation = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Show alert if the user has not answered the current question\r\n    if (!flag) {\r\n      confirmation = confirm(\r\n        'Caution: You have not answered this question.\\n Do you want to continue?'\r\n      );\r\n    }\r\n\r\n    if (confirmation) {\r\n      if (index >= 0 && index < this.pager.count) {\r\n        this.pager.index = index;\r\n        this.mode = 'quiz';\r\n      }\r\n    }\r\n  }\r\n\r\n  //  Submits the quiz if the timer expires or if the user clicks on submit button\r\n  onSubmit() {\r\n    var confirmation = true;\r\n    if (\r\n      this.userAnswers == null ||\r\n      this.userAnswers.questionAnswers.length < this.questions.length\r\n    ) {\r\n      // Show alert if some questions are unanswered\r\n      confirmation = confirm(\r\n        'One or more questions are unanswered. Would you still wish to submit the test?'\r\n      );\r\n    } else {\r\n      // Show alert to ask for the user to confirm if the user wishes to submit the quiz\r\n      confirmation = confirm(\r\n        'Are you sure you want to submit the test? You can review your answers before submitting!'\r\n      );\r\n    }\r\n\r\n    // If the user confirms, submit the quiz, save the answers and calculate the score\r\n    if (confirmation) {\r\n      this.mode = 'result';\r\n      this.fillUnansweredQuestions();\r\n      this.questionService\r\n        .saveUserAnswers(this.userAnswers)\r\n        .subscribe((data: any) => {\r\n          this.calculateQuizScore();\r\n          this.saveUserQuizScore(data);\r\n        });\r\n    }\r\n  }\r\n\r\n  // Method to save the gre score which is calculated to the database\r\n  saveUserQuizScore(data: any) {\r\n    this.questionService\r\n      .saveUserQuizScore(this.userService.getUserEmail(), this.quizScore, data)\r\n      .subscribe((data: any) => {});\r\n  }\r\n\r\n  // Method to calculate the quiz score based on the user answers\r\n  calculateQuizScore() {\r\n    var unitQuestionScore = 1;\r\n    var totalScore = 0;\r\n    var flag = true;\r\n    for (var i = 0; i < this.userAnswers.questionAnswers.length; i++) {\r\n      var userAnswers = this.userAnswers.questionAnswers[i].answers;\r\n      var actualAnswers = this.userAnswers.questionAnswers[i].actualAnswers;\r\n      if (userAnswers.length != actualAnswers.length) {\r\n        flag = false;\r\n      } else {\r\n        flag = true;\r\n        for (var j = 0; j < actualAnswers.length; j++) {\r\n          if (userAnswers.indexOf(parseInt(actualAnswers[j])) < 0) {\r\n            flag = false;\r\n          }\r\n        }\r\n      }\r\n      if (flag) {\r\n        totalScore += unitQuestionScore;\r\n      }\r\n    }\r\n    this.quizScore = totalScore;\r\n  }\r\n\r\n  // Save the answer after every question selection by the user\r\n  singleChoiceAnswer(value: number, question: Question) {\r\n    var flag = false;\r\n    var emailId = this.userService.getUserEmail();\r\n\r\n    if (this.userAnswers == null) {\r\n      this.userAnswers = new UserAnswers();\r\n      this.userAnswers.userId = emailId;\r\n      this.userAnswers.testType = 'Quiz';\r\n      var questionAnswers = new Answers();\r\n      this.userAnswers.questionAnswers = [];\r\n      questionAnswers.questionId = question.questionId;\r\n      questionAnswers.actualAnswers = [...question.answer];\r\n      questionAnswers.options = [...question.options];\r\n      questionAnswers.questionTitle = question.title;\r\n      questionAnswers.answers = [];\r\n      questionAnswers.answers.push(value);\r\n      this.userAnswers.questionAnswers.push(questionAnswers);\r\n    } else {\r\n      for (var i = 0; i < this.userAnswers.questionAnswers.length; i++) {\r\n        if (\r\n          this.userAnswers.questionAnswers[i].questionId == question.questionId\r\n        ) {\r\n          this.userAnswers.questionAnswers[i].answers = [];\r\n          this.userAnswers.questionAnswers[i].answers.push(value);\r\n          flag = true;\r\n          break;\r\n        }\r\n      }\r\n      if (!flag) {\r\n        var questionAnswers = new Answers();\r\n        questionAnswers.questionId = question.questionId;\r\n        questionAnswers.actualAnswers = [...question.answer];\r\n        questionAnswers.options = [...question.options];\r\n        questionAnswers.questionTitle = question.title;\r\n        questionAnswers.answers = [];\r\n        questionAnswers.answers.push(value);\r\n        this.userAnswers.questionAnswers.push(questionAnswers);\r\n      }\r\n    }\r\n  }\r\n\r\n  // This method tells the html page if the current option is checked or not for a question\r\n  getStatus(value: number, question: Question): Boolean {\r\n    if (this.userAnswers == null) {\r\n      return false;\r\n    } else {\r\n      for (var i = 0; i < this.userAnswers.questionAnswers.length; i++) {\r\n        if (\r\n          this.userAnswers.questionAnswers[i].questionId == question.questionId\r\n        ) {\r\n          if (this.userAnswers.questionAnswers[i].answers.indexOf(value) > -1) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Save the answer after every question selection by the user\r\n  multiChoiceAnswer(value: number, question: Question, event: any) {\r\n    var flag = false;\r\n    var emailId = this.userService.getUserEmail();\r\n\r\n    if (event.checked) {\r\n      if (this.userAnswers == null) {\r\n        this.userAnswers = new UserAnswers();\r\n        this.userAnswers.userId = emailId;\r\n        this.userAnswers.testType = 'Quiz';\r\n        var questionAnswers = new Answers();\r\n        this.userAnswers.questionAnswers = [];\r\n        questionAnswers.questionId = question.questionId;\r\n        questionAnswers.actualAnswers = [...question.answer];\r\n        questionAnswers.options = [...question.options];\r\n        questionAnswers.questionTitle = question.title;\r\n        questionAnswers.answers = [];\r\n        questionAnswers.answers.push(value);\r\n        this.userAnswers.questionAnswers.push(questionAnswers);\r\n      } else {\r\n        for (var i = 0; i < this.userAnswers.questionAnswers.length; i++) {\r\n          if (\r\n            this.userAnswers.questionAnswers[i].questionId ==\r\n            question.questionId\r\n          ) {\r\n            this.userAnswers.questionAnswers[i].answers.push(value);\r\n            flag = true;\r\n            break;\r\n          }\r\n        }\r\n        if (!flag) {\r\n          var questionAnswers = new Answers();\r\n          questionAnswers.questionId = question.questionId;\r\n          questionAnswers.actualAnswers = [...question.answer];\r\n          questionAnswers.options = [...question.options];\r\n          questionAnswers.questionTitle = question.title;\r\n          questionAnswers.answers = [];\r\n          questionAnswers.answers.push(value);\r\n          this.userAnswers.questionAnswers.push(questionAnswers);\r\n        }\r\n      }\r\n    } else {\r\n      for (var i = 0; i < this.userAnswers.questionAnswers.length; i++) {\r\n        if (\r\n          this.userAnswers.questionAnswers[i].questionId == question.questionId\r\n        ) {\r\n          this.userAnswers.questionAnswers[i].answers.splice(\r\n            this.userAnswers.questionAnswers[i].answers.indexOf(value),\r\n            1\r\n          );\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Quits the test and redirects to gre page\r\n  quitTest() {\r\n    if (\r\n      confirm(\r\n        'Are you sure you want to quit the test? You still have enough time left!'\r\n      )\r\n    ) {\r\n      this.router.navigate(['/gre']);\r\n    }\r\n  }\r\n\r\n  // Redirects to gre page when the user clicks on Back to GRE\r\n  goToGreHome() {\r\n    this.router.navigate(['/gre']);\r\n  }\r\n\r\n  // Method to fill any unanswered question and set the answer to a default value that is -1\r\n  fillUnansweredQuestions() {\r\n    var flag = false;\r\n    for (var i = 0; i < this.questions.length; i++) {\r\n      flag = false;\r\n      for (var j = 0; j < this.userAnswers.questionAnswers.length; j++) {\r\n        if (\r\n          this.questions[i].questionId ==\r\n          this.userAnswers.questionAnswers[j].questionId\r\n        ) {\r\n          flag = true;\r\n        }\r\n      }\r\n      if (!flag) {\r\n        var questionAnswers = new Answers();\r\n        questionAnswers.questionId = this.questions[i].questionId;\r\n        questionAnswers.questionTitle = this.questions[i].title;\r\n        questionAnswers.actualAnswers = [...this.questions[i].answer];\r\n        questionAnswers.options = [...this.questions[i].options];\r\n        questionAnswers.answers = [];\r\n        questionAnswers.answers.push(-1);\r\n        this.userAnswers.questionAnswers.push(questionAnswers);\r\n      }\r\n    }\r\n  }\r\n}\r\n","<!--Author - Padmesh Donthu-->\r\n<div style=\"background-color: #e7ebee; min-height: 100%;\">\r\n  <app-header></app-header>\r\n  <div class=\"loading-indicator\" *ngIf=\"loading\">\r\n    <mat-spinner></mat-spinner>\r\n  </div>\r\n  <div\r\n    class=\"container\"\r\n    style=\"padding-top: 20px; padding-bottom: 20px;\"\r\n    *ngIf=\"!loading\"\r\n  >\r\n    <div class=\"row\">\r\n      <div class=\"col s12\">\r\n        <div *ngIf=\"mode == 'quiz'\">\r\n          <div *ngFor=\"let question of filteredQuestions\">\r\n            <div class=\"row\">\r\n              <div\r\n                class=\"col s3\"\r\n                style=\"\r\n                  background-color: #283593 !important;\r\n                  padding: 10px;\r\n                  color: white;\r\n                  font-size: medium;\r\n                \"\r\n              >\r\n                Question {{ pager.index + 1 }} of {{ pager.count }}\r\n              </div>\r\n            </div>\r\n            <div>{{ pager.index + 1 }}. {{ question.title }}</div>\r\n            <div *ngIf=\"question.image != null\" class=\"center-align\">\r\n              <br />\r\n              <img src=\"{{ question.image }}\" />\r\n            </div>\r\n            <br />\r\n            <div class=\"row\">\r\n              <div class=\"col s12\">\r\n                <div *ngIf=\"question.answer.length == 1\">\r\n                  <mat-radio-group>\r\n                    <mat-radio-button\r\n                      *ngFor=\"let option of question.options; let a = index\"\r\n                      [value]=\"a\"\r\n                      class=\"col s12\"\r\n                      [checked]=\"getStatus(a, question)\"\r\n                      (change)=\"singleChoiceAnswer(a, question)\"\r\n                    >\r\n                      {{ option }}\r\n                    </mat-radio-button>\r\n                  </mat-radio-group>\r\n                </div>\r\n                <div *ngIf=\"question.answer.length != 1\">\r\n                  <div *ngFor=\"let option of question.options; let j = index\">\r\n                    <mat-checkbox\r\n                      style=\"margin-top: 12px;\"\r\n                      class=\"col s12\"\r\n                      color=\"accent\"\r\n                      [checked]=\"getStatus(j, question)\"\r\n                      (change)=\"multiChoiceAnswer(j, question, $event)\"\r\n                    >\r\n                      {{ option }}\r\n                    </mat-checkbox>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <br />\r\n            <hr />\r\n            <div class=\"row\" style=\"margin-top: 20px;\">\r\n              <div class=\"col s3\">\r\n                <button\r\n                  class=\"btn waves-effect waves-light indigo darken-3\"\r\n                  *ngIf=\"config.allowBack\"\r\n                  (click)=\"goTo(0, question)\"\r\n                >\r\n                  First\r\n                </button>\r\n              </div>\r\n              <div class=\"col s3\">\r\n                <button\r\n                  class=\"btn waves-effect waves-light indigo darken-3\"\r\n                  *ngIf=\"config.allowBack\"\r\n                  (click)=\"goTo(pager.index - 1, question)\"\r\n                >\r\n                  Previous\r\n                </button>\r\n              </div>\r\n              <div class=\"col s3\">\r\n                <button\r\n                  class=\"btn waves-effect waves-light indigo darken-3\"\r\n                  *ngIf=\"config.allowBack\"\r\n                  (click)=\"goTo(pager.index + 1, question)\"\r\n                >\r\n                  Next\r\n                </button>\r\n              </div>\r\n              <div class=\"col s3\">\r\n                <button\r\n                  class=\"btn waves-effect waves-light indigo darken-3\"\r\n                  *ngIf=\"config.allowBack\"\r\n                  (click)=\"goTo(pager.count - 1, question)\"\r\n                >\r\n                  Last\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\" *ngIf=\"mode != 'result'\">\r\n          <hr />\r\n          <br />\r\n          <div class=\"center-align\">\r\n            <div *ngIf=\"mode != 'result' && pager.count - 1 == pager.index\">\r\n              <button\r\n                class=\"btn waves-effect waves-light\"\r\n                color=\"primary\"\r\n                (click)=\"onSubmit()\"\r\n              >\r\n                Submit Your Answers\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div *ngIf=\"mode == 'result'\">\r\n          <div class=\"container\">\r\n            <div class=\"row\">\r\n              <div class=\"center-align\">\r\n                <div\r\n                  class=\"card hoverable blue-grey darken-1\"\r\n                  style=\"padding: 20px;\"\r\n                >\r\n                  <div class=\"card-content white-text\">\r\n                    <span class=\"card-title\">Quiz Score</span>\r\n                    <p>Your Quiz Score is {{ quizScore }}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"center-align\">\r\n                <button\r\n                  class=\"btn waves-effect waves-light indigo darken-3\"\r\n                  (click)=\"goToGreHome()\"\r\n                >\r\n                  Back to GRE\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\" *ngIf=\"mode != 'result'\">\r\n          <div class=\"center-align\">\r\n            <button\r\n              class=\"btn waves-effect waves-light red darken-3\"\r\n              (click)=\"quitTest()\"\r\n            >\r\n              Quit your Test\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","// Author - Padmesh Donthu\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Question } from '../models/question';\nimport { QuestionManagerService } from '../services/question-manager.service';\nimport { QuestionConfig } from '../models/question-config';\nimport { UserAnswers } from '../models/user-answers';\nimport { Answers } from '../models/answers';\nimport { UserService } from '../services/user.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-take-verbal-test',\n  templateUrl: './take-verbal-test.component.html',\n  styleUrls: [\n    '../../../node_modules/materialize-css/dist/css/materialize.min.css',\n    './take-verbal-test.component.css',\n  ],\n  encapsulation: ViewEncapsulation.Emulated,\n})\nexport class TakeVerbalTestComponent implements OnInit {\n  // Class variables that are used in the html for reactivity\n  questions: Question[];\n  mode = 'quiz';\n  loading = true;\n\n  // Stores the final gre score based on the answers\n  verbalPracticeScore = 0;\n\n  // Stores all the user answers\n  userAnswers: UserAnswers = null;\n\n  // Setting the configuration for the Test\n  config: QuestionConfig = {\n    allowBack: true,\n    autoMove: false, // if true, it will move to next question automatically when answered.\n    duration: 0, // indicates the time (in secs) in which quiz needs to be completed. 0 means unlimited.\n    pageSize: 1,\n    showClock: false,\n    showPager: true,\n    theme: 'none',\n  };\n\n  // These attributes are used\n  pager = {\n    index: 0,\n    size: 1,\n    count: 1,\n  };\n\n  // Injecting services and router to the component\n  constructor(\n    private questionService: QuestionManagerService,\n    private userService: UserService,\n    private router: Router\n  ) {}\n\n  // Gets all the questions available for the test when the component is initialised\n  ngOnInit(): void {\n    this.loadQuestions();\n  }\n\n  // Gets the questions for the verbal practice tests using the question service\n  loadQuestions() {\n    this.questionService\n      .getQuestionsForVerbalAndQuantPractice()\n      .subscribe((data: Question[]) => {\n        this.questions = data;\n        this.loading = false;\n        this.pager.count = this.questions.length;\n      });\n  }\n\n  // Used to get the next question based on the button click\n  get filteredQuestions() {\n    return this.questions\n      ? this.questions.slice(\n          this.pager.index,\n          this.pager.index + this.pager.size\n        )\n      : [];\n  }\n\n  // Used for automatically moving to next question once user selects the option\n  onSelect(question: Question) {\n    if (this.config.autoMove) {\n      this.goTo(this.pager.index + 1, question);\n    }\n  }\n\n  // This method is used to move the user to the question based on the button click\n  goTo(index: number, question: Question) {\n    var flag = false;\n    var confirmation = false;\n    if (this.userAnswers != null) {\n      for (var i = 0; i < this.userAnswers.questionAnswers.length; i++) {\n        if (\n          this.userAnswers.questionAnswers[i].questionId == question.questionId\n        ) {\n          if (this.userAnswers.questionAnswers[i].answers.length == 0) {\n            flag = false;\n            break;\n          } else {\n            flag = true;\n            confirmation = true;\n            break;\n          }\n        }\n      }\n    }\n\n    // Show alert if the user has not answered the current question\n    if (!flag) {\n      confirmation = confirm(\n        'Caution: You have not answered this question.\\n Do you want to continue?'\n      );\n    }\n\n    if (confirmation) {\n      if (index >= 0 && index < this.pager.count) {\n        this.pager.index = index;\n        this.mode = 'quiz';\n      }\n    }\n  }\n\n  //  Submits the quiz if the timer expires or if the user clicks on submit button\n  onSubmit() {\n    var confirmation = true;\n    if (\n      this.userAnswers == null ||\n      this.userAnswers.questionAnswers.length < this.questions.length\n    ) {\n      // Show alert if some questions are unanswered\n      confirmation = confirm(\n        'One or more questions are unanswered. Would you still wish to submit the test?'\n      );\n    } else {\n      // Show alert to ask for the user to confirm if the user wishes to submit the quiz\n      confirmation = confirm(\n        'Are you sure you want to submit the test? You can review your answers before submitting!'\n      );\n    }\n\n    // If the user confirms, submit the quiz, save the answers and calculate the score\n    if (confirmation) {\n      this.mode = 'result';\n      this.fillUnansweredQuestions();\n      this.questionService\n        .saveUserAnswers(this.userAnswers)\n        .subscribe((data: any) => {\n          this.calculateVerbalPracticeScore();\n          this.saveUserVerbalPracticeScore(data);\n        });\n    }\n  }\n\n  // Method to save the gre score which is calculated to the database\n  saveUserVerbalPracticeScore(data: any) {\n    this.questionService\n      .saveUserVerbalPracticeScore(\n        this.userService.getUserEmail(),\n        this.verbalPracticeScore,\n        data\n      )\n      .subscribe((data: any) => {});\n  }\n\n  // Method to calculate the verbal practice test score based on the user answers\n  calculateVerbalPracticeScore() {\n    var unitQuestionScore = 1;\n    var totalScore = 0;\n    var flag = true;\n    for (var i = 0; i < this.userAnswers.questionAnswers.length; i++) {\n      var userAnswers = this.userAnswers.questionAnswers[i].answers;\n      var actualAnswers = this.userAnswers.questionAnswers[i].actualAnswers;\n      if (userAnswers.length != actualAnswers.length) {\n        flag = false;\n      } else {\n        flag = true;\n        for (var j = 0; j < actualAnswers.length; j++) {\n          if (userAnswers.indexOf(parseInt(actualAnswers[j])) < 0) {\n            flag = false;\n          }\n        }\n      }\n      if (flag) {\n        totalScore += unitQuestionScore;\n      }\n    }\n    this.verbalPracticeScore = totalScore;\n  }\n\n  // Save the answer after every question selection by the user\n  singleChoiceAnswer(value: number, question: Question) {\n    var flag = false;\n    var emailId = this.userService.getUserEmail();\n\n    if (this.userAnswers == null) {\n      this.userAnswers = new UserAnswers();\n      this.userAnswers.userId = emailId;\n      this.userAnswers.testType = this.questionService.questionType;\n      var questionAnswers = new Answers();\n      this.userAnswers.questionAnswers = [];\n      questionAnswers.questionId = question.questionId;\n      questionAnswers.actualAnswers = [...question.answer];\n      questionAnswers.options = [...question.options];\n      questionAnswers.questionTitle = question.title;\n      questionAnswers.answers = [];\n      questionAnswers.answers.push(value);\n      this.userAnswers.questionAnswers.push(questionAnswers);\n    } else {\n      for (var i = 0; i < this.userAnswers.questionAnswers.length; i++) {\n        if (\n          this.userAnswers.questionAnswers[i].questionId == question.questionId\n        ) {\n          this.userAnswers.questionAnswers[i].answers = [];\n          this.userAnswers.questionAnswers[i].answers.push(value);\n          flag = true;\n          break;\n        }\n      }\n      if (!flag) {\n        var questionAnswers = new Answers();\n        questionAnswers.questionId = question.questionId;\n        questionAnswers.actualAnswers = [...question.answer];\n        questionAnswers.options = [...question.options];\n        questionAnswers.questionTitle = question.title;\n        questionAnswers.answers = [];\n        questionAnswers.answers.push(value);\n        this.userAnswers.questionAnswers.push(questionAnswers);\n      }\n    }\n  }\n\n  // This method tells the html page if the current option is checked or not for a question\n  getStatus(value: number, question: Question): Boolean {\n    if (this.userAnswers == null) {\n      return false;\n    } else {\n      for (var i = 0; i < this.userAnswers.questionAnswers.length; i++) {\n        if (\n          this.userAnswers.questionAnswers[i].questionId == question.questionId\n        ) {\n          if (this.userAnswers.questionAnswers[i].answers.indexOf(value) > -1) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }\n\n  // Save the answer after every question selection by the user\n  multiChoiceAnswer(value: number, question: Question, event: any) {\n    var flag = false;\n    var emailId = this.userService.getUserEmail();\n\n    if (event.checked) {\n      if (this.userAnswers == null) {\n        this.userAnswers = new UserAnswers();\n        this.userAnswers.userId = emailId;\n        this.userAnswers.testType = this.questionService.questionType;\n        var questionAnswers = new Answers();\n        this.userAnswers.questionAnswers = [];\n        questionAnswers.questionId = question.questionId;\n        questionAnswers.actualAnswers = [...question.answer];\n        questionAnswers.options = [...question.options];\n        questionAnswers.questionTitle = question.title;\n        questionAnswers.answers = [];\n        questionAnswers.answers.push(value);\n        this.userAnswers.questionAnswers.push(questionAnswers);\n      } else {\n        for (var i = 0; i < this.userAnswers.questionAnswers.length; i++) {\n          if (\n            this.userAnswers.questionAnswers[i].questionId ==\n            question.questionId\n          ) {\n            this.userAnswers.questionAnswers[i].answers.push(value);\n            flag = true;\n            break;\n          }\n        }\n        if (!flag) {\n          var questionAnswers = new Answers();\n          questionAnswers.questionId = question.questionId;\n          questionAnswers.actualAnswers = [...question.answer];\n          questionAnswers.options = [...question.options];\n          questionAnswers.questionTitle = question.title;\n          questionAnswers.answers = [];\n          questionAnswers.answers.push(value);\n          this.userAnswers.questionAnswers.push(questionAnswers);\n        }\n      }\n    } else {\n      for (var i = 0; i < this.userAnswers.questionAnswers.length; i++) {\n        if (\n          this.userAnswers.questionAnswers[i].questionId == question.questionId\n        ) {\n          this.userAnswers.questionAnswers[i].answers.splice(\n            this.userAnswers.questionAnswers[i].answers.indexOf(value),\n            1\n          );\n          break;\n        }\n      }\n    }\n  }\n\n  // Quits the test and redirects to gre page\n  quitTest() {\n    if (\n      confirm(\n        'Are you sure you want to quit the test? You still have enough time left!'\n      )\n    ) {\n      this.router.navigate(['/gre']);\n    }\n  }\n\n  // Redirects to gre page when the user clicks on Back to GRE\n  goToGreHome() {\n    this.router.navigate(['/gre']);\n  }\n\n  // Method to fill any unanswered question and set the answer to a default value that is -1\n  fillUnansweredQuestions() {\n    var flag = false;\n    for (var i = 0; i < this.questions.length; i++) {\n      flag = false;\n      for (var j = 0; j < this.userAnswers.questionAnswers.length; j++) {\n        if (\n          this.questions[i].questionId ==\n          this.userAnswers.questionAnswers[j].questionId\n        ) {\n          flag = true;\n        }\n      }\n      if (!flag) {\n        var questionAnswers = new Answers();\n        questionAnswers.questionId = this.questions[i].questionId;\n        questionAnswers.questionTitle = this.questions[i].title;\n        questionAnswers.actualAnswers = [...this.questions[i].answer];\n        questionAnswers.options = [...this.questions[i].options];\n        questionAnswers.answers = [];\n        questionAnswers.answers.push(-1);\n        this.userAnswers.questionAnswers.push(questionAnswers);\n      }\n    }\n  }\n}\n","<!--Author - Padmesh Donthu-->\n<div style=\"background-color: #e7ebee; min-height: 100%;\">\n    <app-header></app-header>\n    <div class=\"loading-indicator\" *ngIf=\"loading\">\n      <mat-spinner></mat-spinner>\n    </div>\n    <div\n      class=\"container\"\n      style=\"padding-top: 20px; padding-bottom: 20px;\"\n      *ngIf=\"!loading\"\n    >\n      <div class=\"row\">\n        <div class=\"col s12\">\n          <div *ngIf=\"mode == 'quiz'\">\n            <div *ngFor=\"let question of filteredQuestions\">\n              <div class=\"row\">\n                <div\n                  class=\"col s3\"\n                  style=\"\n                    background-color: #283593 !important;\n                    padding: 10px;\n                    color: white;\n                    font-size: medium;\n                  \"\n                >\n                  Question {{ pager.index + 1 }} of {{ pager.count }}\n                </div>\n              </div>\n              <div>{{ pager.index + 1 }}. {{ question.title }}</div>\n              <div *ngIf=\"question.image != null\" class=\"center-align\">\n                <br />\n                <img src=\"{{ question.image }}\" />\n              </div>\n              <br />\n              <div class=\"row\">\n                <div class=\"col s12\">\n                  <div *ngIf=\"question.answer.length == 1\">\n                    <mat-radio-group>\n                      <mat-radio-button\n                        *ngFor=\"let option of question.options; let a = index\"\n                        [value]=\"a\"\n                        class=\"col s12\"\n                        [checked]=\"getStatus(a, question)\"\n                        (change)=\"singleChoiceAnswer(a, question)\"\n                      >\n                        {{ option }}\n                      </mat-radio-button>\n                    </mat-radio-group>\n                  </div>\n                  <div *ngIf=\"question.answer.length != 1\">\n                    <div *ngFor=\"let option of question.options; let j = index\">\n                      <mat-checkbox\n                        style=\"margin-top: 12px;\"\n                        class=\"col s12\"\n                        color=\"accent\"\n                        [checked]=\"getStatus(j, question)\"\n                        (change)=\"multiChoiceAnswer(j, question, $event)\"\n                      >\n                        {{ option }}\n                      </mat-checkbox>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <br />\n              <hr />\n              <div class=\"row\" style=\"margin-top: 20px;\">\n                <div class=\"col s3\">\n                  <button\n                    class=\"btn waves-effect waves-light indigo darken-3\"\n                    *ngIf=\"config.allowBack\"\n                    (click)=\"goTo(0, question)\"\n                  >\n                    First\n                  </button>\n                </div>\n                <div class=\"col s3\">\n                  <button\n                    class=\"btn waves-effect waves-light indigo darken-3\"\n                    *ngIf=\"config.allowBack\"\n                    (click)=\"goTo(pager.index - 1, question)\"\n                  >\n                    Previous\n                  </button>\n                </div>\n                <div class=\"col s3\">\n                  <button\n                    class=\"btn waves-effect waves-light indigo darken-3\"\n                    *ngIf=\"config.allowBack\"\n                    (click)=\"goTo(pager.index + 1, question)\"\n                  >\n                    Next\n                  </button>\n                </div>\n                <div class=\"col s3\">\n                  <button\n                    class=\"btn waves-effect waves-light indigo darken-3\"\n                    *ngIf=\"config.allowBack\"\n                    (click)=\"goTo(pager.count - 1, question)\"\n                  >\n                    Last\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" *ngIf=\"mode != 'result'\">\n            <hr />\n            <br />\n            <div class=\"center-align\">\n              <div *ngIf=\"mode != 'result' && pager.count - 1 == pager.index\">\n                <button\n                  class=\"btn waves-effect waves-light\"\n                  color=\"primary\"\n                  (click)=\"onSubmit()\"\n                >\n                  Submit Your Answers\n                </button>\n              </div>\n            </div>\n          </div>\n          <div *ngIf=\"mode == 'result'\">\n            <div class=\"container\">\n              <div class=\"row\">\n                <div class=\"center-align\">\n                  <div\n                    class=\"card hoverable blue-grey darken-1\"\n                    style=\"padding: 20px;\"\n                  >\n                    <div class=\"card-content white-text\">\n                      <span class=\"card-title\">Verbal Practice Score</span>\n                      <p>Your Score is {{ verbalPracticeScore }}</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"row\">\n                <div class=\"center-align\">\n                  <button\n                    class=\"btn waves-effect waves-light indigo darken-3\"\n                    (click)=\"goToGreHome()\"\n                  >\n                    Back to GRE\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" *ngIf=\"mode != 'result'\">\n            <div class=\"center-align\">\n              <button\n                class=\"btn waves-effect waves-light red darken-3\"\n                (click)=\"quitTest()\"\n              >\n                Quit your Test\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  ","// Author - Padmesh Donthu\r\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { QuestionManagerService } from '../services/question-manager.service';\r\n\r\n@Component({\r\n  selector: 'app-verbal-practice',\r\n  templateUrl: './verbal-practice.component.html',\r\n  styleUrls: [\r\n    '../../../node_modules/materialize-css/dist/css/materialize.min.css',\r\n    './verbal-practice.component.css',\r\n  ],\r\n  encapsulation: ViewEncapsulation.Emulated,\r\n})\r\nexport class VerbalPracticeComponent implements OnInit {\r\n  // Inject router and services to the component\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private questionService: QuestionManagerService\r\n  ) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  // Method to route the user to quantitative test page\r\n  next() {\r\n    if (\r\n      this.questionService.questionCount == 0 ||\r\n      this.questionService.questionType == ''\r\n    ) {\r\n      alert(\r\n        'Please select all the options available before starting your test'\r\n      );\r\n    } else {\r\n      this.router.navigate(['takeVerbalPracticeTest'], {\r\n        relativeTo: this.route,\r\n      });\r\n    }\r\n  }\r\n\r\n  // Method to set the number of questions for the verbal practice test\r\n  setNumberOfQuestions(questionCount: number) {\r\n    this.questionService.questionCount = questionCount;\r\n  }\r\n\r\n  // Method to set the verbal questions type\r\n  setQuestionType(questionType: string) {\r\n    this.questionService.questionType = questionType;\r\n  }\r\n}\r\n","<!--Author - Padmesh Donthu-->\r\n<div style=\"background-color: #e7ebee; min-height: 100%;\">\r\n  <app-header></app-header>\r\n  <div class=\"container\" style=\"padding-top: 20px; padding-bottom: 20px;\">\r\n    <h2 class=\"center-align\">GRE Verbal Practice</h2>\r\n    <div class=\"row\">\r\n      <div class=\"center-align\">\r\n        Use the GREPrep Verbal Practice to help you prepare for the\r\n        computer-delivered GRE General Test. The Verbal Practice Quizzes are\r\n        designed to help you:\r\n        <ul class=\"collection\">\r\n          <li class=\"collection-item\">\r\n            Understand what's being tested Gain familiarity with the various\r\n            question types and difficulty level of Verbal type of questions\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            Practice your test-taking strategies by understanding the topics\r\n            thoroughly\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            Use the concepts you have prepared in verbal question types\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n    <br />\r\n    <div class=\"row\">\r\n      <div class=\"center-align\">\r\n        <h5>Instructions</h5>\r\n        <ul class=\"collection\">\r\n          <li class=\"collection-item\">\r\n            The Quiz is untimed i.e. you will have unlimited time to complete\r\n            it. You can choose the number of questions to attempt before taking\r\n            the quiz.\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            The questions consist of Verbal types.\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            The questions can either be multiple choice or single choice types\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            Once you submit your test, you can get your quiz score. Each\r\n            question will be of 1 mark.\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            You can use buttons like First, Previous, Next, and Last to move to\r\n            questions\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            Select the type of verbal questions you want to attempt\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            Select the number of questions you want to attempt\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            Click on Start Your Quiz button below to start your Quiz.\r\n          </li>\r\n          <li class=\"collection-item\">\r\n            Once you click on the button, the test starts immediately.\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n    <br />\r\n    <div class=\"row\">\r\n      <div class=\"center-align\">\r\n        <mat-radio-group>\r\n          <mat-radio-button\r\n            value=\"VTCQ\"\r\n            class=\"radioBtn\"\r\n            (change)=\"setQuestionType('VTCQ')\"\r\n            >Text Completion\r\n          </mat-radio-button>\r\n          <mat-radio-button\r\n            value=\"VSEQ\"\r\n            class=\"radioBtn\"\r\n            (change)=\"setQuestionType('VSEQ')\"\r\n            >Sentence Equivalence\r\n          </mat-radio-button>\r\n        </mat-radio-group>\r\n      </div>\r\n    </div>\r\n    <br />\r\n    <div class=\"row\">\r\n      <div class=\"center-align\">\r\n        <mat-radio-group>\r\n          <mat-radio-button\r\n            value=\"10\"\r\n            class=\"radioBtn\"\r\n            (change)=\"setNumberOfQuestions(10)\"\r\n            >10\r\n          </mat-radio-button>\r\n          <mat-radio-button\r\n            value=\"20\"\r\n            class=\"radioBtn\"\r\n            (change)=\"setNumberOfQuestions(20)\"\r\n            >20\r\n          </mat-radio-button>\r\n          <mat-radio-button\r\n            value=\"30\"\r\n            class=\"radioBtn\"\r\n            (change)=\"setNumberOfQuestions(30)\"\r\n            >30\r\n          </mat-radio-button>\r\n          <mat-radio-button\r\n            value=\"40\"\r\n            class=\"radioBtn\"\r\n            (change)=\"setNumberOfQuestions(40)\"\r\n            >40\r\n          </mat-radio-button>\r\n          <mat-radio-button\r\n            value=\"50\"\r\n            class=\"radioBtn\"\r\n            (change)=\"setNumberOfQuestions(50)\"\r\n            >50\r\n          </mat-radio-button>\r\n        </mat-radio-group>\r\n      </div>\r\n    </div>\r\n    <br />\r\n    <div class=\"row\">\r\n      <div class=\"center-align\">\r\n        <button\r\n          class=\"btn waves-effect waves-light indigo darken-3\"\r\n          (click)=\"next()\"\r\n        >\r\n          Start your Quiz\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","// Author - Padmesh Donthu\nimport { Component, OnInit } from '@angular/core';\nimport { QuestionManagerService } from '../services/question-manager.service';\nimport { UserAnswers } from '../models/user-answers';\nimport { Answers } from '../models/answers';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-view-answers',\n  templateUrl: './view-answers.component.html',\n  styleUrls: [\n    '../../../node_modules/materialize-css/dist/css/materialize.min.css',\n    './view-answers.component.css',\n  ],\n})\nexport class ViewAnswersComponent implements OnInit {\n  // Inject router and services in the component\n  constructor(\n    private questionService: QuestionManagerService,\n    private router: Router\n  ) {}\n\n  userAnswer: UserAnswers;\n  loading: boolean = true;\n\n  // Get the list of answers for a particular test for a user\n  ngOnInit(): void {\n    this.questionService.getAnswers().subscribe((data: UserAnswers) => {\n      this.userAnswer = data;\n      this.loading = false;\n    });\n  }\n\n  // Check if the user has checked a particular option or not\n  getStatus(value: number, answer: Answers): boolean {\n    for (var i = 0; i < answer.answers.length; i++) {\n      if (value == answer.answers[i]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Method to navigate the user back to the attempt history page\n  goToAttemptHistory() {\n    this.router.navigate(['/attemptHistory']);\n  }\n\n  // Method to get the test type for a test\n  getTestType(): string {\n    switch (this.userAnswer.testType) {\n      case 'MT':\n        return 'Mock Test';\n      case 'Quiz':\n        return 'Quiz';\n      case 'QC':\n        return 'Quantitative Comparison';\n      case 'QMCQ':\n        return 'Quantitative - Multiple Choice One Answer';\n      case 'QSMQ':\n        return 'Quantitative - Multiple Choice One or More Answers';\n      case 'VTCQ':\n        return 'Verbal - Text Completion';\n      case 'VSEQ':\n        return 'Verbal - Sentence Equivalence';\n      default:\n        return 'Test';\n    }\n  }\n\n  // Method to get the correct answer for each question\n  getCorrectAnswer(answer: Answers): string {\n    var correctAnswer = '';\n    for (var i = 0; i < answer.actualAnswers.length; i++) {\n      correctAnswer =\n        correctAnswer + answer.options[answer.actualAnswers[i]] + ' ';\n    }\n    return correctAnswer;\n  }\n\n  // Method to check if the user has answered correctly or not\n  checkIfUserAnsweredCorrectly(answer: Answers): boolean {\n    if (answer.answers.length != answer.actualAnswers.length) {\n      return false;\n    }\n    for (var i = 0; i < answer.actualAnswers.length; i++) {\n      if (answer.answers.indexOf(parseInt(answer.actualAnswers[i])) < 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // Method to move to bottom of the screen\n  moveDown() {\n    window.scrollTo(0, document.body.scrollHeight);\n  }\n\n  // Method to move to top of the screen\n  moveUp() {\n    window.scrollTo(0, 0);\n  }\n}\n","<!--Author - Padmesh Donthu-->\n<div style=\"background-color: #e7ebee; min-height: 100%;\">\n  <app-header></app-header>\n  <div class=\"loading-indicator\" *ngIf=\"loading\">\n    <mat-spinner></mat-spinner>\n  </div>\n  <div\n    class=\"container\"\n    style=\"padding-top: 20px; padding-bottom: 20px;\"\n    *ngIf=\"!loading\"\n  >\n    <h4>Your {{ getTestType() }} answers are:</h4>\n    <i\n      class=\"medium material-icons icon-bottom\"\n      (click)=\"moveDown()\"\n      matTooltip=\"Go to bottom\"\n      >arrow_drop_down</i\n    >\n    <i\n      class=\"medium material-icons icon-top\"\n      (click)=\"moveUp()\"\n      matTooltip=\"Go to top\"\n      >arrow_drop_up</i\n    >\n    <div class=\"row\">\n      <div class=\"col s12\">\n        <div *ngFor=\"let answer of userAnswer.questionAnswers; let a = index\">\n          <div class=\"row\">\n            <div\n              class=\"col s3\"\n              style=\"\n                background-color: #283593 !important;\n                padding: 10px;\n                color: white;\n                font-size: medium;\n              \"\n            >\n              Question {{ a + 1 }} of {{ userAnswer.questionAnswers.length }}\n            </div>\n            <div class=\"col s3\" style=\"float: right; margin-top: 10px;\">\n              <i\n                class=\"medium material-icons icon-green\"\n                *ngIf=\"checkIfUserAnsweredCorrectly(answer)\"\n                >check</i\n              >\n              <i\n                class=\"medium material-icons icon-red\"\n                *ngIf=\"!checkIfUserAnsweredCorrectly(answer)\"\n                >close</i\n              >\n            </div>\n          </div>\n          <div>{{ answer.questionTitle }}</div>\n          <br />\n          <div class=\"row\">\n            <div class=\"col s12\">\n              <div *ngIf=\"answer.actualAnswers.length == 1\">\n                <mat-radio-group>\n                  <mat-radio-button\n                    *ngFor=\"let option of answer.options; let i = index\"\n                    [value]=\"i\"\n                    class=\"col s12\"\n                    [checked]=\"getStatus(i, answer)\"\n                    disabled=\"true\"\n                  >\n                    {{ option }}\n                  </mat-radio-button>\n                </mat-radio-group>\n              </div>\n              <div *ngIf=\"answer.actualAnswers.length != 1\">\n                <div *ngFor=\"let option of answer.options; let j = index\">\n                  <mat-checkbox\n                    style=\"margin-top: 12px;\"\n                    class=\"col s12\"\n                    color=\"accent\"\n                    [checked]=\"getStatus(j, answer)\"\n                    disabled=\"true\"\n                  >\n                    {{ option }}\n                  </mat-checkbox>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"center-align\">\n              Correct Answer: {{ getCorrectAnswer(answer) }}\n            </div>\n          </div>\n          <hr />\n          <br />\n        </div>\n        <div class=\"row\">\n          <div class=\"center-align\">\n            <button\n              class=\"btn waves-effect waves-light red darken-3\"\n              (click)=\"goToAttemptHistory()\"\n            >\n              Back to Attempt History\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-why-masters',\r\n  templateUrl: './why-masters.component.html',\r\n  styleUrls: ['./why-masters.component.css'],\r\n  encapsulation: ViewEncapsulation.Emulated\r\n})\r\nexport class WhyMastersComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div style=\"overflow: auto; min-height: 100%; background-color: #e7ebee;\">\r\n  <app-header></app-header>\r\n  <div class=\"heading\">Why Masters?</div>\r\n  <div class=\"content\">\r\n    There are various reasons that students choose to pursue a masters degree.\r\n    Every student has thier own reasons, however here we will provide the most\r\n    commons reasons that will boost the motivation level of the students to\r\n    pursue masters in thier corresponding fields. <br />\r\n    <b>FINANCIAL GAIN</b>: A student having bachelors degree and a student\r\n    having bachelors plus a masters degree have significant differences in their\r\n    payscale. Statistically speaking having a masters degree shows an average\r\n    25% increase in the payscale of the students. So if a student applies for a\r\n    job in a given company, then they will get almost 25% more salary if they\r\n    have a masters degree as compared to a student who has only bachelors\r\n    degree. So why not put little effort, grab this opportunity and get those\r\n    extra bucks to ameliorate the quality of life. <br />\r\n    <b>CAREER ADVANCEMENT</b>: If a student has a masters degree in thier cv, it\r\n    makes a lot of difference in various ways. The way in which the employer\r\n    shortlists the candidates for a particular role, having masters adds an\r\n    extra advantage. Most students especially those who already have decent CVs\r\n    – do a masters to progress to the next stage in their career. This might\r\n    mean an MS in a field of interest, or even something totally unrelated if\r\n    the student is looking to change direction completely; either way, a masters\r\n    can be used as a very valuable stepping stone. Employers recognise the value\r\n    of a masters degree – some even make it a prerequisite, while in industries\r\n    such as healthcare and education, they are mandatory. But even in general\r\n    terms, a masters can set a student apart from the crowd.<br />\r\n    <b>SPECIALIST KNOWLEDGE</b>: As the name suggests, masters means the student\r\n    will gain in depth knowledge of that particular stream. For instance a\r\n    student who has done masters in computer science will be an expert of\r\n    computer science. Doing masters will involve lot of hard work and learning\r\n    some very new concepts that a bachelors student will never know, and that\r\n    knowledge will provide a great advantage for the student to excel in getting\r\n    placements in some of the top employers of the world in thier field of\r\n    interest. <br />\r\n    <b>PERSONAL DEVELOPMENT</b>: A masters degree is not just about academic\r\n    achievement; it should also encourage personal development. A student learns\r\n    to manage time by doing assignments, presentations etc. A discipline is\r\n    required to achieve good grades if a student is pursuing masters from a\r\n    reputed university. There are many qualities that a student inculcates while\r\n    doing masters like patience, accuracy, discipline, academic integrity and\r\n    many more. By their definition, postgraduate courses are very autonomous,\r\n    with much of the emphasis on the individual themselves to put things in\r\n    motion, and this helps in overall personality development of the individual.\r\n    <br />\r\n  </div>\r\n</div>\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: true,\r\n  apiBaseUrl: 'http://localhost:8080'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}